/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar bind = __webpack_require__(2);\nvar isBuffer = __webpack_require__(12);\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar utils = __webpack_require__(0);\nvar normalizeHeaderName = __webpack_require__(15);\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(3);\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(3);\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzPzI4MjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IitDQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLFlBQVk7QUFDbkI7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcz8yNGZmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\nvar settle = __webpack_require__(16);\nvar buildURL = __webpack_require__(18);\nvar parseHeaders = __webpack_require__(19);\nvar isURLSameOrigin = __webpack_require__(20);\nvar createError = __webpack_require__(4);\nvar btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(21);\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    // For IE 8/9 CORS support\n    // Only supports POST and GET calls and doesn't returns the response headers.\n    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n    if (\"development\" !== 'test' &&\n        typeof window !== 'undefined' &&\n        window.XDomainRequest && !('withCredentials' in request) &&\n        !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n      request.onprogress = function handleProgress() {};\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request[loadEvent] = function handleLoad() {\n      if (!request || (request.readyState !== 4 && !xDomain)) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = __webpack_require__(22);\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(17);\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanM/MTZkMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcz9hNDFiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanM/NzU1MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(8);
__webpack_require__(32);
module.exports = __webpack_require__(33);


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(9);\n__webpack_require__(31);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2FwcC5qcz9iMTVmIl0sIm5hbWVzIjpbInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBLG1CQUFBQSxDQUFRLENBQVI7QUFDQSxtQkFBQUEsQ0FBUSxFQUFSIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL2Jvb3RzdHJhcCcpO1xyXG5yZXF1aXJlKCcuL2FuaW1hdGlvbicpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvYXBwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\r\n * We'll load the axios HTTP library which allows us to easily issue requests\r\n * to our Laravel back-end. This library automatically handles sending the\r\n * CSRF token as a header based on the value of the \"XSRF\" token cookie.\r\n */\n\nwindow.axios = __webpack_require__(10);\nwindow.mojs = __webpack_require__(30);\n\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n/**\r\n * Next we will register the CSRF Token as a common header with Axios so that\r\n * all outgoing HTTP requests automatically have it attached. This is just\r\n * a simple convenience so we don't have to attach every token manually.\r\n */\n\nvar token = document.head.querySelector('meta[name=\"csrf-token\"]');\n\nif (token) {\n  window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n} else {\n  console.error('CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token');\n}\n\n/**\r\n * Echo exposes an expressive API for subscribing to channels and listening\r\n * for events that are broadcast by Laravel. Echo and event broadcasting\r\n * allows your team to easily build robust real-time web applications.\r\n */\n\n// import Echo from 'laravel-echo'\n\n// window.Pusher = require('pusher-js');\n\n// window.Echo = new Echo({\n//     broadcaster: 'pusher',\n//     key: process.env.MIX_PUSHER_APP_KEY,\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n//     encrypted: true\n// });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2Jvb3RzdHJhcC5qcz81OTExIl0sIm5hbWVzIjpbIndpbmRvdyIsImF4aW9zIiwicmVxdWlyZSIsIm1vanMiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJ0b2tlbiIsImRvY3VtZW50IiwiaGVhZCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY29uc29sZSIsImVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBTUFBLE9BQU9DLEtBQVAsR0FBZSxtQkFBQUMsQ0FBUSxFQUFSLENBQWY7QUFDQUYsT0FBT0csSUFBUCxHQUFjLG1CQUFBRCxDQUFRLEVBQVIsQ0FBZDs7QUFFQUYsT0FBT0MsS0FBUCxDQUFhRyxRQUFiLENBQXNCQyxPQUF0QixDQUE4QkMsTUFBOUIsQ0FBcUMsa0JBQXJDLElBQTJELGdCQUEzRDs7QUFFQTs7Ozs7O0FBTUEsSUFBSUMsUUFBUUMsU0FBU0MsSUFBVCxDQUFjQyxhQUFkLENBQTRCLHlCQUE1QixDQUFaOztBQUVBLElBQUlILEtBQUosRUFBVztBQUNQUCxTQUFPQyxLQUFQLENBQWFHLFFBQWIsQ0FBc0JDLE9BQXRCLENBQThCQyxNQUE5QixDQUFxQyxjQUFyQyxJQUF1REMsTUFBTUksT0FBN0Q7QUFDSCxDQUZELE1BRU87QUFDSEMsVUFBUUMsS0FBUixDQUFjLHVFQUFkO0FBQ0g7O0FBRUQ7Ozs7OztBQU1BOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFdlJ2xsIGxvYWQgdGhlIGF4aW9zIEhUVFAgbGlicmFyeSB3aGljaCBhbGxvd3MgdXMgdG8gZWFzaWx5IGlzc3VlIHJlcXVlc3RzXHJcbiAqIHRvIG91ciBMYXJhdmVsIGJhY2stZW5kLiBUaGlzIGxpYnJhcnkgYXV0b21hdGljYWxseSBoYW5kbGVzIHNlbmRpbmcgdGhlXHJcbiAqIENTUkYgdG9rZW4gYXMgYSBoZWFkZXIgYmFzZWQgb24gdGhlIHZhbHVlIG9mIHRoZSBcIlhTUkZcIiB0b2tlbiBjb29raWUuXHJcbiAqL1xyXG5cclxud2luZG93LmF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcclxud2luZG93Lm1vanMgPSByZXF1aXJlKCdtby1qcycpO1xyXG5cclxud2luZG93LmF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLVJlcXVlc3RlZC1XaXRoJ10gPSAnWE1MSHR0cFJlcXVlc3QnO1xyXG5cclxuLyoqXHJcbiAqIE5leHQgd2Ugd2lsbCByZWdpc3RlciB0aGUgQ1NSRiBUb2tlbiBhcyBhIGNvbW1vbiBoZWFkZXIgd2l0aCBBeGlvcyBzbyB0aGF0XHJcbiAqIGFsbCBvdXRnb2luZyBIVFRQIHJlcXVlc3RzIGF1dG9tYXRpY2FsbHkgaGF2ZSBpdCBhdHRhY2hlZC4gVGhpcyBpcyBqdXN0XHJcbiAqIGEgc2ltcGxlIGNvbnZlbmllbmNlIHNvIHdlIGRvbid0IGhhdmUgdG8gYXR0YWNoIGV2ZXJ5IHRva2VuIG1hbnVhbGx5LlxyXG4gKi9cclxuXHJcbmxldCB0b2tlbiA9IGRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpO1xyXG5cclxuaWYgKHRva2VuKSB7XHJcbiAgICB3aW5kb3cuYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQ1NSRi1UT0tFTiddID0gdG9rZW4uY29udGVudDtcclxufSBlbHNlIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0NTUkYgdG9rZW4gbm90IGZvdW5kOiBodHRwczovL2xhcmF2ZWwuY29tL2RvY3MvY3NyZiNjc3JmLXgtY3NyZi10b2tlbicpO1xyXG59XHJcblxyXG4vKipcclxuICogRWNobyBleHBvc2VzIGFuIGV4cHJlc3NpdmUgQVBJIGZvciBzdWJzY3JpYmluZyB0byBjaGFubmVscyBhbmQgbGlzdGVuaW5nXHJcbiAqIGZvciBldmVudHMgdGhhdCBhcmUgYnJvYWRjYXN0IGJ5IExhcmF2ZWwuIEVjaG8gYW5kIGV2ZW50IGJyb2FkY2FzdGluZ1xyXG4gKiBhbGxvd3MgeW91ciB0ZWFtIHRvIGVhc2lseSBidWlsZCByb2J1c3QgcmVhbC10aW1lIHdlYiBhcHBsaWNhdGlvbnMuXHJcbiAqL1xyXG5cclxuLy8gaW1wb3J0IEVjaG8gZnJvbSAnbGFyYXZlbC1lY2hvJ1xyXG5cclxuLy8gd2luZG93LlB1c2hlciA9IHJlcXVpcmUoJ3B1c2hlci1qcycpO1xyXG5cclxuLy8gd2luZG93LkVjaG8gPSBuZXcgRWNobyh7XHJcbi8vICAgICBicm9hZGNhc3RlcjogJ3B1c2hlcicsXHJcbi8vICAgICBrZXk6IHByb2Nlc3MuZW52Lk1JWF9QVVNIRVJfQVBQX0tFWSxcclxuLy8gICAgIGNsdXN0ZXI6IHByb2Nlc3MuZW52Lk1JWF9QVVNIRVJfQVBQX0NMVVNURVIsXHJcbi8vICAgICBlbmNyeXB0ZWQ6IHRydWVcclxuLy8gfSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvYm9vdHN0cmFwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(11);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanM/OWFkNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\nvar bind = __webpack_require__(2);\nvar Axios = __webpack_require__(13);\nvar defaults = __webpack_require__(1);\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(6);\naxios.CancelToken = __webpack_require__(28);\naxios.isCancel = __webpack_require__(5);\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(29);\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzP2I0ODEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzPzQ1ZWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar defaults = __webpack_require__(1);\nvar utils = __webpack_require__(0);\nvar InterceptorManager = __webpack_require__(23);\nvar dispatchRequest = __webpack_require__(24);\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);\n  config.method = config.method.toLowerCase();\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanM/NWU2NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsa0NBQWtDLGNBQWM7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcz9lNTU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar createError = __webpack_require__(4);\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzP2RiNTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzP2I3Y2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanM/MGQwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzP2EwOTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixlQUFlOztBQUVoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzPzE4NzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error;\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n    // initialize result and counter\n    var block, charCode, idx = 0, map = chars;\n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1);\n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n  ) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnRvYS5qcz9iNjEyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGJ0b2EgcG9seWZpbGwgZm9yIElFPDEwIGNvdXJ0ZXN5IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZGNoYW1iZXJzL0Jhc2U2NC5qc1xuXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5mdW5jdGlvbiBFKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyJztcbn1cbkUucHJvdG90eXBlID0gbmV3IEVycm9yO1xuRS5wcm90b3R5cGUuY29kZSA9IDU7XG5FLnByb3RvdHlwZS5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG5cbmZ1bmN0aW9uIGJ0b2EoaW5wdXQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gIHZhciBvdXRwdXQgPSAnJztcbiAgZm9yIChcbiAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlclxuICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzO1xuICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAvLyAgIGNoYW5nZSB0aGUgbWFwcGluZyB0YWJsZSB0byBcIj1cIlxuICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICkge1xuICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaWR4ICs9IDMgLyA0KTtcbiAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICB0aHJvdyBuZXcgRSgpO1xuICAgIH1cbiAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcz9hNzU2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0M7QUFDeEMsT0FBTzs7QUFFUDtBQUNBLDBEQUEwRCx3QkFBd0I7QUFDbEY7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsNkJBQTZCLGFBQWEsRUFBRTtBQUM1QztBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzPzdlZTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\nvar transformData = __webpack_require__(25);\nvar isCancel = __webpack_require__(5);\nvar defaults = __webpack_require__(1);\nvar isAbsoluteURL = __webpack_require__(26);\nvar combineURLs = __webpack_require__(27);\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzP2M0YmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQix1Q0FBdUM7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(0);\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcz80Y2Q1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLE1BQU07QUFDakIsV0FBVyxlQUFlO0FBQzFCLGFBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcz83NDhjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanNcbi8vIG1vZHVsZSBpZCA9IDI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanM/YTkxNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(6);\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcz83MTZjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzP2E3MTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"mojs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"mojs\"] = factory();\n\telse\n\t\troot[\"mojs\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"build/\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(3);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _shapesMap = __webpack_require__(72);\n\n\tvar _shapesMap2 = _interopRequireDefault(_shapesMap);\n\n\tvar _shape = __webpack_require__(94);\n\n\tvar _shape2 = _interopRequireDefault(_shape);\n\n\tvar _shapeSwirl = __webpack_require__(117);\n\n\tvar _shapeSwirl2 = _interopRequireDefault(_shapeSwirl);\n\n\tvar _burst = __webpack_require__(118);\n\n\tvar _burst2 = _interopRequireDefault(_burst);\n\n\tvar _html = __webpack_require__(119);\n\n\tvar _html2 = _interopRequireDefault(_html);\n\n\tvar _stagger = __webpack_require__(127);\n\n\tvar _stagger2 = _interopRequireDefault(_stagger);\n\n\tvar _spriter = __webpack_require__(128);\n\n\tvar _spriter2 = _interopRequireDefault(_spriter);\n\n\tvar _motionPath = __webpack_require__(129);\n\n\tvar _motionPath2 = _interopRequireDefault(_motionPath);\n\n\tvar _tween = __webpack_require__(101);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _timeline = __webpack_require__(110);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _tweener = __webpack_require__(102);\n\n\tvar _tweener2 = _interopRequireDefault(_tweener);\n\n\tvar _tweenable = __webpack_require__(100);\n\n\tvar _tweenable2 = _interopRequireDefault(_tweenable);\n\n\tvar _thenable = __webpack_require__(99);\n\n\tvar _thenable2 = _interopRequireDefault(_thenable);\n\n\tvar _tunable = __webpack_require__(116);\n\n\tvar _tunable2 = _interopRequireDefault(_tunable);\n\n\tvar _delta = __webpack_require__(126);\n\n\tvar _delta2 = _interopRequireDefault(_delta);\n\n\tvar _deltas = __webpack_require__(125);\n\n\tvar _deltas2 = _interopRequireDefault(_deltas);\n\n\tvar _module = __webpack_require__(84);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tvar _easing = __webpack_require__(105);\n\n\tvar _easing2 = _interopRequireDefault(_easing);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar mojs = {\n\t  revision: '0.288.2', isDebug: true, helpers: _h2.default,\n\t  Shape: _shape2.default, ShapeSwirl: _shapeSwirl2.default, Burst: _burst2.default, Html: _html2.default, stagger: _stagger2.default, Spriter: _spriter2.default, MotionPath: _motionPath2.default,\n\t  Tween: _tween2.default, Timeline: _timeline2.default, Tweenable: _tweenable2.default, Thenable: _thenable2.default, Tunable: _tunable2.default, Module: _module2.default,\n\t  tweener: _tweener2.default, easing: _easing2.default, shapesMap: _shapesMap2.default, _pool: { Delta: _delta2.default, Deltas: _deltas2.default }\n\t};\n\n\t// functions alias\n\tmojs.h = mojs.helpers;\n\tmojs.delta = mojs.h.delta;\n\t// custom shape add function and class\n\tmojs.addShape = mojs.shapesMap.addShape;\n\tmojs.CustomShape = mojs.shapesMap.custom;\n\t// module alias\n\tmojs.Transit = mojs.Shape;\n\tmojs.Swirl = mojs.ShapeSwirl;\n\n\t// TODO:\n\t/*\n\t  H/V in paths\n\n\t  rand for direction\n\t  burst children angle after tune\n\t  burst pathScale after tune\n\t  swirl then issue\n\t  'rand' angle flick with `then`\n\t  not able to `play()` in `onComplete` callback\n\t  ---\n\t  module names\n\t  swirls in then chains for x/y\n\t  parse rand(stagger(20, 10), 20) values\n\t  percentage for radius\n\t*/\n\n\t// istanbul ignore next\n\tif (true) {\n\t  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    return mojs;\n\t  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t// istanbul ignore next\n\tif (( false ? 'undefined' : (0, _typeof3.default)(module)) === \"object\" && (0, _typeof3.default)(module.exports) === \"object\") {\n\t  module.exports = mojs;\n\t}\n\n\texports.default = mojs;\n\n\n\ttypeof window !== 'undefined' && (window.mojs = mojs);\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\tvar _iterator = __webpack_require__(4);\n\n\tvar _iterator2 = _interopRequireDefault(_iterator);\n\n\tvar _symbol = __webpack_require__(55);\n\n\tvar _symbol2 = _interopRequireDefault(_symbol);\n\n\tvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n\t  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n\t} : function (obj) {\n\t  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n\t};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(5), __esModule: true };\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(6);\n\t__webpack_require__(50);\n\tmodule.exports = __webpack_require__(54).f('iterator');\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar $at  = __webpack_require__(7)(true);\n\n\t// 21.1.3.27 String.prototype[@@iterator]()\n\t__webpack_require__(10)(String, 'String', function(iterated){\n\t  this._t = String(iterated); // target\n\t  this._i = 0;                // next index\n\t// 21.1.5.2.1 %StringIteratorPrototype%.next()\n\t}, function(){\n\t  var O     = this._t\n\t    , index = this._i\n\t    , point;\n\t  if(index >= O.length)return {value: undefined, done: true};\n\t  point = $at(O, index);\n\t  this._i += point.length;\n\t  return {value: point, done: false};\n\t});\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar toInteger = __webpack_require__(8)\n\t  , defined   = __webpack_require__(9);\n\t// true  -> String#at\n\t// false -> String#codePointAt\n\tmodule.exports = function(TO_STRING){\n\t  return function(that, pos){\n\t    var s = String(defined(that))\n\t      , i = toInteger(pos)\n\t      , l = s.length\n\t      , a, b;\n\t    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n\t    a = s.charCodeAt(i);\n\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n\t      ? TO_STRING ? s.charAt(i) : a\n\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n\t  };\n\t};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t// 7.1.4 ToInteger\n\tvar ceil  = Math.ceil\n\t  , floor = Math.floor;\n\tmodule.exports = function(it){\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n\t};\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n\t// 7.2.1 RequireObjectCoercible(argument)\n\tmodule.exports = function(it){\n\t  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n\t  return it;\n\t};\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar LIBRARY        = __webpack_require__(11)\n\t  , $export        = __webpack_require__(12)\n\t  , redefine       = __webpack_require__(27)\n\t  , hide           = __webpack_require__(17)\n\t  , has            = __webpack_require__(28)\n\t  , Iterators      = __webpack_require__(29)\n\t  , $iterCreate    = __webpack_require__(30)\n\t  , setToStringTag = __webpack_require__(46)\n\t  , getPrototypeOf = __webpack_require__(48)\n\t  , ITERATOR       = __webpack_require__(47)('iterator')\n\t  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n\t  , FF_ITERATOR    = '@@iterator'\n\t  , KEYS           = 'keys'\n\t  , VALUES         = 'values';\n\n\tvar returnThis = function(){ return this; };\n\n\tmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n\t  $iterCreate(Constructor, NAME, next);\n\t  var getMethod = function(kind){\n\t    if(!BUGGY && kind in proto)return proto[kind];\n\t    switch(kind){\n\t      case KEYS: return function keys(){ return new Constructor(this, kind); };\n\t      case VALUES: return function values(){ return new Constructor(this, kind); };\n\t    } return function entries(){ return new Constructor(this, kind); };\n\t  };\n\t  var TAG        = NAME + ' Iterator'\n\t    , DEF_VALUES = DEFAULT == VALUES\n\t    , VALUES_BUG = false\n\t    , proto      = Base.prototype\n\t    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n\t    , $default   = $native || getMethod(DEFAULT)\n\t    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n\t    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n\t    , methods, key, IteratorPrototype;\n\t  // Fix native\n\t  if($anyNative){\n\t    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n\t    if(IteratorPrototype !== Object.prototype){\n\t      // Set @@toStringTag to native iterators\n\t      setToStringTag(IteratorPrototype, TAG, true);\n\t      // fix for some old engines\n\t      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n\t    }\n\t  }\n\t  // fix Array#{values, @@iterator}.name in V8 / FF\n\t  if(DEF_VALUES && $native && $native.name !== VALUES){\n\t    VALUES_BUG = true;\n\t    $default = function values(){ return $native.call(this); };\n\t  }\n\t  // Define iterator\n\t  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n\t    hide(proto, ITERATOR, $default);\n\t  }\n\t  // Plug for library\n\t  Iterators[NAME] = $default;\n\t  Iterators[TAG]  = returnThis;\n\t  if(DEFAULT){\n\t    methods = {\n\t      values:  DEF_VALUES ? $default : getMethod(VALUES),\n\t      keys:    IS_SET     ? $default : getMethod(KEYS),\n\t      entries: $entries\n\t    };\n\t    if(FORCED)for(key in methods){\n\t      if(!(key in proto))redefine(proto, key, methods[key]);\n\t    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n\t  }\n\t  return methods;\n\t};\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = true;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar global    = __webpack_require__(13)\n\t  , core      = __webpack_require__(14)\n\t  , ctx       = __webpack_require__(15)\n\t  , hide      = __webpack_require__(17)\n\t  , PROTOTYPE = 'prototype';\n\n\tvar $export = function(type, name, source){\n\t  var IS_FORCED = type & $export.F\n\t    , IS_GLOBAL = type & $export.G\n\t    , IS_STATIC = type & $export.S\n\t    , IS_PROTO  = type & $export.P\n\t    , IS_BIND   = type & $export.B\n\t    , IS_WRAP   = type & $export.W\n\t    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n\t    , expProto  = exports[PROTOTYPE]\n\t    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n\t    , key, own, out;\n\t  if(IS_GLOBAL)source = name;\n\t  for(key in source){\n\t    // contains in native\n\t    own = !IS_FORCED && target && target[key] !== undefined;\n\t    if(own && key in exports)continue;\n\t    // export native or passed\n\t    out = own ? target[key] : source[key];\n\t    // prevent global pollution for namespaces\n\t    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n\t    // bind timers to global for call from export context\n\t    : IS_BIND && own ? ctx(out, global)\n\t    // wrap global constructors for prevent change them in library\n\t    : IS_WRAP && target[key] == out ? (function(C){\n\t      var F = function(a, b, c){\n\t        if(this instanceof C){\n\t          switch(arguments.length){\n\t            case 0: return new C;\n\t            case 1: return new C(a);\n\t            case 2: return new C(a, b);\n\t          } return new C(a, b, c);\n\t        } return C.apply(this, arguments);\n\t      };\n\t      F[PROTOTYPE] = C[PROTOTYPE];\n\t      return F;\n\t    // make static versions for prototype methods\n\t    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n\t    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n\t    if(IS_PROTO){\n\t      (exports.virtual || (exports.virtual = {}))[key] = out;\n\t      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n\t      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n\t    }\n\t  }\n\t};\n\t// type bitmap\n\t$export.F = 1;   // forced\n\t$export.G = 2;   // global\n\t$export.S = 4;   // static\n\t$export.P = 8;   // proto\n\t$export.B = 16;  // bind\n\t$export.W = 32;  // wrap\n\t$export.U = 64;  // safe\n\t$export.R = 128; // real proto method for `library` \n\tmodule.exports = $export;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\tif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\tvar core = module.exports = {version: '2.4.0'};\n\tif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// optional / simple context binding\n\tvar aFunction = __webpack_require__(16);\n\tmodule.exports = function(fn, that, length){\n\t  aFunction(fn);\n\t  if(that === undefined)return fn;\n\t  switch(length){\n\t    case 1: return function(a){\n\t      return fn.call(that, a);\n\t    };\n\t    case 2: return function(a, b){\n\t      return fn.call(that, a, b);\n\t    };\n\t    case 3: return function(a, b, c){\n\t      return fn.call(that, a, b, c);\n\t    };\n\t  }\n\t  return function(/* ...args */){\n\t    return fn.apply(that, arguments);\n\t  };\n\t};\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(it){\n\t  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n\t  return it;\n\t};\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar dP         = __webpack_require__(18)\n\t  , createDesc = __webpack_require__(26);\n\tmodule.exports = __webpack_require__(22) ? function(object, key, value){\n\t  return dP.f(object, key, createDesc(1, value));\n\t} : function(object, key, value){\n\t  object[key] = value;\n\t  return object;\n\t};\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar anObject       = __webpack_require__(19)\n\t  , IE8_DOM_DEFINE = __webpack_require__(21)\n\t  , toPrimitive    = __webpack_require__(25)\n\t  , dP             = Object.defineProperty;\n\n\texports.f = __webpack_require__(22) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n\t  anObject(O);\n\t  P = toPrimitive(P, true);\n\t  anObject(Attributes);\n\t  if(IE8_DOM_DEFINE)try {\n\t    return dP(O, P, Attributes);\n\t  } catch(e){ /* empty */ }\n\t  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n\t  if('value' in Attributes)O[P] = Attributes.value;\n\t  return O;\n\t};\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar isObject = __webpack_require__(20);\n\tmodule.exports = function(it){\n\t  if(!isObject(it))throw TypeError(it + ' is not an object!');\n\t  return it;\n\t};\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(it){\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n\t};\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = !__webpack_require__(22) && !__webpack_require__(23)(function(){\n\t  return Object.defineProperty(__webpack_require__(24)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n\t});\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// Thank's IE8 for his funny defineProperty\n\tmodule.exports = !__webpack_require__(23)(function(){\n\t  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n\t});\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(exec){\n\t  try {\n\t    return !!exec();\n\t  } catch(e){\n\t    return true;\n\t  }\n\t};\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar isObject = __webpack_require__(20)\n\t  , document = __webpack_require__(13).document\n\t  // in old IE typeof document.createElement is 'object'\n\t  , is = isObject(document) && isObject(document.createElement);\n\tmodule.exports = function(it){\n\t  return is ? document.createElement(it) : {};\n\t};\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 7.1.1 ToPrimitive(input [, PreferredType])\n\tvar isObject = __webpack_require__(20);\n\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n\t// and the second argument - flag - preferred type is a string\n\tmodule.exports = function(it, S){\n\t  if(!isObject(it))return it;\n\t  var fn, val;\n\t  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  throw TypeError(\"Can't convert object to primitive value\");\n\t};\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(bitmap, value){\n\t  return {\n\t    enumerable  : !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable    : !(bitmap & 4),\n\t    value       : value\n\t  };\n\t};\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(17);\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\n\tvar hasOwnProperty = {}.hasOwnProperty;\n\tmodule.exports = function(it, key){\n\t  return hasOwnProperty.call(it, key);\n\t};\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = {};\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar create         = __webpack_require__(31)\n\t  , descriptor     = __webpack_require__(26)\n\t  , setToStringTag = __webpack_require__(46)\n\t  , IteratorPrototype = {};\n\n\t// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n\t__webpack_require__(17)(IteratorPrototype, __webpack_require__(47)('iterator'), function(){ return this; });\n\n\tmodule.exports = function(Constructor, NAME, next){\n\t  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n\t  setToStringTag(Constructor, NAME + ' Iterator');\n\t};\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\tvar anObject    = __webpack_require__(19)\n\t  , dPs         = __webpack_require__(32)\n\t  , enumBugKeys = __webpack_require__(44)\n\t  , IE_PROTO    = __webpack_require__(41)('IE_PROTO')\n\t  , Empty       = function(){ /* empty */ }\n\t  , PROTOTYPE   = 'prototype';\n\n\t// Create object with fake `null` prototype: use iframe Object with cleared prototype\n\tvar createDict = function(){\n\t  // Thrash, waste and sodomy: IE GC bug\n\t  var iframe = __webpack_require__(24)('iframe')\n\t    , i      = enumBugKeys.length\n\t    , lt     = '<'\n\t    , gt     = '>'\n\t    , iframeDocument;\n\t  iframe.style.display = 'none';\n\t  __webpack_require__(45).appendChild(iframe);\n\t  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n\t  // createDict = iframe.contentWindow.Object;\n\t  // html.removeChild(iframe);\n\t  iframeDocument = iframe.contentWindow.document;\n\t  iframeDocument.open();\n\t  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n\t  iframeDocument.close();\n\t  createDict = iframeDocument.F;\n\t  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n\t  return createDict();\n\t};\n\n\tmodule.exports = Object.create || function create(O, Properties){\n\t  var result;\n\t  if(O !== null){\n\t    Empty[PROTOTYPE] = anObject(O);\n\t    result = new Empty;\n\t    Empty[PROTOTYPE] = null;\n\t    // add \"__proto__\" for Object.getPrototypeOf polyfill\n\t    result[IE_PROTO] = O;\n\t  } else result = createDict();\n\t  return Properties === undefined ? result : dPs(result, Properties);\n\t};\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar dP       = __webpack_require__(18)\n\t  , anObject = __webpack_require__(19)\n\t  , getKeys  = __webpack_require__(33);\n\n\tmodule.exports = __webpack_require__(22) ? Object.defineProperties : function defineProperties(O, Properties){\n\t  anObject(O);\n\t  var keys   = getKeys(Properties)\n\t    , length = keys.length\n\t    , i = 0\n\t    , P;\n\t  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n\t  return O;\n\t};\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\tvar $keys       = __webpack_require__(34)\n\t  , enumBugKeys = __webpack_require__(44);\n\n\tmodule.exports = Object.keys || function keys(O){\n\t  return $keys(O, enumBugKeys);\n\t};\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar has          = __webpack_require__(28)\n\t  , toIObject    = __webpack_require__(35)\n\t  , arrayIndexOf = __webpack_require__(38)(false)\n\t  , IE_PROTO     = __webpack_require__(41)('IE_PROTO');\n\n\tmodule.exports = function(object, names){\n\t  var O      = toIObject(object)\n\t    , i      = 0\n\t    , result = []\n\t    , key;\n\t  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n\t  // Don't enum bug & hidden keys\n\t  while(names.length > i)if(has(O, key = names[i++])){\n\t    ~arrayIndexOf(result, key) || result.push(key);\n\t  }\n\t  return result;\n\t};\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// to indexed object, toObject with fallback for non-array-like ES3 strings\n\tvar IObject = __webpack_require__(36)\n\t  , defined = __webpack_require__(9);\n\tmodule.exports = function(it){\n\t  return IObject(defined(it));\n\t};\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\tvar cof = __webpack_require__(37);\n\tmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n\t  return cof(it) == 'String' ? it.split('') : Object(it);\n\t};\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports) {\n\n\tvar toString = {}.toString;\n\n\tmodule.exports = function(it){\n\t  return toString.call(it).slice(8, -1);\n\t};\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// false -> Array#indexOf\n\t// true  -> Array#includes\n\tvar toIObject = __webpack_require__(35)\n\t  , toLength  = __webpack_require__(39)\n\t  , toIndex   = __webpack_require__(40);\n\tmodule.exports = function(IS_INCLUDES){\n\t  return function($this, el, fromIndex){\n\t    var O      = toIObject($this)\n\t      , length = toLength(O.length)\n\t      , index  = toIndex(fromIndex, length)\n\t      , value;\n\t    // Array#includes uses SameValueZero equality algorithm\n\t    if(IS_INCLUDES && el != el)while(length > index){\n\t      value = O[index++];\n\t      if(value != value)return true;\n\t    // Array#toIndex ignores holes, Array#includes - not\n\t    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n\t      if(O[index] === el)return IS_INCLUDES || index || 0;\n\t    } return !IS_INCLUDES && -1;\n\t  };\n\t};\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 7.1.15 ToLength\n\tvar toInteger = __webpack_require__(8)\n\t  , min       = Math.min;\n\tmodule.exports = function(it){\n\t  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n\t};\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar toInteger = __webpack_require__(8)\n\t  , max       = Math.max\n\t  , min       = Math.min;\n\tmodule.exports = function(index, length){\n\t  index = toInteger(index);\n\t  return index < 0 ? max(index + length, 0) : min(index, length);\n\t};\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar shared = __webpack_require__(42)('keys')\n\t  , uid    = __webpack_require__(43);\n\tmodule.exports = function(key){\n\t  return shared[key] || (shared[key] = uid(key));\n\t};\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar global = __webpack_require__(13)\n\t  , SHARED = '__core-js_shared__'\n\t  , store  = global[SHARED] || (global[SHARED] = {});\n\tmodule.exports = function(key){\n\t  return store[key] || (store[key] = {});\n\t};\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports) {\n\n\tvar id = 0\n\t  , px = Math.random();\n\tmodule.exports = function(key){\n\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n\t};\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports) {\n\n\t// IE 8- don't enum bug keys\n\tmodule.exports = (\n\t  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n\t).split(',');\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(13).document && document.documentElement;\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar def = __webpack_require__(18).f\n\t  , has = __webpack_require__(28)\n\t  , TAG = __webpack_require__(47)('toStringTag');\n\n\tmodule.exports = function(it, tag, stat){\n\t  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n\t};\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar store      = __webpack_require__(42)('wks')\n\t  , uid        = __webpack_require__(43)\n\t  , Symbol     = __webpack_require__(13).Symbol\n\t  , USE_SYMBOL = typeof Symbol == 'function';\n\n\tvar $exports = module.exports = function(name){\n\t  return store[name] || (store[name] =\n\t    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n\t};\n\n\t$exports.store = store;\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n\tvar has         = __webpack_require__(28)\n\t  , toObject    = __webpack_require__(49)\n\t  , IE_PROTO    = __webpack_require__(41)('IE_PROTO')\n\t  , ObjectProto = Object.prototype;\n\n\tmodule.exports = Object.getPrototypeOf || function(O){\n\t  O = toObject(O);\n\t  if(has(O, IE_PROTO))return O[IE_PROTO];\n\t  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n\t    return O.constructor.prototype;\n\t  } return O instanceof Object ? ObjectProto : null;\n\t};\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 7.1.13 ToObject(argument)\n\tvar defined = __webpack_require__(9);\n\tmodule.exports = function(it){\n\t  return Object(defined(it));\n\t};\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(51);\n\tvar global        = __webpack_require__(13)\n\t  , hide          = __webpack_require__(17)\n\t  , Iterators     = __webpack_require__(29)\n\t  , TO_STRING_TAG = __webpack_require__(47)('toStringTag');\n\n\tfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n\t  var NAME       = collections[i]\n\t    , Collection = global[NAME]\n\t    , proto      = Collection && Collection.prototype;\n\t  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n\t  Iterators[NAME] = Iterators.Array;\n\t}\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar addToUnscopables = __webpack_require__(52)\n\t  , step             = __webpack_require__(53)\n\t  , Iterators        = __webpack_require__(29)\n\t  , toIObject        = __webpack_require__(35);\n\n\t// 22.1.3.4 Array.prototype.entries()\n\t// 22.1.3.13 Array.prototype.keys()\n\t// 22.1.3.29 Array.prototype.values()\n\t// 22.1.3.30 Array.prototype[@@iterator]()\n\tmodule.exports = __webpack_require__(10)(Array, 'Array', function(iterated, kind){\n\t  this._t = toIObject(iterated); // target\n\t  this._i = 0;                   // next index\n\t  this._k = kind;                // kind\n\t// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n\t}, function(){\n\t  var O     = this._t\n\t    , kind  = this._k\n\t    , index = this._i++;\n\t  if(!O || index >= O.length){\n\t    this._t = undefined;\n\t    return step(1);\n\t  }\n\t  if(kind == 'keys'  )return step(0, index);\n\t  if(kind == 'values')return step(0, O[index]);\n\t  return step(0, [index, O[index]]);\n\t}, 'values');\n\n\t// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n\tIterators.Arguments = Iterators.Array;\n\n\taddToUnscopables('keys');\n\taddToUnscopables('values');\n\taddToUnscopables('entries');\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(){ /* empty */ };\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(done, value){\n\t  return {value: value, done: !!done};\n\t};\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\texports.f = __webpack_require__(47);\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(56), __esModule: true };\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(57);\n\t__webpack_require__(68);\n\t__webpack_require__(69);\n\t__webpack_require__(70);\n\tmodule.exports = __webpack_require__(14).Symbol;\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// ECMAScript 6 symbols shim\n\tvar global         = __webpack_require__(13)\n\t  , has            = __webpack_require__(28)\n\t  , DESCRIPTORS    = __webpack_require__(22)\n\t  , $export        = __webpack_require__(12)\n\t  , redefine       = __webpack_require__(27)\n\t  , META           = __webpack_require__(58).KEY\n\t  , $fails         = __webpack_require__(23)\n\t  , shared         = __webpack_require__(42)\n\t  , setToStringTag = __webpack_require__(46)\n\t  , uid            = __webpack_require__(43)\n\t  , wks            = __webpack_require__(47)\n\t  , wksExt         = __webpack_require__(54)\n\t  , wksDefine      = __webpack_require__(59)\n\t  , keyOf          = __webpack_require__(60)\n\t  , enumKeys       = __webpack_require__(61)\n\t  , isArray        = __webpack_require__(64)\n\t  , anObject       = __webpack_require__(19)\n\t  , toIObject      = __webpack_require__(35)\n\t  , toPrimitive    = __webpack_require__(25)\n\t  , createDesc     = __webpack_require__(26)\n\t  , _create        = __webpack_require__(31)\n\t  , gOPNExt        = __webpack_require__(65)\n\t  , $GOPD          = __webpack_require__(67)\n\t  , $DP            = __webpack_require__(18)\n\t  , $keys          = __webpack_require__(33)\n\t  , gOPD           = $GOPD.f\n\t  , dP             = $DP.f\n\t  , gOPN           = gOPNExt.f\n\t  , $Symbol        = global.Symbol\n\t  , $JSON          = global.JSON\n\t  , _stringify     = $JSON && $JSON.stringify\n\t  , PROTOTYPE      = 'prototype'\n\t  , HIDDEN         = wks('_hidden')\n\t  , TO_PRIMITIVE   = wks('toPrimitive')\n\t  , isEnum         = {}.propertyIsEnumerable\n\t  , SymbolRegistry = shared('symbol-registry')\n\t  , AllSymbols     = shared('symbols')\n\t  , OPSymbols      = shared('op-symbols')\n\t  , ObjectProto    = Object[PROTOTYPE]\n\t  , USE_NATIVE     = typeof $Symbol == 'function'\n\t  , QObject        = global.QObject;\n\t// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\n\tvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n\t// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\n\tvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n\t  return _create(dP({}, 'a', {\n\t    get: function(){ return dP(this, 'a', {value: 7}).a; }\n\t  })).a != 7;\n\t}) ? function(it, key, D){\n\t  var protoDesc = gOPD(ObjectProto, key);\n\t  if(protoDesc)delete ObjectProto[key];\n\t  dP(it, key, D);\n\t  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);\n\t} : dP;\n\n\tvar wrap = function(tag){\n\t  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n\t  sym._k = tag;\n\t  return sym;\n\t};\n\n\tvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n\t  return typeof it == 'symbol';\n\t} : function(it){\n\t  return it instanceof $Symbol;\n\t};\n\n\tvar $defineProperty = function defineProperty(it, key, D){\n\t  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);\n\t  anObject(it);\n\t  key = toPrimitive(key, true);\n\t  anObject(D);\n\t  if(has(AllSymbols, key)){\n\t    if(!D.enumerable){\n\t      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));\n\t      it[HIDDEN][key] = true;\n\t    } else {\n\t      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n\t      D = _create(D, {enumerable: createDesc(0, false)});\n\t    } return setSymbolDesc(it, key, D);\n\t  } return dP(it, key, D);\n\t};\n\tvar $defineProperties = function defineProperties(it, P){\n\t  anObject(it);\n\t  var keys = enumKeys(P = toIObject(P))\n\t    , i    = 0\n\t    , l = keys.length\n\t    , key;\n\t  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n\t  return it;\n\t};\n\tvar $create = function create(it, P){\n\t  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n\t};\n\tvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n\t  var E = isEnum.call(this, key = toPrimitive(key, true));\n\t  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;\n\t  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n\t};\n\tvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n\t  it  = toIObject(it);\n\t  key = toPrimitive(key, true);\n\t  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;\n\t  var D = gOPD(it, key);\n\t  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n\t  return D;\n\t};\n\tvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n\t  var names  = gOPN(toIObject(it))\n\t    , result = []\n\t    , i      = 0\n\t    , key;\n\t  while(names.length > i){\n\t    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n\t  } return result;\n\t};\n\tvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n\t  var IS_OP  = it === ObjectProto\n\t    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))\n\t    , result = []\n\t    , i      = 0\n\t    , key;\n\t  while(names.length > i){\n\t    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);\n\t  } return result;\n\t};\n\n\t// 19.4.1.1 Symbol([description])\n\tif(!USE_NATIVE){\n\t  $Symbol = function Symbol(){\n\t    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n\t    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n\t    var $set = function(value){\n\t      if(this === ObjectProto)$set.call(OPSymbols, value);\n\t      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n\t      setSymbolDesc(this, tag, createDesc(1, value));\n\t    };\n\t    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});\n\t    return wrap(tag);\n\t  };\n\t  redefine($Symbol[PROTOTYPE], 'toString', function toString(){\n\t    return this._k;\n\t  });\n\n\t  $GOPD.f = $getOwnPropertyDescriptor;\n\t  $DP.f   = $defineProperty;\n\t  __webpack_require__(66).f = gOPNExt.f = $getOwnPropertyNames;\n\t  __webpack_require__(63).f  = $propertyIsEnumerable;\n\t  __webpack_require__(62).f = $getOwnPropertySymbols;\n\n\t  if(DESCRIPTORS && !__webpack_require__(11)){\n\t    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n\t  }\n\n\t  wksExt.f = function(name){\n\t    return wrap(wks(name));\n\t  }\n\t}\n\n\t$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});\n\n\tfor(var symbols = (\n\t  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n\t  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n\t).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);\n\n\tfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);\n\n\t$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n\t  // 19.4.2.1 Symbol.for(key)\n\t  'for': function(key){\n\t    return has(SymbolRegistry, key += '')\n\t      ? SymbolRegistry[key]\n\t      : SymbolRegistry[key] = $Symbol(key);\n\t  },\n\t  // 19.4.2.5 Symbol.keyFor(sym)\n\t  keyFor: function keyFor(key){\n\t    if(isSymbol(key))return keyOf(SymbolRegistry, key);\n\t    throw TypeError(key + ' is not a symbol!');\n\t  },\n\t  useSetter: function(){ setter = true; },\n\t  useSimple: function(){ setter = false; }\n\t});\n\n\t$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n\t  // 19.1.2.2 Object.create(O [, Properties])\n\t  create: $create,\n\t  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n\t  defineProperty: $defineProperty,\n\t  // 19.1.2.3 Object.defineProperties(O, Properties)\n\t  defineProperties: $defineProperties,\n\t  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n\t  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n\t  // 19.1.2.7 Object.getOwnPropertyNames(O)\n\t  getOwnPropertyNames: $getOwnPropertyNames,\n\t  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n\t  getOwnPropertySymbols: $getOwnPropertySymbols\n\t});\n\n\t// 24.3.2 JSON.stringify(value [, replacer [, space]])\n\t$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){\n\t  var S = $Symbol();\n\t  // MS Edge converts symbol values to JSON as {}\n\t  // WebKit converts symbol values to JSON as null\n\t  // V8 throws on boxed symbols\n\t  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n\t})), 'JSON', {\n\t  stringify: function stringify(it){\n\t    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n\t    var args = [it]\n\t      , i    = 1\n\t      , replacer, $replacer;\n\t    while(arguments.length > i)args.push(arguments[i++]);\n\t    replacer = args[1];\n\t    if(typeof replacer == 'function')$replacer = replacer;\n\t    if($replacer || !isArray(replacer))replacer = function(key, value){\n\t      if($replacer)value = $replacer.call(this, key, value);\n\t      if(!isSymbol(value))return value;\n\t    };\n\t    args[1] = replacer;\n\t    return _stringify.apply($JSON, args);\n\t  }\n\t});\n\n\t// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n\t$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(17)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n\t// 19.4.3.5 Symbol.prototype[@@toStringTag]\n\tsetToStringTag($Symbol, 'Symbol');\n\t// 20.2.1.9 Math[@@toStringTag]\n\tsetToStringTag(Math, 'Math', true);\n\t// 24.3.3 JSON[@@toStringTag]\n\tsetToStringTag(global.JSON, 'JSON', true);\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar META     = __webpack_require__(43)('meta')\n\t  , isObject = __webpack_require__(20)\n\t  , has      = __webpack_require__(28)\n\t  , setDesc  = __webpack_require__(18).f\n\t  , id       = 0;\n\tvar isExtensible = Object.isExtensible || function(){\n\t  return true;\n\t};\n\tvar FREEZE = !__webpack_require__(23)(function(){\n\t  return isExtensible(Object.preventExtensions({}));\n\t});\n\tvar setMeta = function(it){\n\t  setDesc(it, META, {value: {\n\t    i: 'O' + ++id, // object ID\n\t    w: {}          // weak collections IDs\n\t  }});\n\t};\n\tvar fastKey = function(it, create){\n\t  // return primitive with prefix\n\t  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n\t  if(!has(it, META)){\n\t    // can't set metadata to uncaught frozen object\n\t    if(!isExtensible(it))return 'F';\n\t    // not necessary to add metadata\n\t    if(!create)return 'E';\n\t    // add missing metadata\n\t    setMeta(it);\n\t  // return object ID\n\t  } return it[META].i;\n\t};\n\tvar getWeak = function(it, create){\n\t  if(!has(it, META)){\n\t    // can't set metadata to uncaught frozen object\n\t    if(!isExtensible(it))return true;\n\t    // not necessary to add metadata\n\t    if(!create)return false;\n\t    // add missing metadata\n\t    setMeta(it);\n\t  // return hash weak collections IDs\n\t  } return it[META].w;\n\t};\n\t// add metadata on freeze-family methods calling\n\tvar onFreeze = function(it){\n\t  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);\n\t  return it;\n\t};\n\tvar meta = module.exports = {\n\t  KEY:      META,\n\t  NEED:     false,\n\t  fastKey:  fastKey,\n\t  getWeak:  getWeak,\n\t  onFreeze: onFreeze\n\t};\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar global         = __webpack_require__(13)\n\t  , core           = __webpack_require__(14)\n\t  , LIBRARY        = __webpack_require__(11)\n\t  , wksExt         = __webpack_require__(54)\n\t  , defineProperty = __webpack_require__(18).f;\n\tmodule.exports = function(name){\n\t  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n\t  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\n\t};\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar getKeys   = __webpack_require__(33)\n\t  , toIObject = __webpack_require__(35);\n\tmodule.exports = function(object, el){\n\t  var O      = toIObject(object)\n\t    , keys   = getKeys(O)\n\t    , length = keys.length\n\t    , index  = 0\n\t    , key;\n\t  while(length > index)if(O[key = keys[index++]] === el)return key;\n\t};\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// all enumerable object keys, includes symbols\n\tvar getKeys = __webpack_require__(33)\n\t  , gOPS    = __webpack_require__(62)\n\t  , pIE     = __webpack_require__(63);\n\tmodule.exports = function(it){\n\t  var result     = getKeys(it)\n\t    , getSymbols = gOPS.f;\n\t  if(getSymbols){\n\t    var symbols = getSymbols(it)\n\t      , isEnum  = pIE.f\n\t      , i       = 0\n\t      , key;\n\t    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n\t  } return result;\n\t};\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports) {\n\n\texports.f = Object.getOwnPropertySymbols;\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports) {\n\n\texports.f = {}.propertyIsEnumerable;\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 7.2.2 IsArray(argument)\n\tvar cof = __webpack_require__(37);\n\tmodule.exports = Array.isArray || function isArray(arg){\n\t  return cof(arg) == 'Array';\n\t};\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n\tvar toIObject = __webpack_require__(35)\n\t  , gOPN      = __webpack_require__(66).f\n\t  , toString  = {}.toString;\n\n\tvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n\t  ? Object.getOwnPropertyNames(window) : [];\n\n\tvar getWindowNames = function(it){\n\t  try {\n\t    return gOPN(it);\n\t  } catch(e){\n\t    return windowNames.slice();\n\t  }\n\t};\n\n\tmodule.exports.f = function getOwnPropertyNames(it){\n\t  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n\t};\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n\tvar $keys      = __webpack_require__(34)\n\t  , hiddenKeys = __webpack_require__(44).concat('length', 'prototype');\n\n\texports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\n\t  return $keys(O, hiddenKeys);\n\t};\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar pIE            = __webpack_require__(63)\n\t  , createDesc     = __webpack_require__(26)\n\t  , toIObject      = __webpack_require__(35)\n\t  , toPrimitive    = __webpack_require__(25)\n\t  , has            = __webpack_require__(28)\n\t  , IE8_DOM_DEFINE = __webpack_require__(21)\n\t  , gOPD           = Object.getOwnPropertyDescriptor;\n\n\texports.f = __webpack_require__(22) ? gOPD : function getOwnPropertyDescriptor(O, P){\n\t  O = toIObject(O);\n\t  P = toPrimitive(P, true);\n\t  if(IE8_DOM_DEFINE)try {\n\t    return gOPD(O, P);\n\t  } catch(e){ /* empty */ }\n\t  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n\t};\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports) {\n\n\t\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(59)('asyncIterator');\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(59)('observable');\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports) {\n\n\tvar Helpers, h;\n\n\tHelpers = (function() {\n\t  Helpers.prototype.NS = 'http://www.w3.org/2000/svg';\n\n\t  Helpers.prototype.logBadgeCss = 'background:#3A0839;color:#FF512F;border-radius:5px; padding: 1px 5px 2px; border: 1px solid #FF512F;';\n\n\t  Helpers.prototype.shortColors = {\n\t    transparent: 'rgba(0,0,0,0)',\n\t    none: 'rgba(0,0,0,0)',\n\t    aqua: 'rgb(0,255,255)',\n\t    black: 'rgb(0,0,0)',\n\t    blue: 'rgb(0,0,255)',\n\t    fuchsia: 'rgb(255,0,255)',\n\t    gray: 'rgb(128,128,128)',\n\t    green: 'rgb(0,128,0)',\n\t    lime: 'rgb(0,255,0)',\n\t    maroon: 'rgb(128,0,0)',\n\t    navy: 'rgb(0,0,128)',\n\t    olive: 'rgb(128,128,0)',\n\t    purple: 'rgb(128,0,128)',\n\t    red: 'rgb(255,0,0)',\n\t    silver: 'rgb(192,192,192)',\n\t    teal: 'rgb(0,128,128)',\n\t    white: 'rgb(255,255,255)',\n\t    yellow: 'rgb(255,255,0)',\n\t    orange: 'rgb(255,128,0)'\n\t  };\n\n\t  Helpers.prototype.chainOptionMap = {};\n\n\t  Helpers.prototype.callbacksMap = {\n\t    onRefresh: 1,\n\t    onStart: 1,\n\t    onComplete: 1,\n\t    onFirstUpdate: 1,\n\t    onUpdate: 1,\n\t    onProgress: 1,\n\t    onRepeatStart: 1,\n\t    onRepeatComplete: 1,\n\t    onPlaybackStart: 1,\n\t    onPlaybackPause: 1,\n\t    onPlaybackStop: 1,\n\t    onPlaybackComplete: 1\n\t  };\n\n\t  Helpers.prototype.tweenOptionMap = {\n\t    duration: 1,\n\t    delay: 1,\n\t    speed: 1,\n\t    repeat: 1,\n\t    easing: 1,\n\t    backwardEasing: 1,\n\t    isYoyo: 1,\n\t    shiftTime: 1,\n\t    isReversed: 1,\n\t    callbacksContext: 1\n\t  };\n\n\t  Helpers.prototype.unitOptionMap = {\n\t    left: 1,\n\t    top: 1,\n\t    x: 1,\n\t    y: 1,\n\t    rx: 1,\n\t    ry: 1\n\t  };\n\n\t  Helpers.prototype.RAD_TO_DEG = 180 / Math.PI;\n\n\t  function Helpers() {\n\t    this.vars();\n\t  }\n\n\t  Helpers.prototype.vars = function() {\n\t    var ua;\n\t    this.prefix = this.getPrefix();\n\t    this.getRemBase();\n\t    this.isFF = this.prefix.lowercase === 'moz';\n\t    this.isIE = this.prefix.lowercase === 'ms';\n\t    ua = navigator.userAgent;\n\t    this.isOldOpera = ua.match(/presto/gim);\n\t    this.isSafari = ua.indexOf('Safari') > -1;\n\t    this.isChrome = ua.indexOf('Chrome') > -1;\n\t    this.isOpera = ua.toLowerCase().indexOf(\"op\") > -1;\n\t    this.isChrome && this.isSafari && (this.isSafari = false);\n\t    (ua.match(/PhantomJS/gim)) && (this.isSafari = false);\n\t    this.isChrome && this.isOpera && (this.isChrome = false);\n\t    this.is3d = this.checkIf3d();\n\t    this.uniqIDs = -1;\n\t    this.div = document.createElement('div');\n\t    document.body.appendChild(this.div);\n\t    return this.defaultStyles = this.computedStyle(this.div);\n\t  };\n\n\t  Helpers.prototype.cloneObj = function(obj, exclude) {\n\t    var i, key, keys, newObj;\n\t    keys = Object.keys(obj);\n\t    newObj = {};\n\t    i = keys.length;\n\t    while (i--) {\n\t      key = keys[i];\n\t      if (exclude != null) {\n\t        if (!exclude[key]) {\n\t          newObj[key] = obj[key];\n\t        }\n\t      } else {\n\t        newObj[key] = obj[key];\n\t      }\n\t    }\n\t    return newObj;\n\t  };\n\n\t  Helpers.prototype.extend = function(objTo, objFrom) {\n\t    var key, value;\n\t    for (key in objFrom) {\n\t      value = objFrom[key];\n\t      if (objTo[key] == null) {\n\t        objTo[key] = objFrom[key];\n\t      }\n\t    }\n\t    return objTo;\n\t  };\n\n\t  Helpers.prototype.getRemBase = function() {\n\t    var html, style;\n\t    html = document.querySelector('html');\n\t    style = getComputedStyle(html);\n\t    return this.remBase = parseFloat(style.fontSize);\n\t  };\n\n\t  Helpers.prototype.clamp = function(value, min, max) {\n\t    if (value < min) {\n\t      return min;\n\t    } else if (value > max) {\n\t      return max;\n\t    } else {\n\t      return value;\n\t    }\n\t  };\n\n\t  Helpers.prototype.setPrefixedStyle = function(el, name, value) {\n\t    (name === 'transform') && (el.style[\"\" + this.prefix.css + name] = value);\n\t    return el.style[name] = value;\n\t  };\n\n\t  Helpers.prototype.style = function(el, name, value) {\n\t    var key, keys, len, results;\n\t    if (typeof name === 'object') {\n\t      keys = Object.keys(name);\n\t      len = keys.length;\n\t      results = [];\n\t      while (len--) {\n\t        key = keys[len];\n\t        value = name[key];\n\t        results.push(this.setPrefixedStyle(el, key, value));\n\t      }\n\t      return results;\n\t    } else {\n\t      return this.setPrefixedStyle(el, name, value);\n\t    }\n\t  };\n\n\t  Helpers.prototype.prepareForLog = function(args) {\n\t    args = Array.prototype.slice.apply(args);\n\t    args.unshift('::');\n\t    args.unshift(this.logBadgeCss);\n\t    args.unshift('%cmo·js%c');\n\t    return args;\n\t  };\n\n\t  Helpers.prototype.log = function() {\n\t    if (mojs.isDebug === false) {\n\t      return;\n\t    }\n\t    return console.log.apply(console, this.prepareForLog(arguments));\n\t  };\n\n\t  Helpers.prototype.warn = function() {\n\t    if (mojs.isDebug === false) {\n\t      return;\n\t    }\n\t    return console.warn.apply(console, this.prepareForLog(arguments));\n\t  };\n\n\t  Helpers.prototype.error = function() {\n\t    if (mojs.isDebug === false) {\n\t      return;\n\t    }\n\t    return console.error.apply(console, this.prepareForLog(arguments));\n\t  };\n\n\t  Helpers.prototype.parseUnit = function(value) {\n\t    var amount, isStrict, ref, regex, returnVal, unit;\n\t    if (typeof value === 'number') {\n\t      return returnVal = {\n\t        unit: 'px',\n\t        isStrict: false,\n\t        value: value,\n\t        string: value === 0 ? \"\" + value : value + \"px\"\n\t      };\n\t    } else if (typeof value === 'string') {\n\t      regex = /px|%|rem|em|ex|cm|ch|mm|in|pt|pc|vh|vw|vmin|deg/gim;\n\t      unit = (ref = value.match(regex)) != null ? ref[0] : void 0;\n\t      isStrict = true;\n\t      if (!unit) {\n\t        unit = 'px';\n\t        isStrict = false;\n\t      }\n\t      amount = parseFloat(value);\n\t      return returnVal = {\n\t        unit: unit,\n\t        isStrict: isStrict,\n\t        value: amount,\n\t        string: amount === 0 ? \"\" + amount : \"\" + amount + unit\n\t      };\n\t    }\n\t    return value;\n\t  };\n\n\t  Helpers.prototype.bind = function(func, context) {\n\t    var bindArgs, wrapper;\n\t    wrapper = function() {\n\t      var args, unshiftArgs;\n\t      args = Array.prototype.slice.call(arguments);\n\t      unshiftArgs = bindArgs.concat(args);\n\t      return func.apply(context, unshiftArgs);\n\t    };\n\t    bindArgs = Array.prototype.slice.call(arguments, 2);\n\t    return wrapper;\n\t  };\n\n\t  Helpers.prototype.getRadialPoint = function(o) {\n\t    var point, radAngle, radiusX, radiusY;\n\t    if (o == null) {\n\t      o = {};\n\t    }\n\t    radAngle = (o.angle - 90) * 0.017453292519943295;\n\t    radiusX = o.radiusX != null ? o.radiusX : o.radius;\n\t    radiusY = o.radiusY != null ? o.radiusY : o.radius;\n\t    return point = {\n\t      x: o.center.x + (Math.cos(radAngle) * radiusX),\n\t      y: o.center.y + (Math.sin(radAngle) * radiusY)\n\t    };\n\t  };\n\n\t  Helpers.prototype.getPrefix = function() {\n\t    var dom, pre, styles, v;\n\t    styles = window.getComputedStyle(document.documentElement, \"\");\n\t    v = Array.prototype.slice.call(styles).join(\"\").match(/-(moz|webkit|ms)-/);\n\t    pre = (v || (styles.OLink === \"\" && [\"\", \"o\"]))[1];\n\t    dom = \"WebKit|Moz|MS|O\".match(new RegExp(\"(\" + pre + \")\", \"i\"))[1];\n\t    return {\n\t      dom: dom,\n\t      lowercase: pre,\n\t      css: \"-\" + pre + \"-\",\n\t      js: pre[0].toUpperCase() + pre.substr(1)\n\t    };\n\t  };\n\n\t  Helpers.prototype.strToArr = function(string) {\n\t    var arr;\n\t    arr = [];\n\t    if (typeof string === 'number' && !isNaN(string)) {\n\t      arr.push(this.parseUnit(string));\n\t      return arr;\n\t    }\n\t    string.trim().split(/\\s+/gim).forEach((function(_this) {\n\t      return function(str) {\n\t        return arr.push(_this.parseUnit(_this.parseIfRand(str)));\n\t      };\n\t    })(this));\n\t    return arr;\n\t  };\n\n\t  Helpers.prototype.calcArrDelta = function(arr1, arr2) {\n\t    var delta, i, j, len1, num;\n\t    delta = [];\n\t    for (i = j = 0, len1 = arr1.length; j < len1; i = ++j) {\n\t      num = arr1[i];\n\t      delta[i] = this.parseUnit(\"\" + (arr2[i].value - arr1[i].value) + arr2[i].unit);\n\t    }\n\t    return delta;\n\t  };\n\n\t  Helpers.prototype.isArray = function(variable) {\n\t    return variable instanceof Array;\n\t  };\n\n\t  Helpers.prototype.normDashArrays = function(arr1, arr2) {\n\t    var arr1Len, arr2Len, currItem, i, j, k, lenDiff, ref, ref1, startI;\n\t    arr1Len = arr1.length;\n\t    arr2Len = arr2.length;\n\t    if (arr1Len > arr2Len) {\n\t      lenDiff = arr1Len - arr2Len;\n\t      startI = arr2.length;\n\t      for (i = j = 0, ref = lenDiff; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n\t        currItem = i + startI;\n\t        arr2.push(this.parseUnit(\"0\" + arr1[currItem].unit));\n\t      }\n\t    } else if (arr2Len > arr1Len) {\n\t      lenDiff = arr2Len - arr1Len;\n\t      startI = arr1.length;\n\t      for (i = k = 0, ref1 = lenDiff; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n\t        currItem = i + startI;\n\t        arr1.push(this.parseUnit(\"0\" + arr2[currItem].unit));\n\t      }\n\t    }\n\t    return [arr1, arr2];\n\t  };\n\n\t  Helpers.prototype.makeColorObj = function(color) {\n\t    var alpha, b, colorObj, g, isRgb, r, regexString1, regexString2, result, rgbColor;\n\t    if (color[0] === '#') {\n\t      result = /^#?([a-f\\d]{1,2})([a-f\\d]{1,2})([a-f\\d]{1,2})$/i.exec(color);\n\t      colorObj = {};\n\t      if (result) {\n\t        r = result[1].length === 2 ? result[1] : result[1] + result[1];\n\t        g = result[2].length === 2 ? result[2] : result[2] + result[2];\n\t        b = result[3].length === 2 ? result[3] : result[3] + result[3];\n\t        colorObj = {\n\t          r: parseInt(r, 16),\n\t          g: parseInt(g, 16),\n\t          b: parseInt(b, 16),\n\t          a: 1\n\t        };\n\t      }\n\t    }\n\t    if (color[0] !== '#') {\n\t      isRgb = color[0] === 'r' && color[1] === 'g' && color[2] === 'b';\n\t      if (isRgb) {\n\t        rgbColor = color;\n\t      }\n\t      if (!isRgb) {\n\t        rgbColor = !this.shortColors[color] ? (this.div.style.color = color, this.computedStyle(this.div).color) : this.shortColors[color];\n\t      }\n\t      regexString1 = '^rgba?\\\\((\\\\d{1,3}),\\\\s?(\\\\d{1,3}),';\n\t      regexString2 = '\\\\s?(\\\\d{1,3}),?\\\\s?(\\\\d{1}|0?\\\\.\\\\d{1,})?\\\\)$';\n\t      result = new RegExp(regexString1 + regexString2, 'gi').exec(rgbColor);\n\t      colorObj = {};\n\t      alpha = parseFloat(result[4] || 1);\n\t      if (result) {\n\t        colorObj = {\n\t          r: parseInt(result[1], 10),\n\t          g: parseInt(result[2], 10),\n\t          b: parseInt(result[3], 10),\n\t          a: (alpha != null) && !isNaN(alpha) ? alpha : 1\n\t        };\n\t      }\n\t    }\n\t    return colorObj;\n\t  };\n\n\t  Helpers.prototype.computedStyle = function(el) {\n\t    return getComputedStyle(el);\n\t  };\n\n\t  Helpers.prototype.capitalize = function(str) {\n\t    if (typeof str !== 'string') {\n\t      throw Error('String expected - nothing to capitalize');\n\t    }\n\t    return str.charAt(0).toUpperCase() + str.substring(1);\n\t  };\n\n\t  Helpers.prototype.parseRand = function(string) {\n\t    var rand, randArr, units;\n\t    randArr = string.split(/rand\\(|\\,|\\)/);\n\t    units = this.parseUnit(randArr[2]);\n\t    rand = this.rand(parseFloat(randArr[1]), parseFloat(randArr[2]));\n\t    if (units.unit && randArr[2].match(units.unit)) {\n\t      return rand + units.unit;\n\t    } else {\n\t      return rand;\n\t    }\n\t  };\n\n\t  Helpers.prototype.parseStagger = function(string, index) {\n\t    var base, number, splittedValue, unit, unitValue, value;\n\t    value = string.split(/stagger\\(|\\)$/)[1].toLowerCase();\n\t    splittedValue = value.split(/(rand\\(.*?\\)|[^\\(,\\s]+)(?=\\s*,|\\s*$)/gim);\n\t    value = splittedValue.length > 3 ? (base = this.parseUnit(this.parseIfRand(splittedValue[1])), splittedValue[3]) : (base = this.parseUnit(0), splittedValue[1]);\n\t    value = this.parseIfRand(value);\n\t    unitValue = this.parseUnit(value);\n\t    number = index * unitValue.value + base.value;\n\t    unit = base.isStrict ? base.unit : unitValue.isStrict ? unitValue.unit : '';\n\t    if (unit) {\n\t      return \"\" + number + unit;\n\t    } else {\n\t      return number;\n\t    }\n\t  };\n\n\t  Helpers.prototype.parseIfStagger = function(value, i) {\n\t    if (!(typeof value === 'string' && value.match(/stagger/g))) {\n\t      return value;\n\t    } else {\n\t      return this.parseStagger(value, i);\n\t    }\n\t  };\n\n\t  Helpers.prototype.parseIfRand = function(str) {\n\t    if (typeof str === 'string' && str.match(/rand\\(/)) {\n\t      return this.parseRand(str);\n\t    } else {\n\t      return str;\n\t    }\n\t  };\n\n\t  Helpers.prototype.parseDelta = function(key, value, index) {\n\t    var curve, delta, easing, end, endArr, endColorObj, i, j, len1, start, startArr, startColorObj;\n\t    value = this.cloneObj(value);\n\t    easing = value.easing;\n\t    if (easing != null) {\n\t      easing = mojs.easing.parseEasing(easing);\n\t    }\n\t    delete value.easing;\n\t    curve = value.curve;\n\t    if (curve != null) {\n\t      curve = mojs.easing.parseEasing(curve);\n\t    }\n\t    delete value.curve;\n\t    start = Object.keys(value)[0];\n\t    end = value[start];\n\t    delta = {\n\t      start: start\n\t    };\n\t    if (isNaN(parseFloat(start)) && !start.match(/rand\\(/) && !start.match(/stagger\\(/)) {\n\t      if (key === 'strokeLinecap') {\n\t        this.warn(\"Sorry, stroke-linecap property is not animatable yet, using the start(\" + start + \") value instead\", value);\n\t        return delta;\n\t      }\n\t      startColorObj = this.makeColorObj(start);\n\t      endColorObj = this.makeColorObj(end);\n\t      delta = {\n\t        type: 'color',\n\t        name: key,\n\t        start: startColorObj,\n\t        end: endColorObj,\n\t        easing: easing,\n\t        curve: curve,\n\t        delta: {\n\t          r: endColorObj.r - startColorObj.r,\n\t          g: endColorObj.g - startColorObj.g,\n\t          b: endColorObj.b - startColorObj.b,\n\t          a: endColorObj.a - startColorObj.a\n\t        }\n\t      };\n\t    } else if (key === 'strokeDasharray' || key === 'strokeDashoffset' || key === 'origin') {\n\t      startArr = this.strToArr(start);\n\t      endArr = this.strToArr(end);\n\t      this.normDashArrays(startArr, endArr);\n\t      for (i = j = 0, len1 = startArr.length; j < len1; i = ++j) {\n\t        start = startArr[i];\n\t        end = endArr[i];\n\t        this.mergeUnits(start, end, key);\n\t      }\n\t      delta = {\n\t        type: 'array',\n\t        name: key,\n\t        start: startArr,\n\t        end: endArr,\n\t        delta: this.calcArrDelta(startArr, endArr),\n\t        easing: easing,\n\t        curve: curve\n\t      };\n\t    } else {\n\t      if (!this.callbacksMap[key] && !this.tweenOptionMap[key]) {\n\t        if (this.unitOptionMap[key]) {\n\t          end = this.parseUnit(this.parseStringOption(end, index));\n\t          start = this.parseUnit(this.parseStringOption(start, index));\n\t          this.mergeUnits(start, end, key);\n\t          delta = {\n\t            type: 'unit',\n\t            name: key,\n\t            start: start,\n\t            end: end,\n\t            delta: end.value - start.value,\n\t            easing: easing,\n\t            curve: curve\n\t          };\n\t        } else {\n\t          end = parseFloat(this.parseStringOption(end, index));\n\t          start = parseFloat(this.parseStringOption(start, index));\n\t          delta = {\n\t            type: 'number',\n\t            name: key,\n\t            start: start,\n\t            end: end,\n\t            delta: end - start,\n\t            easing: easing,\n\t            curve: curve\n\t          };\n\t        }\n\t      }\n\t    }\n\t    return delta;\n\t  };\n\n\t  Helpers.prototype.mergeUnits = function(start, end, key) {\n\t    if (!end.isStrict && start.isStrict) {\n\t      end.unit = start.unit;\n\t      return end.string = \"\" + end.value + end.unit;\n\t    } else if (end.isStrict && !start.isStrict) {\n\t      start.unit = end.unit;\n\t      return start.string = \"\" + start.value + start.unit;\n\t    } else if (end.isStrict && start.isStrict) {\n\t      if (end.unit !== start.unit) {\n\t        start.unit = end.unit;\n\t        start.string = \"\" + start.value + start.unit;\n\t        return this.warn(\"Two different units were specified on \\\"\" + key + \"\\\" delta property, mo · js will fallback to end \\\"\" + end.unit + \"\\\" unit \");\n\t      }\n\t    }\n\t  };\n\n\t  Helpers.prototype.rand = function(min, max) {\n\t    return (Math.random() * (max - min)) + min;\n\t  };\n\n\t  Helpers.prototype.isDOM = function(o) {\n\t    var isNode;\n\t    if (o == null) {\n\t      return false;\n\t    }\n\t    isNode = typeof o.nodeType === 'number' && typeof o.nodeName === 'string';\n\t    return typeof o === 'object' && isNode;\n\t  };\n\n\t  Helpers.prototype.getChildElements = function(element) {\n\t    var childNodes, children, i;\n\t    childNodes = element.childNodes;\n\t    children = [];\n\t    i = childNodes.length;\n\t    while (i--) {\n\t      if (childNodes[i].nodeType === 1) {\n\t        children.unshift(childNodes[i]);\n\t      }\n\t    }\n\t    return children;\n\t  };\n\n\t  Helpers.prototype.delta = function(start, end) {\n\t    var isType1, isType2, obj, type1, type2;\n\t    type1 = typeof start;\n\t    type2 = typeof end;\n\t    isType1 = type1 === 'string' || type1 === 'number' && !isNaN(start);\n\t    isType2 = type2 === 'string' || type2 === 'number' && !isNaN(end);\n\t    if (!isType1 || !isType2) {\n\t      this.error(\"delta method expects Strings or Numbers at input but got - \" + start + \", \" + end);\n\t      return;\n\t    }\n\t    obj = {};\n\t    obj[start] = end;\n\t    return obj;\n\t  };\n\n\t  Helpers.prototype.getUniqID = function() {\n\t    return ++this.uniqIDs;\n\t  };\n\n\t  Helpers.prototype.parsePath = function(path) {\n\t    var domPath;\n\t    if (typeof path === 'string') {\n\t      if (path.charAt(0).toLowerCase() === 'm') {\n\t        domPath = document.createElementNS(this.NS, 'path');\n\t        domPath.setAttributeNS(null, 'd', path);\n\t        return domPath;\n\t      } else {\n\t        return document.querySelector(path);\n\t      }\n\t    }\n\t    if (path.style) {\n\t      return path;\n\t    }\n\t  };\n\n\t  Helpers.prototype.closeEnough = function(num1, num2, eps) {\n\t    return Math.abs(num1 - num2) < eps;\n\t  };\n\n\t  Helpers.prototype.checkIf3d = function() {\n\t    var div, prefixed, style, tr;\n\t    div = document.createElement('div');\n\t    this.style(div, 'transform', 'translateZ(0)');\n\t    style = div.style;\n\t    prefixed = this.prefix.css + \"transform\";\n\t    tr = style[prefixed] != null ? style[prefixed] : style.transform;\n\t    return tr !== '';\n\t  };\n\n\n\t  /*\n\t    Method to check if variable holds pointer to an object.\n\t    @param {Any} Variable to test\n\t    @returns {Boolean} If variable is object.\n\t   */\n\n\t  Helpers.prototype.isObject = function(variable) {\n\t    return variable !== null && typeof variable === 'object';\n\t  };\n\n\n\t  /*\n\t    Method to get first value of the object.\n\t    Used to get end value on ∆s.\n\t    @param {Object} Object to get the value of.\n\t    @returns {Any} The value of the first object' property.\n\t   */\n\n\t  Helpers.prototype.getDeltaEnd = function(obj) {\n\t    var key;\n\t    key = Object.keys(obj)[0];\n\t    return obj[key];\n\t  };\n\n\n\t  /*\n\t    Method to get first key of the object.\n\t    Used to get start value on ∆s.\n\t    @param {Object} Object to get the value of.\n\t    @returns {String} The key of the first object' property.\n\t   */\n\n\t  Helpers.prototype.getDeltaStart = function(obj) {\n\t    var key;\n\t    key = Object.keys(obj)[0];\n\t    return key;\n\t  };\n\n\n\t  /*\n\t    Method to check if propery exists in callbacksMap or tweenOptionMap.\n\t    @param {String} Property name to check for\n\t    @returns {Boolean} If property is tween property.\n\t   */\n\n\t  Helpers.prototype.isTweenProp = function(keyName) {\n\t    return this.tweenOptionMap[keyName] || this.callbacksMap[keyName];\n\t  };\n\n\n\t  /*\n\t    Method to parse string property value\n\t    which can include both `rand` and `stagger `\n\t    value in various positions.\n\t    @param {String} Property name to check for.\n\t    @param {Number} Optional index for stagger.\n\t    @returns {Number} Parsed option value.\n\t   */\n\n\t  Helpers.prototype.parseStringOption = function(value, index) {\n\t    if (index == null) {\n\t      index = 0;\n\t    }\n\t    if (typeof value === 'string') {\n\t      value = this.parseIfStagger(value, index);\n\t      value = this.parseIfRand(value);\n\t    }\n\t    return value;\n\t  };\n\n\n\t  /*\n\t    Method to get the last item of array.\n\t    @private\n\t    @param {Array} Array to get the last item in.\n\t    @returns {Any} The last item of array.\n\t   */\n\n\t  Helpers.prototype.getLastItem = function(arr) {\n\t    return arr[arr.length - 1];\n\t  };\n\n\n\t  /*\n\t    Method parse HTMLElement.\n\t    @private\n\t    @param {String, Object} Selector string or HTMLElement.\n\t    @returns {Object} HTMLElement.\n\t   */\n\n\t  Helpers.prototype.parseEl = function(el) {\n\t    if (h.isDOM(el)) {\n\t      return el;\n\t    } else if (typeof el === 'string') {\n\t      el = document.querySelector(el);\n\t    }\n\t    if (el === null) {\n\t      h.error(\"Can't parse HTML element: \", el);\n\t    }\n\t    return el;\n\t  };\n\n\n\t  /*\n\t    Method force compositor layer on HTMLElement.\n\t    @private\n\t    @param {Object} HTMLElement.\n\t    @returns {Object} HTMLElement.\n\t   */\n\n\t  Helpers.prototype.force3d = function(el) {\n\t    this.setPrefixedStyle(el, 'backface-visibility', 'hidden');\n\t    return el;\n\t  };\n\n\n\t  /*\n\t    Method to check if value is delta.\n\t    @private\n\t    @param {Any} Property to check.\n\t    @returns {Boolean} If value is delta.\n\t   */\n\n\t  Helpers.prototype.isDelta = function(optionsValue) {\n\t    var isObject;\n\t    isObject = this.isObject(optionsValue);\n\t    isObject = isObject && !optionsValue.unit;\n\t    return !(!isObject || this.isArray(optionsValue) || this.isDOM(optionsValue));\n\t  };\n\n\t  return Helpers;\n\n\t})();\n\n\th = new Helpers;\n\n\tmodule.exports = h;\n\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Bit, BitsMap, Circle, Cross, Curve, Custom, Equal, Line, Polygon, Rect, Zigzag, h;\n\n\tBit = __webpack_require__(73)[\"default\"] || __webpack_require__(73);\n\n\tCustom = __webpack_require__(85)[\"default\"] || __webpack_require__(85);\n\n\tCircle = __webpack_require__(86);\n\n\tLine = __webpack_require__(87);\n\n\tZigzag = __webpack_require__(88);\n\n\tRect = __webpack_require__(89);\n\n\tPolygon = __webpack_require__(90);\n\n\tCross = __webpack_require__(91);\n\n\tCurve = __webpack_require__(92)[\"default\"] || __webpack_require__(92);\n\n\tEqual = __webpack_require__(93);\n\n\th = __webpack_require__(71);\n\n\tBitsMap = (function() {\n\t  function BitsMap() {\n\t    this.addShape = h.bind(this.addShape, this);\n\t  }\n\n\t  BitsMap.prototype.bit = Bit;\n\n\t  BitsMap.prototype.custom = Custom;\n\n\t  BitsMap.prototype.circle = Circle;\n\n\t  BitsMap.prototype.line = Line;\n\n\t  BitsMap.prototype.zigzag = Zigzag;\n\n\t  BitsMap.prototype.rect = Rect;\n\n\t  BitsMap.prototype.polygon = Polygon;\n\n\t  BitsMap.prototype.cross = Cross;\n\n\t  BitsMap.prototype.equal = Equal;\n\n\t  BitsMap.prototype.curve = Curve;\n\n\t  BitsMap.prototype.getShape = function(name) {\n\t    return this[name] || h.error(\"no \\\"\" + name + \"\\\" shape available yet, please choose from this list:\", ['circle', 'line', 'zigzag', 'rect', 'polygon', 'cross', 'equal', 'curve']);\n\t  };\n\n\n\t  /*\n\t    Method to add shape to the map.\n\t    @public\n\t    @param {String} Name of the shape module.\n\t    @param {Object} Shape module class.\n\t   */\n\n\t  BitsMap.prototype.addShape = function(name, Module) {\n\t    return this[name] = Module;\n\t  };\n\n\t  return BitsMap;\n\n\t})();\n\n\tmodule.exports = new BitsMap;\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(3);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _module = __webpack_require__(84);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Bit = function (_Module) {\n\t  (0, _inherits3.default)(Bit, _Module);\n\n\t  function Bit() {\n\t    (0, _classCallCheck3.default)(this, Bit);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Module.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare module's defaults.\n\t    @private\n\t  */\n\t  Bit.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {\n\t      'ns': 'http://www.w3.org/2000/svg',\n\t      'tag': 'ellipse',\n\t      'parent': document.body,\n\t      'ratio': 1,\n\t      'radius': 50,\n\t      'radiusX': null,\n\t      'radiusY': null,\n\t      'stroke': 'hotpink',\n\t      'stroke-dasharray': '',\n\t      'stroke-dashoffset': '',\n\t      'stroke-linecap': '',\n\t      'stroke-width': 2,\n\t      'stroke-opacity': 1,\n\t      'fill': 'transparent',\n\t      'fill-opacity': 1,\n\t      'width': 0,\n\t      'height': 0\n\t    };\n\t    this._drawMap = ['stroke', 'stroke-width', 'stroke-opacity', 'stroke-dasharray', 'fill', 'stroke-dashoffset', 'stroke-linecap', 'fill-opacity', 'transform'];\n\t  };\n\n\t  Bit.prototype._vars = function _vars() {\n\t    this._state = {};\n\t    this._drawMapLength = this._drawMap.length;\n\t  };\n\t  /*\n\t    Method for initial render of the shape.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._render = function _render() {\n\t    if (this._isRendered) {\n\t      return;\n\t    }\n\t    // set `_isRendered` hatch\n\t    this._isRendered = true;\n\t    // create `SVG` canvas to draw in\n\t    this._createSVGCanvas();\n\t    // set canvas size\n\t    this._setCanvasSize();\n\t    // draw the initial state\n\t    // this._draw();\n\t    // append the canvas to the parent from props\n\t    this._props.parent.appendChild(this._canvas);\n\t  };\n\t  /*\n\t    Method to create `SVG` canvas to draw in.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._createSVGCanvas = function _createSVGCanvas() {\n\t    var p = this._props;\n\t    // create canvas - `svg` element to draw in\n\t    this._canvas = document.createElementNS(p.ns, 'svg');\n\t    // create the element shape element and add it to the canvas\n\t    this.el = document.createElementNS(p.ns, p.tag);\n\t    this._canvas.appendChild(this.el);\n\t  };\n\t  /*\n\t    Method to set size of the _canvas.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._setCanvasSize = function _setCanvasSize() {\n\t    var p = this._props,\n\t        style = this._canvas.style;\n\n\t    style.display = 'block';\n\t    style.width = '100%';\n\t    style.height = '100%';\n\t    style.left = '0px';\n\t    style.top = '0px';\n\t  };\n\t  /*\n\t    Method to draw the shape.\n\t    Called on every frame.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._draw = function _draw() {\n\t    this._props.length = this._getLength();\n\n\t    var state = this._state,\n\t        props = this._props;\n\n\t    var len = this._drawMapLength;\n\t    while (len--) {\n\t      var name = this._drawMap[len];\n\t      switch (name) {\n\t        case 'stroke-dasharray':\n\t        case 'stroke-dashoffset':\n\t          this.castStrokeDash(name);\n\t      }\n\t      this._setAttrIfChanged(name, this._props[name]);\n\t    }\n\t    this._state.radius = this._props.radius;\n\t  };\n\n\t  Bit.prototype.castStrokeDash = function castStrokeDash(name) {\n\t    // # if array of values\n\t    var p = this._props;\n\t    if (_h2.default.isArray(p[name])) {\n\t      var stroke = '';\n\t      for (var i = 0; i < p[name].length; i++) {\n\t        var dash = p[name][i],\n\t            cast = dash.unit === '%' ? this.castPercent(dash.value) : dash.value;\n\t        stroke += cast + ' ';\n\t      }\n\t      p[name] = stroke === '0 ' ? stroke = '' : stroke;\n\t      return p[name] = stroke;\n\t    }\n\t    // # if single value\n\t    if ((0, _typeof3.default)(p[name]) === 'object') {\n\t      stroke = p[name].unit === '%' ? this.castPercent(p[name].value) : p[name].value;\n\t      p[name] = stroke === 0 ? stroke = '' : stroke;\n\t    }\n\t  };\n\n\t  Bit.prototype.castPercent = function castPercent(percent) {\n\t    return percent * (this._props.length / 100);\n\t  };\n\n\t  /*\n\t    Method to set props to attributes and cache the values.\n\t    @private\n\t  */\n\n\n\t  Bit.prototype._setAttrIfChanged = function _setAttrIfChanged(name, value) {\n\t    if (this._state[name] !== value) {\n\t      // this.el.style[name] = value;\n\t      this.el.setAttribute(name, value);\n\t      this._state[name] = value;\n\t    }\n\t  };\n\t  /*\n\t    Method to length of the shape.\n\t    @private\n\t    @returns {Number} Length of the shape.\n\t  */\n\n\n\t  Bit.prototype._getLength = function _getLength() {\n\t    var p = this._props,\n\t        len = 0,\n\t        isGetLength = !!(this.el && this.el.getTotalLength);\n\n\t    if (isGetLength && this.el.getAttribute('d')) {\n\t      len = this.el.getTotalLength();\n\t    } else {\n\t      len = 2 * (p.radiusX != null ? p.radiusX : p.radius);\n\t    }\n\t    return len;\n\t  };\n\t  /*\n\t    Method to calculate total sum between points.\n\t    @private\n\t    @param {Array} Array of points.\n\t    @returns {Number} Distance bewtween all points.\n\t  */\n\n\n\t  Bit.prototype._getPointsPerimiter = function _getPointsPerimiter(points) {\n\t    var sum = 0;\n\n\t    for (var i = 1; i < points.length; i++) {\n\t      sum += this._pointsDelta(points[i - 1], points[i]);\n\t    }\n\n\t    sum += this._pointsDelta(points[0], _h2.default.getLastItem(points));\n\t    return sum;\n\t  };\n\t  /*\n\t    Method to get delta from two points.\n\t    @private\n\t    @param {Object} Point 1.\n\t    @param {Object} Point 2.\n\t    @returns {Number} Distance between the pooints.\n\t  */\n\n\n\t  Bit.prototype._pointsDelta = function _pointsDelta(point1, point2) {\n\t    var dx = Math.abs(point1.x - point2.x),\n\t        dy = Math.abs(point1.y - point2.y);\n\t    return Math.sqrt(dx * dx + dy * dy);\n\t  };\n\t  /*\n\t    Method to set module's size.\n\t    @private\n\t    @param {Number} Module width.\n\t    @param {Number} Module height.\n\t  */\n\n\n\t  Bit.prototype._setSize = function _setSize(width, height) {\n\t    var p = this._props;\n\t    p.width = width;\n\t    p.height = height;\n\t    this._draw();\n\t  };\n\n\t  return Bit;\n\t}(_module2.default);\n\n\texports.default = Bit;\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\texports.default = function (instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t};\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(3);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = function (self, call) {\n\t  if (!self) {\n\t    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t  }\n\n\t  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n\t};\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\tvar _setPrototypeOf = __webpack_require__(77);\n\n\tvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\n\tvar _create = __webpack_require__(81);\n\n\tvar _create2 = _interopRequireDefault(_create);\n\n\tvar _typeof2 = __webpack_require__(3);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = function (subClass, superClass) {\n\t  if (typeof superClass !== \"function\" && superClass !== null) {\n\t    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n\t  }\n\n\t  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n\t    constructor: {\n\t      value: subClass,\n\t      enumerable: false,\n\t      writable: true,\n\t      configurable: true\n\t    }\n\t  });\n\t  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n\t};\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(78), __esModule: true };\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(79);\n\tmodule.exports = __webpack_require__(14).Object.setPrototypeOf;\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 19.1.3.19 Object.setPrototypeOf(O, proto)\n\tvar $export = __webpack_require__(12);\n\t$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(80).set});\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// Works with __proto__ only. Old v8 can't work with null proto objects.\n\t/* eslint-disable no-proto */\n\tvar isObject = __webpack_require__(20)\n\t  , anObject = __webpack_require__(19);\n\tvar check = function(O, proto){\n\t  anObject(O);\n\t  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n\t};\n\tmodule.exports = {\n\t  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n\t    function(test, buggy, set){\n\t      try {\n\t        set = __webpack_require__(15)(Function.call, __webpack_require__(67).f(Object.prototype, '__proto__').set, 2);\n\t        set(test, []);\n\t        buggy = !(test instanceof Array);\n\t      } catch(e){ buggy = true; }\n\t      return function setPrototypeOf(O, proto){\n\t        check(O, proto);\n\t        if(buggy)O.__proto__ = proto;\n\t        else set(O, proto);\n\t        return O;\n\t      };\n\t    }({}, false) : undefined),\n\t  check: check\n\t};\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(82), __esModule: true };\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(83);\n\tvar $Object = __webpack_require__(14).Object;\n\tmodule.exports = function create(P, D){\n\t  return $Object.create(P, D);\n\t};\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar $export = __webpack_require__(12)\n\t// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\t$export($export.S, 'Object', {create: __webpack_require__(31)});\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(3);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  Base class for module. Extends and parses defaults.\n\t*/\n\tvar Module = function () {\n\t  function Module() {\n\t    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t    (0, _classCallCheck3.default)(this, Module);\n\n\t    // this._isIt = o.isIt;\n\t    // delete o.isIt;\n\t    this._o = o;\n\t    this._index = this._o.index || 0;\n\t    // map of props that should be\n\t    // parsed to arrays of values\n\t    this._arrayPropertyMap = {\n\t      strokeDashoffset: 1,\n\t      strokeDasharray: 1,\n\t      origin: 1\n\t    };\n\n\t    this._skipPropsDelta = {\n\t      timeline: 1,\n\t      prevChainModule: 1,\n\t      callbacksContext: 1\n\t    };\n\n\t    this._declareDefaults();\n\t    this._extendDefaults();\n\n\t    this._vars();\n\t    this._render();\n\t  }\n\t  /*\n\t    Method to declare defaults.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {};\n\t  };\n\t  /*\n\t    Method to declare module's variables.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._vars = function _vars() {\n\t    this._progress = 0;\n\t    this._strokeDasharrayBuffer = [];\n\t  };\n\t  /*\n\t    Method to render on initialization.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._render = function _render() {};\n\t  /*\n\t    Method to set property on the module.\n\t    @private\n\t    @param {String, Object} Name of the property to set\n\t                            or object with properties to set.\n\t    @param {Any} Value for the property to set. Could be\n\t                  undefined if the first param is object.\n\t  */\n\n\n\t  Module.prototype._setProp = function _setProp(attr, value) {\n\t    if ((typeof attr === 'undefined' ? 'undefined' : (0, _typeof3.default)(attr)) === 'object') {\n\t      for (var key in attr) {\n\t        this._assignProp(key, attr[key]);\n\t      }\n\t    } else {\n\t      this._assignProp(attr, value);\n\t    }\n\t  };\n\t  /*\n\t    Method to assign single property's value.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t  */\n\n\n\t  Module.prototype._assignProp = function _assignProp(key, value) {\n\t    this._props[key] = value;\n\t  };\n\t  /*\n\t    Method to show element.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._show = function _show() {\n\t    var p = this._props;\n\t    if (!this.el) {\n\t      return;\n\t    }\n\n\t    if (p.isSoftHide) {\n\t      // this.el.style.opacity = p.opacity;\n\t      this._showByTransform();\n\t    } else {\n\t      this.el.style.display = 'block';\n\t    }\n\n\t    this._isShown = true;\n\t  };\n\t  /*\n\t    Method to hide element.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._hide = function _hide() {\n\t    if (!this.el) {\n\t      return;\n\t    }\n\n\t    if (this._props.isSoftHide) {\n\t      // this.el.style.opacity = 0;\n\t      _h2.default.setPrefixedStyle(this.el, 'transform', 'scale(0)');\n\t    } else {\n\t      this.el.style.display = 'none';\n\t    }\n\n\t    this._isShown = false;\n\t  };\n\t  /*\n\t    Method to show element by applying transform back to normal.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._showByTransform = function _showByTransform() {};\n\t  /*\n\t    Method to parse option string.\n\t    Searches for stagger and rand values and parses them.\n\t    Leaves the value unattended otherwise.\n\t    @param {Any} Option value to parse.\n\t    @returns {Number} Parsed options value.\n\t  */\n\n\n\t  Module.prototype._parseOptionString = function _parseOptionString(value) {\n\t    if (typeof value === 'string') {\n\t      if (value.match(/stagger/)) {\n\t        value = _h2.default.parseStagger(value, this._index);\n\t      }\n\t    }\n\t    if (typeof value === 'string') {\n\t      if (value.match(/rand/)) {\n\t        value = _h2.default.parseRand(value);\n\t      }\n\t    }\n\t    return value;\n\t  };\n\t  /*\n\t    Method to parse postion option.\n\t    @param {String} Property name.\n\t    @param {Any} Property Value.\n\t    @returns {String} Parsed options value.\n\t  */\n\n\n\t  Module.prototype._parsePositionOption = function _parsePositionOption(key, value) {\n\t    if (_h2.default.unitOptionMap[key]) {\n\t      value = _h2.default.parseUnit(value).string;\n\t    }\n\t    return value;\n\t  };\n\t  /*\n\t    Method to parse strokeDash.. option.\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t    @returns {String} Parsed options value.\n\t  */\n\n\n\t  Module.prototype._parseStrokeDashOption = function _parseStrokeDashOption(key, value) {\n\t    var result = value;\n\t    // parse numeric/percent values for strokeDash.. properties\n\t    if (this._arrayPropertyMap[key]) {\n\t      var result = [];\n\t      switch (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) {\n\t        case 'number':\n\t          result.push(_h2.default.parseUnit(value));\n\t          break;\n\t        case 'string':\n\t          var array = value.split(' ');\n\t          for (var i = 0; i < array.length; i++) {\n\t            result.push(_h2.default.parseUnit(array[i]));\n\t          }\n\t          break;\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t  /*\n\t    Method to check if the property is delta property.\n\t    @private\n\t    @param {Any} Parameter value to check.\n\t    @returns {Boolean}\n\t  */\n\n\n\t  Module.prototype._isDelta = function _isDelta(optionsValue) {\n\t    var isObject = _h2.default.isObject(optionsValue);\n\t    isObject = isObject && !optionsValue.unit;\n\t    return !(!isObject || _h2.default.isArray(optionsValue) || _h2.default.isDOM(optionsValue));\n\t  };\n\t  /*\n\t    Method to get delta from property and set\n\t    the property's start value to the props object.\n\t    @private\n\t    @param {String} Key name to get delta for.\n\t    @param {Object} Option value to get the delta for.\n\t  */\n\n\n\t  Module.prototype._getDelta = function _getDelta(key, optionsValue) {\n\t    var delta;\n\t    if ((key === 'left' || key === 'top') && !this._o.ctx) {\n\t      _h2.default.warn('Consider to animate x/y properties instead of left/top,\\n        as it would be much more performant', optionsValue);\n\t    }\n\t    // skip delta calculation for a property if it is listed\n\t    // in skipPropsDelta object\n\t    if (this._skipPropsDelta && this._skipPropsDelta[key]) {\n\t      return;\n\t    }\n\t    // get delta\n\t    delta = _h2.default.parseDelta(key, optionsValue, this._index);\n\t    // if successfully parsed - save it\n\t    if (delta.type != null) {\n\t      this._deltas[key] = delta;\n\t    }\n\n\t    var deltaEnd = (0, _typeof3.default)(delta.end) === 'object' ? delta.end.value === 0 ? 0 : delta.end.string : delta.end;\n\t    // set props to end value of the delta\n\t    // 0 should be 0 regardless units\n\t    this._props[key] = deltaEnd;\n\t  };\n\t  /*\n\t    Method to copy `_o` options to `_props` object\n\t    with fallback to `_defaults`.\n\t    @private\n\t  */\n\n\n\t  Module.prototype._extendDefaults = function _extendDefaults() {\n\t    this._props = {};\n\t    this._deltas = {};\n\t    for (var key in this._defaults) {\n\t      // skip property if it is listed in _skipProps\n\t      // if (this._skipProps && this._skipProps[key]) { continue; }\n\t      // copy the properties to the _o object\n\t      var value = this._o[key] != null ? this._o[key] : this._defaults[key];\n\t      // parse option\n\t      this._parseOption(key, value);\n\t    }\n\t  };\n\t  /*\n\t    Method to tune new oprions to _o and _props object.\n\t    @private\n\t    @param {Object} Options object to tune to.\n\t  */\n\n\n\t  Module.prototype._tuneNewOptions = function _tuneNewOptions(o) {\n\t    // hide the module before tuning it's options\n\t    // cuz the user could see the change\n\t    this._hide();\n\t    for (var key in o) {\n\t      // skip property if it is listed in _skipProps\n\t      // if (this._skipProps && this._skipProps[key]) { continue; }\n\t      // copy the properties to the _o object\n\t      // delete the key from deltas\n\t      o && delete this._deltas[key];\n\t      // rewrite _o record\n\t      this._o[key] = o[key];\n\t      // save the options to _props\n\t      this._parseOption(key, o[key]);\n\t    }\n\t  };\n\t  /*\n\t    Method to parse option value.\n\t    @private\n\t    @param {String} Option name.\n\t    @param {Any} Option value.\n\t  */\n\n\n\t  Module.prototype._parseOption = function _parseOption(name, value) {\n\t    // if delta property\n\t    if (this._isDelta(value) && !this._skipPropsDelta[name]) {\n\t      this._getDelta(name, value);\n\t      var deltaEnd = _h2.default.getDeltaEnd(value);\n\t      return this._assignProp(name, this._parseProperty(name, deltaEnd));\n\t    }\n\n\t    this._assignProp(name, this._parseProperty(name, value));\n\t  };\n\t  /*\n\t    Method to parse postion and string props.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t    @returns {Any}  Parsed property value.\n\t  */\n\n\n\t  Module.prototype._parsePreArrayProperty = function _parsePreArrayProperty(name, value) {\n\t    // parse stagger and rand values\n\t    value = this._parseOptionString(value);\n\t    // parse units for position properties\n\t    return this._parsePositionOption(name, value);\n\t  };\n\t  /*\n\t    Method to parse property value.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t    @returns {Any}  Parsed property value.\n\t  */\n\n\n\t  Module.prototype._parseProperty = function _parseProperty(name, value) {\n\t    // parse `HTML` element in `parent` option\n\t    if (name === 'parent') {\n\t      return _h2.default.parseEl(value);\n\t    }\n\t    // parse `stagger`, `rand` and `position`\n\t    value = this._parsePreArrayProperty(name, value);\n\t    // parse numeric/percent values for strokeDash.. properties\n\t    return this._parseStrokeDashOption(name, value);\n\t  };\n\t  /*\n\t    Method to parse values inside ∆.\n\t    @private\n\t    @param {String} Key name.\n\t    @param {Object} Delta.\n\t    @returns {Object} Delta with parsed parameters.\n\t  */\n\n\n\t  Module.prototype._parseDeltaValues = function _parseDeltaValues(name, delta) {\n\t    // return h.parseDelta( name, delta, this._index );\n\n\t    var d = {};\n\t    for (var key in delta) {\n\t      var value = delta[key];\n\n\t      // delete delta[key];\n\t      // add parsed properties\n\t      var newEnd = this._parsePreArrayProperty(name, value);\n\t      d[this._parsePreArrayProperty(name, key)] = newEnd;\n\t    }\n\t    return d;\n\t  };\n\t  /*\n\t    Method to parse delta and nondelta properties.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Property value.\n\t    @returns {Any}  Parsed property value.\n\t  */\n\n\n\t  Module.prototype._preparsePropValue = function _preparsePropValue(key, value) {\n\t    return this._isDelta(value) ? this._parseDeltaValues(key, value) : this._parsePreArrayProperty(key, value);\n\t  };\n\t  /*\n\t    Method to calculate current progress of the deltas.\n\t    @private\n\t    @param {Number} Eased progress to calculate - [0..1].\n\t    @param {Number} Progress to calculate - [0..1].\n\t  */\n\n\n\t  Module.prototype._calcCurrentProps = function _calcCurrentProps(easedProgress, p) {\n\n\t    for (var key in this._deltas) {\n\n\t      var value = this._deltas[key];\n\n\t      // get eased progress from delta easing if defined and not curve\n\t      var isCurve = !!value.curve;\n\t      var ep = value.easing != null && !isCurve ? value.easing(p) : easedProgress;\n\n\t      if (value.type === 'array') {\n\t        var arr;\n\t        // if prop property is array - reuse it else - create an array\n\t        if (_h2.default.isArray(this._props[key])) {\n\t          arr = this._props[key];\n\t          arr.length = 0;\n\t        } else {\n\t          arr = [];\n\t        }\n\n\t        // just optimization to prevent curve\n\t        // calculations on every array item\n\t        var proc = isCurve ? value.curve(p) : null;\n\n\t        for (var i = 0; i < value.delta.length; i++) {\n\t          var item = value.delta[i],\n\t              dash = !isCurve ? value.start[i].value + ep * item.value : proc * (value.start[i].value + p * item.value);\n\t          arr.push({\n\t            string: '' + dash + item.unit,\n\t            value: dash,\n\t            unit: item.unit\n\t          });\n\t        }\n\n\t        this._props[key] = arr;\n\t      } else if (value.type === 'number') {\n\t        this._props[key] = !isCurve ? value.start + ep * value.delta : value.curve(p) * (value.start + p * value.delta);\n\t      } else if (value.type === 'unit') {\n\t        var currentValue = !isCurve ? value.start.value + ep * value.delta : value.curve(p) * (value.start.value + p * value.delta);\n\n\t        this._props[key] = '' + currentValue + value.end.unit;\n\t      } else if (value.type === 'color') {\n\t        var r, g, b, a;\n\t        if (!isCurve) {\n\t          r = parseInt(value.start.r + ep * value.delta.r, 10);\n\t          g = parseInt(value.start.g + ep * value.delta.g, 10);\n\t          b = parseInt(value.start.b + ep * value.delta.b, 10);\n\t          a = parseFloat(value.start.a + ep * value.delta.a);\n\t        } else {\n\t          var cp = value.curve(p);\n\t          r = parseInt(cp * (value.start.r + p * value.delta.r), 10);\n\t          g = parseInt(cp * (value.start.g + p * value.delta.g), 10);\n\t          b = parseInt(cp * (value.start.b + p * value.delta.b), 10);\n\t          a = parseFloat(cp * (value.start.a + p * value.delta.a));\n\t        }\n\t        this._props[key] = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to calculate current progress and probably draw it in children.\n\t    @private\n\t    @param {Number} Eased progress to set - [0..1].\n\t    @param {Number} Progress to set - [0..1].\n\t  */\n\n\n\t  Module.prototype._setProgress = function _setProgress(easedProgress, progress) {\n\t    this._progress = easedProgress;\n\t    this._calcCurrentProps(easedProgress, progress);\n\t  };\n\n\t  return Module;\n\t}();\n\n\texports.default = Module;\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _bit = __webpack_require__(73);\n\n\tvar _bit2 = _interopRequireDefault(_bit);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Custom = function (_Bit) {\n\t  (0, _inherits3.default)(Custom, _Bit);\n\n\t  function Custom() {\n\t    (0, _classCallCheck3.default)(this, Custom);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Bit.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare module's defaults.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\t  Custom.prototype._declareDefaults = function _declareDefaults() {\n\t    _Bit.prototype._declareDefaults.call(this);\n\n\t    this._defaults.tag = 'path';\n\t    this._defaults.parent = null;\n\n\t    // remove `stroke-width` from `_drawMap`\n\t    // because we need to recal strokeWidth size regarding scale\n\t    for (var i = 0; i < this._drawMap.length; i++) {\n\t      if (this._drawMap[i] === 'stroke-width') {\n\t        this._drawMap.splice(i, 1);\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to get shape to set on module's path.\n\t    @public\n\t    @returns {String} Empty string.\n\t  */\n\n\n\t  Custom.prototype.getShape = function getShape() {\n\t    return '';\n\t  };\n\t  /*\n\t    Method to get shape perimeter length.\n\t    @public\n\t    @returns {Number} Default length string.\n\t  */\n\n\n\t  Custom.prototype.getLength = function getLength() {\n\t    return 100;\n\t  };\n\t  /*\n\t    Method to draw the shape.\n\t    Called on every frame.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\n\n\t  Custom.prototype._draw = function _draw() {\n\t    var p = this._props,\n\t        state = this._state,\n\t        radiusXChange = state['radiusX'] !== p.radiusX,\n\t        radiusYChange = state['radiusY'] !== p.radiusY,\n\t        radiusChange = state['radius'] !== p.radius;\n\n\t    // update transform only if one of radiuses changed\n\t    if (radiusXChange || radiusYChange || radiusChange) {\n\t      this.el.setAttribute('transform', this._getScale());\n\t      state['radiusX'] = p.radiusX;\n\t      state['radiusY'] = p.radiusY;\n\t      state['radius'] = p.radius;\n\t    }\n\n\t    this._setAttrIfChanged('stroke-width', p['stroke-width'] / p.maxScale);\n\n\t    _Bit.prototype._draw.call(this);\n\t  };\n\t  /*\n\t    Method for initial render of the shape.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\n\n\t  Custom.prototype._render = function _render() {\n\t    if (this._isRendered) {\n\t      return;\n\t    }\n\t    this._isRendered = true;\n\n\t    this._length = this.getLength();\n\n\t    var p = this._props;\n\t    p.parent.innerHTML = '<svg id=\"js-mojs-shape-canvas\" xmlns=\"http://www.w3.org/2000/svg\" xlink=\"http://www.w3.org/1999/xlink\"><g id=\"js-mojs-shape-el\">' + this.getShape() + '</g></svg>';\n\n\t    this._canvas = p.parent.querySelector('#js-mojs-shape-canvas');\n\t    this.el = p.parent.querySelector('#js-mojs-shape-el');\n\t    this._setCanvasSize();\n\t  };\n\t  /*\n\t    Method to get scales for the shape.\n\t    @private\n\t    @mutates @props\n\t  */\n\n\n\t  Custom.prototype._getScale = function _getScale() {\n\t    var p = this._props,\n\t        radiusX = p.radiusX ? p.radiusX : p.radius,\n\t        radiusY = p.radiusY ? p.radiusY : p.radius;\n\n\t    p.scaleX = 2 * radiusX / 100;\n\t    p.scaleY = 2 * radiusY / 100;\n\t    p.maxScale = Math.max(p.scaleX, p.scaleY);\n\n\t    p.shiftX = p.width / 2 - 50 * p.scaleX;\n\t    p.shiftY = p.height / 2 - 50 * p.scaleY;\n\n\t    var translate = 'translate(' + p.shiftX + ', ' + p.shiftY + ')';\n\t    return translate + ' scale(' + p.scaleX + ', ' + p.scaleY + ')';\n\t  };\n\t  /*\n\t    Method to length of the shape.\n\t    @private\n\t    @returns {Number} Length of the shape.\n\t  */\n\n\n\t  Custom.prototype._getLength = function _getLength() {\n\t    return this._length;\n\t  };\n\n\t  return Custom;\n\t}(_bit2.default);\n\n\texports.default = Custom;\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Circle,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(73)[\"default\"] || __webpack_require__(73);\n\n\tCircle = (function(superClass) {\n\t  extend(Circle, superClass);\n\n\t  function Circle() {\n\t    return Circle.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Circle.prototype._declareDefaults = function() {\n\t    Circle.__super__._declareDefaults.apply(this, arguments);\n\t    return this._defaults.shape = 'ellipse';\n\t  };\n\n\t  Circle.prototype._draw = function() {\n\t    var rx, ry;\n\t    rx = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    ry = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    this._setAttrIfChanged('rx', rx);\n\t    this._setAttrIfChanged('ry', ry);\n\t    this._setAttrIfChanged('cx', this._props.width / 2);\n\t    this._setAttrIfChanged('cy', this._props.height / 2);\n\t    return Circle.__super__._draw.apply(this, arguments);\n\t  };\n\n\t  Circle.prototype._getLength = function() {\n\t    var radiusX, radiusY;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    return 2 * Math.PI * Math.sqrt((radiusX * radiusX + radiusY * radiusY) / 2);\n\t  };\n\n\t  return Circle;\n\n\t})(Bit);\n\n\tmodule.exports = Circle;\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Line,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(73)[\"default\"] || __webpack_require__(73);\n\n\tLine = (function(superClass) {\n\t  extend(Line, superClass);\n\n\t  function Line() {\n\t    return Line.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Line.prototype._declareDefaults = function() {\n\t    Line.__super__._declareDefaults.apply(this, arguments);\n\t    return this._defaults.tag = 'line';\n\t  };\n\n\t  Line.prototype._draw = function() {\n\t    var radiusX, x, y;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    x = this._props.width / 2;\n\t    y = this._props.height / 2;\n\t    this._setAttrIfChanged('x1', x - radiusX);\n\t    this._setAttrIfChanged('x2', x + radiusX);\n\t    this._setAttrIfChanged('y1', y);\n\t    this._setAttrIfChanged('y2', y);\n\t    return Line.__super__._draw.apply(this, arguments);\n\t  };\n\n\t  return Line;\n\n\t})(Bit);\n\n\tmodule.exports = Line;\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Zigzag,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(73)[\"default\"] || __webpack_require__(73);\n\n\tZigzag = (function(superClass) {\n\t  extend(Zigzag, superClass);\n\n\t  function Zigzag() {\n\t    return Zigzag.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Zigzag.prototype._declareDefaults = function() {\n\t    Zigzag.__super__._declareDefaults.apply(this, arguments);\n\t    this._defaults.tag = 'path';\n\t    return this._defaults.points = 3;\n\t  };\n\n\t  Zigzag.prototype._draw = function() {\n\t    var currentX, currentY, delta, i, isPoints, isRadiusX, isRadiusY, j, length, p, points, radiusX, radiusY, ref, stepX, x, y, yFlip;\n\t    Zigzag.__super__._draw.apply(this, arguments);\n\t    p = this._props;\n\t    if (!this._props.points) {\n\t      return;\n\t    }\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    isRadiusX = radiusX === this._prevRadiusX;\n\t    isRadiusY = radiusY === this._prevRadiusY;\n\t    isPoints = p.points === this._prevPoints;\n\t    if (isRadiusX && isRadiusY && isPoints) {\n\t      return;\n\t    }\n\t    x = p.width / 2;\n\t    y = p.height / 2;\n\t    currentX = x - radiusX;\n\t    currentY = y;\n\t    stepX = (2 * radiusX) / (p.points - 1);\n\t    yFlip = -1;\n\t    delta = Math.sqrt(stepX * stepX + radiusY * radiusY);\n\t    length = -delta;\n\t    points = \"M\" + currentX + \", \" + y + \" \";\n\t    for (i = j = 0, ref = p.points; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n\t      points += \"L\" + currentX + \", \" + currentY + \" \";\n\t      currentX += stepX;\n\t      length += delta;\n\t      currentY = yFlip === -1 ? y - radiusY : y;\n\t      yFlip = -yFlip;\n\t    }\n\t    this._length = length;\n\t    this.el.setAttribute('d', points);\n\t    this._prevPoints = p.points;\n\t    this._prevRadiusX = radiusX;\n\t    return this._prevRadiusY = radiusY;\n\t  };\n\n\t  Zigzag.prototype._getLength = function() {\n\t    return this._length;\n\t  };\n\n\t  return Zigzag;\n\n\t})(Bit);\n\n\tmodule.exports = Zigzag;\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Rect,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(73)[\"default\"] || __webpack_require__(73);\n\n\tRect = (function(superClass) {\n\t  extend(Rect, superClass);\n\n\t  function Rect() {\n\t    return Rect.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Rect.prototype._declareDefaults = function() {\n\t    Rect.__super__._declareDefaults.apply(this, arguments);\n\t    this._defaults.tag = 'rect';\n\t    this._defaults.rx = 0;\n\t    return this._defaults.ry = 0;\n\t  };\n\n\t  Rect.prototype._draw = function() {\n\t    var p, radiusX, radiusY;\n\t    Rect.__super__._draw.apply(this, arguments);\n\t    p = this._props;\n\t    radiusX = p.radiusX != null ? p.radiusX : p.radius;\n\t    radiusY = p.radiusY != null ? p.radiusY : p.radius;\n\t    this._setAttrIfChanged('width', 2 * radiusX);\n\t    this._setAttrIfChanged('height', 2 * radiusY);\n\t    this._setAttrIfChanged('x', (p.width / 2) - radiusX);\n\t    this._setAttrIfChanged('y', (p.height / 2) - radiusY);\n\t    this._setAttrIfChanged('rx', p.rx);\n\t    return this._setAttrIfChanged('ry', p.ry);\n\t  };\n\n\t  Rect.prototype._getLength = function() {\n\t    var radiusX, radiusY;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    return 2 * (2 * radiusX + 2 * radiusY);\n\t  };\n\n\t  return Rect;\n\n\t})(Bit);\n\n\tmodule.exports = Rect;\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Polygon, h,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(73)[\"default\"] || __webpack_require__(73);\n\n\th = __webpack_require__(71);\n\n\tPolygon = (function(superClass) {\n\t  extend(Polygon, superClass);\n\n\t  function Polygon() {\n\t    return Polygon.__super__.constructor.apply(this, arguments);\n\t  }\n\n\n\t  /*\n\t    Method to declare defaults.\n\t    @overrides @ Bit\n\t   */\n\n\t  Polygon.prototype._declareDefaults = function() {\n\t    Polygon.__super__._declareDefaults.apply(this, arguments);\n\t    this._defaults.tag = 'path';\n\t    return this._defaults.points = 3;\n\t  };\n\n\n\t  /*\n\t    Method to draw the shape.\n\t    @overrides @ Bit\n\t   */\n\n\t  Polygon.prototype._draw = function() {\n\t    var char, d, i, isPoints, isRadiusX, isRadiusY, j, k, len, p, point, radiusX, radiusY, ref, ref1, step;\n\t    p = this._props;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    isRadiusX = radiusX === this._prevRadiusX;\n\t    isRadiusY = radiusY === this._prevRadiusY;\n\t    isPoints = p.points === this._prevPoints;\n\t    if (!(isRadiusX && isRadiusY && isPoints)) {\n\t      step = 360 / this._props.points;\n\t      if (this._radialPoints == null) {\n\t        this._radialPoints = [];\n\t      } else {\n\t        this._radialPoints.length = 0;\n\t      }\n\t      for (i = j = 0, ref = this._props.points; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n\t        this._radialPoints.push(h.getRadialPoint({\n\t          radius: this._props.radius,\n\t          radiusX: this._props.radiusX,\n\t          radiusY: this._props.radiusY,\n\t          angle: i * step,\n\t          center: {\n\t            x: p.width / 2,\n\t            y: p.height / 2\n\t          }\n\t        }));\n\t      }\n\t      d = '';\n\t      ref1 = this._radialPoints;\n\t      for (i = k = 0, len = ref1.length; k < len; i = ++k) {\n\t        point = ref1[i];\n\t        char = i === 0 ? 'M' : 'L';\n\t        d += \"\" + char + (point.x.toFixed(4)) + \",\" + (point.y.toFixed(4)) + \" \";\n\t      }\n\t      this._prevPoints = p.points;\n\t      this._prevRadiusX = radiusX;\n\t      this._prevRadiusY = radiusY;\n\t      this.el.setAttribute('d', (d += 'z'));\n\t    }\n\t    return Polygon.__super__._draw.apply(this, arguments);\n\t  };\n\n\n\t  /*\n\t    Method to get length of the shape.\n\t    @overrides @ Bit\n\t   */\n\n\t  Polygon.prototype._getLength = function() {\n\t    return this._getPointsPerimiter(this._radialPoints);\n\t  };\n\n\t  return Polygon;\n\n\t})(Bit);\n\n\tmodule.exports = Polygon;\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Cross,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(73)[\"default\"] || __webpack_require__(73);\n\n\tCross = (function(superClass) {\n\t  extend(Cross, superClass);\n\n\t  function Cross() {\n\t    return Cross.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Cross.prototype._declareDefaults = function() {\n\t    Cross.__super__._declareDefaults.apply(this, arguments);\n\t    return this._defaults.tag = 'path';\n\t  };\n\n\t  Cross.prototype._draw = function() {\n\t    var d, isRadiusX, isRadiusY, line1, line2, p, radiusX, radiusY, x, x1, x2, y, y1, y2;\n\t    Cross.__super__._draw.apply(this, arguments);\n\t    p = this._props;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    isRadiusX = radiusX === this._prevRadiusX;\n\t    isRadiusY = radiusY === this._prevRadiusY;\n\t    if (isRadiusX && isRadiusY) {\n\t      return;\n\t    }\n\t    x = this._props.width / 2;\n\t    y = this._props.height / 2;\n\t    x1 = x - radiusX;\n\t    x2 = x + radiusX;\n\t    line1 = \"M\" + x1 + \",\" + y + \" L\" + x2 + \",\" + y;\n\t    y1 = y - radiusY;\n\t    y2 = y + radiusY;\n\t    line2 = \"M\" + x + \",\" + y1 + \" L\" + x + \",\" + y2;\n\t    d = line1 + \" \" + line2;\n\t    this.el.setAttribute('d', d);\n\t    this._prevRadiusX = radiusX;\n\t    return this._prevRadiusY = radiusY;\n\t  };\n\n\t  Cross.prototype._getLength = function() {\n\t    var radiusX, radiusY;\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    return 2 * (radiusX + radiusY);\n\t  };\n\n\t  return Cross;\n\n\t})(Bit);\n\n\tmodule.exports = Cross;\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _bit = __webpack_require__(73);\n\n\tvar _bit2 = _interopRequireDefault(_bit);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Curve = function (_Bit) {\n\t  (0, _inherits3.default)(Curve, _Bit);\n\n\t  function Curve() {\n\t    (0, _classCallCheck3.default)(this, Curve);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Bit.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare module's defaults.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\t  Curve.prototype._declareDefaults = function _declareDefaults() {\n\t    _Bit.prototype._declareDefaults.call(this);\n\t    this._defaults.tag = 'path';\n\t  };\n\t  /*\n\t    Method to draw the module.\n\t    @private\n\t    @overrides @ Bit\n\t  */\n\n\n\t  Curve.prototype._draw = function _draw() {\n\t    _Bit.prototype._draw.call(this);\n\t    var p = this._props;\n\n\t    var radiusX = p.radiusX != null ? p.radiusX : p.radius;\n\t    var radiusY = p.radiusY != null ? p.radiusY : p.radius;\n\n\t    var isRadiusX = radiusX === this._prevRadiusX;\n\t    var isRadiusY = radiusY === this._prevRadiusY;\n\t    var isPoints = p.points === this._prevPoints;\n\t    // skip if nothing changed\n\t    if (isRadiusX && isRadiusY && isPoints) {\n\t      return;\n\t    }\n\n\t    var x = p.width / 2;\n\t    var y = p.height / 2;\n\t    var x1 = x - radiusX;\n\t    var x2 = x + radiusX;\n\n\t    var d = 'M' + x1 + ' ' + y + ' Q ' + x + ' ' + (y - 2 * radiusY) + ' ' + x2 + ' ' + y;\n\n\t    // set the `d` attribute and save it to `_prevD`\n\t    this.el.setAttribute('d', d);\n\t    // save the properties\n\t    this._prevPoints = p.points;\n\t    this._prevRadiusX = radiusX;\n\t    this._prevRadiusY = radiusY;\n\t  };\n\n\t  Curve.prototype._getLength = function _getLength() {\n\t    var p = this._props;\n\n\t    var radiusX = p.radiusX != null ? p.radiusX : p.radius;\n\t    var radiusY = p.radiusY != null ? p.radiusY : p.radius;\n\n\t    var dRadius = radiusX + radiusY;\n\t    var sqrt = Math.sqrt((3 * radiusX + radiusY) * (radiusX + 3 * radiusY));\n\n\t    return .5 * Math.PI * (3 * dRadius - sqrt);\n\t  };\n\n\t  return Curve;\n\t}(_bit2.default); // istanbul ignore next\n\n\n\texports.default = Curve;\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* istanbul ignore next */\n\tvar Bit, Equal,\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty;\n\n\tBit = __webpack_require__(73)[\"default\"] || __webpack_require__(73);\n\n\tEqual = (function(superClass) {\n\t  extend(Equal, superClass);\n\n\t  function Equal() {\n\t    return Equal.__super__.constructor.apply(this, arguments);\n\t  }\n\n\t  Equal.prototype._declareDefaults = function() {\n\t    Equal.__super__._declareDefaults.apply(this, arguments);\n\t    this._defaults.tag = 'path';\n\t    return this._defaults.points = 2;\n\t  };\n\n\t  Equal.prototype._draw = function() {\n\t    var d, i, isPoints, isRadiusX, isRadiusY, j, p, radiusX, radiusY, ref, x, x1, x2, y, yStart, yStep;\n\t    Equal.__super__._draw.apply(this, arguments);\n\t    p = this._props;\n\t    if (!this._props.points) {\n\t      return;\n\t    }\n\t    radiusX = this._props.radiusX != null ? this._props.radiusX : this._props.radius;\n\t    radiusY = this._props.radiusY != null ? this._props.radiusY : this._props.radius;\n\t    isRadiusX = radiusX === this._prevRadiusX;\n\t    isRadiusY = radiusY === this._prevRadiusY;\n\t    isPoints = p.points === this._prevPoints;\n\t    if (isRadiusX && isRadiusY && isPoints) {\n\t      return;\n\t    }\n\t    x = this._props.width / 2;\n\t    y = this._props.height / 2;\n\t    x1 = x - radiusX;\n\t    x2 = x + radiusX;\n\t    d = '';\n\t    yStep = 2 * radiusY / (this._props.points - 1);\n\t    yStart = y - radiusY;\n\t    for (i = j = 0, ref = this._props.points; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n\t      y = \"\" + (i * yStep + yStart);\n\t      d += \"M\" + x1 + \", \" + y + \" L\" + x2 + \", \" + y + \" \";\n\t    }\n\t    this.el.setAttribute('d', d);\n\t    this._prevPoints = p.points;\n\t    this._prevRadiusX = radiusX;\n\t    return this._prevRadiusY = radiusY;\n\t  };\n\n\t  Equal.prototype._getLength = function() {\n\t    return 2 * (this._props.radiusX != null ? this._props.radiusX : this._props.radius);\n\t  };\n\n\t  return Equal;\n\n\t})(Bit);\n\n\tmodule.exports = Equal;\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _keys = __webpack_require__(95);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _module = __webpack_require__(84);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tvar _thenable = __webpack_require__(99);\n\n\tvar _thenable2 = _interopRequireDefault(_thenable);\n\n\tvar _tunable = __webpack_require__(116);\n\n\tvar _tunable2 = _interopRequireDefault(_tunable);\n\n\tvar _tweenable = __webpack_require__(100);\n\n\tvar _tweenable2 = _interopRequireDefault(_tweenable);\n\n\tvar _tween = __webpack_require__(101);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _timeline = __webpack_require__(110);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar h = __webpack_require__(71);\n\tvar Bit = __webpack_require__(73);\n\tvar shapesMap = __webpack_require__(72);\n\n\t// TODO\n\t//  - refactor\n\t//    - add setIfChanged to Module\n\t//  --\n\t//  - tween for every prop\n\n\tvar Shape = function (_Tunable) {\n\t  (0, _inherits3.default)(Shape, _Tunable);\n\n\t  function Shape() {\n\t    (0, _classCallCheck3.default)(this, Shape);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Tunable.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare module's defaults.\n\t    @private\n\t  */\n\t  Shape.prototype._declareDefaults = function _declareDefaults() {\n\t    // DEFAULTS / APIs\n\t    this._defaults = {\n\t      // where to append the module to [selector, HTMLElement]\n\t      parent: document.body,\n\t      // class name for the `el`\n\t      className: '',\n\t      // Possible values: [circle, line, zigzag, rect, polygon, cross, equal ]\n\t      shape: 'circle',\n\t      // ∆ :: Possible values: [color name, rgb, rgba, hex]\n\t      stroke: 'transparent',\n\t      // ∆ :: Possible values: [ 0..1 ]\n\t      strokeOpacity: 1,\n\t      // Possible values: ['butt' | 'round' | 'square']\n\t      strokeLinecap: '',\n\t      // ∆ :: Possible values: [ number ]\n\t      strokeWidth: 2,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      strokeDasharray: 0,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      strokeDashoffset: 0,\n\t      // ∆ :: Possible values: [color name, rgb, rgba, hex]\n\t      fill: 'deeppink',\n\t      // ∆ :: Possible values: [ 0..1 ]\n\t      fillOpacity: 1,\n\t      // {Boolean} - if should hide module with `opacity` instead of `display`\n\t      isSoftHide: true,\n\t      // {Boolean} - if should trigger composite layer for the `el`\n\t      isForce3d: false,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      left: '50%',\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      top: '50%',\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      x: 0,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      y: 0,\n\t      // ∆ :: Possible values: [ number ]\n\t      angle: 0,\n\t      // ∆ :: Possible values: [ number ]\n\t      scale: 1,\n\t      // ∆ :: Possible values: [ number ] Fallbacks to `scale`.\n\t      scaleX: null,\n\t      // ∆ :: Possible values: [ number ] Fallbacks to `scale`.\n\t      scaleY: null,\n\t      // ∆ :: Possible values: [ number, string ]\n\t      origin: '50% 50%',\n\t      // ∆ :: Possible values: [ 0..1 ]\n\t      opacity: 1,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      rx: 0,\n\t      // ∆ :: Units :: Possible values: [ number, string ]\n\t      ry: 0,\n\t      // ∆ :: Possible values: [ number ]\n\t      points: 3,\n\t      // ∆ :: Possible values: [ number ]\n\t      radius: 50,\n\t      // ∆ :: Possible values: [ number ]\n\t      radiusX: null,\n\t      // ∆ :: Possible values: [ number ]\n\t      radiusY: null,\n\t      // Possible values: [ boolean ]\n\t      isShowStart: false,\n\t      // Possible values: [ boolean ]\n\t      isShowEnd: true,\n\t      // Possible values: [ boolean ]\n\t      isRefreshState: true,\n\t      // Possible values: [ number > 0 ]\n\t      duration: 400,\n\t      // Possible values: [ number ]\n\n\t      /* technical ones: */\n\t      // explicit width of the module canvas\n\t      width: null,\n\t      // explicit height of the module canvas\n\t      height: null,\n\t      // Possible values: [ number ]\n\t      // sizeGap:          0,\n\t      /* [boolean] :: If should have child shape. */\n\t      isWithShape: true,\n\t      // context for all the callbacks\n\t      callbacksContext: this\n\t    };\n\t  };\n\t  /*\n\t    Method to start the animation with optional new options.\n\t    @public\n\t    @overrides @ Tunable\n\t    @param {Object} New options to set on the run.\n\t    @returns {Object} this.\n\t  */\n\n\n\t  Shape.prototype.tune = function tune(o) {\n\t    _Tunable.prototype.tune.call(this, o);\n\t    // update shapeModule's size to the max in `then` chain\n\t    this._getMaxSizeInChain();\n\t    return this;\n\t  };\n\t  /*\n\t    Method to create a then record for the module.\n\t    @public\n\t    @overrides @ Thenable\n\t    @param    {Object} Options for the next animation.\n\t    @returns  {Object} this.\n\t  */\n\n\n\t  Shape.prototype.then = function then(o) {\n\t    // this._makeTimeline()\n\t    _Tunable.prototype.then.call(this, o);\n\t    // update shapeModule's size to the max in `then` chain\n\t    this._getMaxSizeInChain();\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to declare variables.\n\t    @overrides Thenable\n\t  */\n\n\n\t  Shape.prototype._vars = function _vars() {\n\t    // call _vars method on Thenable\n\t    _Tunable.prototype._vars.call(this);\n\t    this._lastSet = {};\n\t    // save previous module in the chain\n\t    this._prevChainModule = this._o.prevChainModule;\n\t    // should draw on foreign svg canvas\n\t    this.isForeign = !!this._o.ctx;\n\t    // this._o.isTimelineLess = true;\n\t    // should take an svg element as self bit\n\t    return this.isForeignBit = !!this._o.shape;\n\t  };\n\t  /*\n\t    Method to initialize modules presentation.\n\t    @private\n\t    @overrides Module\n\t  */\n\n\n\t  Shape.prototype._render = function _render() {\n\t    if (!this._isRendered && !this._isChained) {\n\t      // create `mojs` shape element\n\t      this.el = document.createElement('div');\n\t      // set name on the `el`\n\t      this.el.setAttribute('data-name', 'mojs-shape');\n\t      // set class on the `el`\n\t      this.el.setAttribute('class', this._props.className);\n\t      // create shape module\n\t      this._createShape();\n\t      // append `el` to parent\n\t      this._props.parent.appendChild(this.el);\n\t      // set position styles on the el\n\t      this._setElStyles();\n\t      // set initial position for the first module in the chain\n\t      this._setProgress(0, 0);\n\t      // show at start if `isShowStart`\n\t      if (this._props.isShowStart) {\n\t        this._show();\n\t      } else {\n\t        this._hide();\n\t      }\n\t      // set `_isRendered` hatch\n\t      this._isRendered = true;\n\t    } else if (this._isChained) {\n\t      // save elements from master module\n\t      this.el = this._masterModule.el;\n\t      this.shapeModule = this._masterModule.shapeModule;\n\t    }\n\n\t    return this;\n\t  };\n\t  /*\n\t    Method to set el styles on initialization.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._setElStyles = function _setElStyles() {\n\t    if (!this.el) {\n\t      return;\n\t    }\n\t    // if (!this.isForeign) {\n\t    var p = this._props,\n\t        style = this.el.style,\n\t        width = p.shapeWidth,\n\t        height = p.shapeHeight;\n\n\t    style.position = 'absolute';\n\t    this._setElSizeStyles(width, height);\n\n\t    if (p.isForce3d) {\n\t      var name = 'backface-visibility';\n\t      style['' + name] = 'hidden';\n\t      style['' + h.prefix.css + name] = 'hidden';\n\t    }\n\t    // }\n\t  };\n\t  /*\n\t    Method to set `width`/`height`/`margins` to the `el` styles.\n\t    @param {Number} Width.\n\t    @param {height} Height.\n\t  */\n\n\n\t  Shape.prototype._setElSizeStyles = function _setElSizeStyles(width, height) {\n\t    var style = this.el.style;\n\t    style.width = width + 'px';\n\t    style.height = height + 'px';\n\t    style['margin-left'] = -width / 2 + 'px';\n\t    style['margin-top'] = -height / 2 + 'px';\n\t  };\n\t  /*\n\t    Method to draw shape.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._draw = function _draw() {\n\t    if (!this.shapeModule) {\n\t      return;\n\t    }\n\n\t    var p = this._props,\n\t        bP = this.shapeModule._props;\n\t    // set props on bit\n\t    // bP.x                    = this._origin.x;\n\t    // bP.y                    = this._origin.y;\n\t    bP.rx = p.rx;\n\t    bP.ry = p.ry;\n\t    bP.stroke = p.stroke;\n\t    bP['stroke-width'] = p.strokeWidth;\n\t    bP['stroke-opacity'] = p.strokeOpacity;\n\t    bP['stroke-dasharray'] = p.strokeDasharray;\n\t    bP['stroke-dashoffset'] = p.strokeDashoffset;\n\t    bP['stroke-linecap'] = p.strokeLinecap;\n\t    bP['fill'] = p.fill;\n\t    bP['fill-opacity'] = p.fillOpacity;\n\t    bP.radius = p.radius;\n\t    bP.radiusX = p.radiusX;\n\t    bP.radiusY = p.radiusY;\n\t    bP.points = p.points;\n\n\t    this.shapeModule._draw();\n\t    this._drawEl();\n\t  };\n\t  /*\n\t    Method to set current modules props to main div el.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._drawEl = function _drawEl() {\n\t    // return;\n\t    if (this.el == null) {\n\t      return true;\n\t    }\n\t    var p = this._props;\n\t    var style = this.el.style;\n\n\t    // style.opacity = p.opacity;\n\t    this._isPropChanged('opacity') && (style.opacity = p.opacity);\n\t    if (!this.isForeign) {\n\t      this._isPropChanged('left') && (style.left = p.left);\n\t      this._isPropChanged('top') && (style.top = p.top);\n\n\t      var isX = this._isPropChanged('x'),\n\t          isY = this._isPropChanged('y'),\n\t          isTranslate = isX || isY,\n\t          isScaleX = this._isPropChanged('scaleX'),\n\t          isScaleY = this._isPropChanged('scaleY'),\n\t          isScale = this._isPropChanged('scale'),\n\t          isScale = isScale || isScaleX || isScaleY,\n\t          isRotate = this._isPropChanged('angle');\n\n\t      if (isTranslate || isScale || isRotate) {\n\t        var transform = this._fillTransform();\n\t        style[h.prefix.css + 'transform'] = transform;\n\t        style['transform'] = transform;\n\t      }\n\n\t      if (this._isPropChanged('origin') || this._deltas['origin']) {\n\t        var origin = this._fillOrigin();\n\t        style[h.prefix.css + 'transform-origin'] = origin;\n\t        style['transform-origin'] = origin;\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to check if property changed after the latest check.\n\t    @private\n\t    @param {String} Name of the property to check.\n\t    @returns {Boolean}\n\t  */\n\n\n\t  Shape.prototype._isPropChanged = function _isPropChanged(name) {\n\t    // if there is no recod for the property - create it\n\t    if (this._lastSet[name] == null) {\n\t      this._lastSet[name] = {};\n\t    }\n\t    if (this._lastSet[name].value !== this._props[name]) {\n\t      this._lastSet[name].value = this._props[name];\n\t      return true;\n\t    } else {\n\t      return false;\n\t    }\n\t  };\n\t  /*\n\t    Method to tune new option on run.\n\t    @private\n\t    @override @ Module\n\t    @param {Object}  Option to tune on run.\n\t  */\n\n\n\t  Shape.prototype._tuneNewOptions = function _tuneNewOptions(o) {\n\t    // call super on Module\n\t    _Tunable.prototype._tuneNewOptions.call(this, o);\n\t    // return if empty object\n\t    if (!(o != null && (0, _keys2.default)(o).length)) {\n\t      return 1;\n\t    }\n\n\t    // this._calcSize();\n\t    this._setElStyles();\n\t  };\n\t  /*\n\t    Method to get max radiusX value.\n\t    @private\n\t    @param {String} Radius name.\n\t  */\n\n\n\t  Shape.prototype._getMaxRadius = function _getMaxRadius(name) {\n\t    var selfSize, selfSizeX;\n\t    selfSize = this._getRadiusSize('radius');\n\t    return this._getRadiusSize(name, selfSize);\n\t  };\n\t  /*\n\t    Method to increase calculated size based on easing.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._increaseSizeWithEasing = function _increaseSizeWithEasing() {\n\t    var p = this._props,\n\t        easing = this._o.easing,\n\t        isStringEasing = easing && typeof easing === 'string';\n\n\t    switch (isStringEasing && easing.toLowerCase()) {\n\t      case 'elastic.out':\n\t      case 'elastic.inout':\n\t        p.size *= 1.25;\n\t        break;\n\t      case 'back.out':\n\t      case 'back.inout':\n\t        p.size *= 1.1;\n\t    }\n\t  };\n\t  /*\n\t    Method to increase calculated size based on bit ratio.\n\t    @private\n\t  */\n\t  // _increaseSizeWithBitRatio () {\n\t  //   var p   = this._props;\n\t  //   // p.size *= this.shape._props.ratio;\n\t  //   p.size += 2 * p.sizeGap;\n\t  // }\n\t  /*\n\t    Method to get maximum radius size with optional fallback.\n\t    @private\n\t    @param {Object}\n\t      @param key {String} Name of the radius - [radius|radiusX|radiusY].\n\t      @param @optional fallback {Number}  Optional number to set if there\n\t                                          is no value for the key.\n\t  */\n\n\n\t  Shape.prototype._getRadiusSize = function _getRadiusSize(name) {\n\t    var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t    var delta = this._deltas[name];\n\t    // if value is delta value\n\t    if (delta != null) {\n\t      // get maximum number between start and end values of the delta\n\t      return Math.max(Math.abs(delta.end), Math.abs(delta.start));\n\t    } else if (this._props[name] != null) {\n\t      // else get the value from props object\n\t      return parseFloat(this._props[name]);\n\t    } else {\n\t      return fallback;\n\t    }\n\t  };\n\t  /*\n\t    Method to get max shape canvas size and save it to _props.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._getShapeSize = function _getShapeSize() {\n\t    var p = this._props,\n\n\t    // get maximum stroke value\n\t    stroke = this._getMaxStroke();\n\t    // save shape `width` and `height` to `_props`\n\t    p.shapeWidth = p.width != null ? p.width : 2 * this._getMaxRadius('radiusX') + stroke;\n\n\t    p.shapeHeight = p.height != null ? p.height : 2 * this._getMaxRadius('radiusY') + stroke;\n\t  };\n\t  /*\n\t    Method to create shape.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._createShape = function _createShape() {\n\t    // calculate max shape canvas size and set to _props\n\t    this._getShapeSize();\n\t    // don't create actual shape if !`isWithShape`\n\t    if (!this._props.isWithShape) {\n\t      return;\n\t    }\n\n\t    var p = this._props;\n\t    // get shape's class\n\t    var Shape = shapesMap.getShape(this._props.shape);\n\t    // create `_shape` module\n\t    this.shapeModule = new Shape({\n\t      width: p.shapeWidth,\n\t      height: p.shapeHeight,\n\t      parent: this.el\n\t    });\n\t  };\n\t  /*\n\t    Method to get max size in `then` chain\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._getMaxSizeInChain = function _getMaxSizeInChain() {\n\t    var p = this._props,\n\t        maxW = 0,\n\t        maxH = 0;\n\n\t    for (var i = 0; i < this._modules.length; i++) {\n\t      this._modules[i]._getShapeSize();\n\t      maxW = Math.max(maxW, this._modules[i]._props.shapeWidth);\n\t      maxH = Math.max(maxH, this._modules[i]._props.shapeHeight);\n\t    }\n\n\t    this.shapeModule && this.shapeModule._setSize(maxW, maxH);\n\t    this._setElSizeStyles(maxW, maxH);\n\t  };\n\t  /*\n\t    Method to get max value of the strokeWidth.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._getMaxStroke = function _getMaxStroke() {\n\t    var p = this._props;\n\t    var dStroke = this._deltas['strokeWidth'];\n\t    return dStroke != null ? Math.max(dStroke.start, dStroke.end) : p.strokeWidth;\n\t  };\n\t  /*\n\t    Method to draw current progress of the deltas.\n\t    @private\n\t    @override @ Module\n\t    @param   {Number}  EasedProgress to set - [0..1].\n\t    @param   {Number}  Progress to set - [0..1].\n\t  */\n\n\n\t  Shape.prototype._setProgress = function _setProgress(easedProgress, progress) {\n\t    // call the super on Module\n\t    _module2.default.prototype._setProgress.call(this, easedProgress, progress);\n\t    // draw current progress\n\t    this._draw(easedProgress);\n\t  };\n\t  /*\n\t    Method to add callback overrides to passed object.\n\t    @private\n\t    @param {Object} Object to add the overrides to.\n\t  */\n\n\n\t  Shape.prototype._applyCallbackOverrides = function _applyCallbackOverrides(obj) {\n\t    var it = this,\n\t        p = this._props;\n\t    // specify control functions for the module\n\t    obj.callbackOverrides = {\n\t      onUpdate: function onUpdate(ep, p) {\n\t        return it._setProgress(ep, p);\n\t      },\n\t      onStart: function onStart(isFwd) {\n\t        // don't touch main `el` onStart in chained elements\n\t        if (it._isChained) {\n\t          return;\n\t        };\n\t        if (isFwd) {\n\t          it._show();\n\t        } else {\n\t          if (!p.isShowStart) {\n\t            it._hide();\n\t          }\n\t        }\n\t      },\n\t      onComplete: function onComplete(isFwd) {\n\t        // don't touch main `el` if not the last in `then` chain\n\t        if (!it._isLastInChain()) {\n\t          return;\n\t        }\n\t        if (isFwd) {\n\t          if (!p.isShowEnd) {\n\t            it._hide();\n\t          }\n\t        } else {\n\t          it._show();\n\t        }\n\t      },\n\t      onRefresh: function onRefresh(isBefore) {\n\t        p.isRefreshState && isBefore && it._refreshBefore();\n\t      }\n\t    };\n\t  };\n\t  /*\n\t    Method to setup tween and timeline options before creating them.\n\t    @override @ Tweenable\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._transformTweenOptions = function _transformTweenOptions() {\n\t    this._applyCallbackOverrides(this._o);\n\t  };\n\t  /*\n\t    Method to create transform string.\n\t    @private\n\t    @returns {String} Transform string.\n\t  */\n\n\n\t  Shape.prototype._fillTransform = function _fillTransform() {\n\t    var p = this._props,\n\t        scaleX = p.scaleX != null ? p.scaleX : p.scale,\n\t        scaleY = p.scaleY != null ? p.scaleY : p.scale,\n\t        scale = scaleX + ', ' + scaleY;\n\t    return 'translate(' + p.x + ', ' + p.y + ') rotate(' + p.angle + 'deg) scale(' + scale + ')';\n\t  };\n\t  /*\n\t    Method to create transform-origin string.\n\t    @private\n\t    @returns {String} Transform string.\n\t  */\n\n\n\t  Shape.prototype._fillOrigin = function _fillOrigin() {\n\t    var p = this._props,\n\t        str = '';\n\t    for (var i = 0; i < p.origin.length; i++) {\n\t      str += p.origin[i].string + ' ';\n\t    }\n\t    return str;\n\t  };\n\t  /*\n\t    Method to refresh state befor startTime.\n\t    @private\n\t  */\n\n\n\t  Shape.prototype._refreshBefore = function _refreshBefore() {\n\t    // call setProgress with eased and normal progress\n\t    this._setProgress(this.tween._props.easing(0), 0);\n\n\t    if (this._props.isShowStart) {\n\t      this._show();\n\t    } else {\n\t      this._hide();\n\t    }\n\t  };\n\t  /*\n\t    Method that gets called on `soft` show of the module,\n\t    it should restore transform styles of the module.\n\t    @private\n\t    @overrides @ Module\n\t  */\n\n\n\t  Shape.prototype._showByTransform = function _showByTransform() {\n\t    // reset the cache of the scale prop\n\t    this._lastSet.scale = null;\n\t    // draw el accroding to it's props\n\t    this._drawEl();\n\t  };\n\n\t  return Shape;\n\t}(_tunable2.default);\n\n\texports.default = Shape;\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(96), __esModule: true };\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(97);\n\tmodule.exports = __webpack_require__(14).Object.keys;\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.14 Object.keys(O)\n\tvar toObject = __webpack_require__(49)\n\t  , $keys    = __webpack_require__(33);\n\n\t__webpack_require__(98)('keys', function(){\n\t  return function keys(it){\n\t    return $keys(toObject(it));\n\t  };\n\t});\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// most Object methods by ES6 should accept primitives\n\tvar $export = __webpack_require__(12)\n\t  , core    = __webpack_require__(14)\n\t  , fails   = __webpack_require__(23);\n\tmodule.exports = function(KEY, exec){\n\t  var fn  = (core.Object || {})[KEY] || Object[KEY]\n\t    , exp = {};\n\t  exp[KEY] = exec(fn);\n\t  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n\t};\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _keys = __webpack_require__(95);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _tweenable = __webpack_require__(100);\n\n\tvar _tweenable2 = _interopRequireDefault(_tweenable);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  The Thenable class adds .then public method and\n\t  the ability to chain API calls.\n\t*/\n\tvar Thenable = function (_Tweenable) {\n\t  (0, _inherits3.default)(Thenable, _Tweenable);\n\n\t  function Thenable() {\n\t    (0, _classCallCheck3.default)(this, Thenable);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Tweenable.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to create a then record for the module.\n\t    @public\n\t    @param    {Object} Options for the next animation.\n\t    @returns  {Object} this.\n\t  */\n\t  Thenable.prototype.then = function then(o) {\n\t    // return if nothing was passed\n\t    if (o == null || !(0, _keys2.default)(o).length) {\n\t      return 1;\n\t    }\n\t    // merge then options with the current ones\n\t    var prevRecord = this._history[this._history.length - 1],\n\t        prevModule = this._modules[this._modules.length - 1],\n\t        merged = this._mergeThenOptions(prevRecord, o);\n\n\t    this._resetMergedFlags(merged);\n\t    // create a submodule of the same type as the master module\n\t    var module = new this.constructor(merged);\n\t    // set `this` as amster module of child module\n\t    module._masterModule = this;\n\t    // save the modules to the _modules array\n\t    this._modules.push(module);\n\t    // add module's tween into master timeline\n\t    this.timeline.append(module);\n\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to reset some flags on merged options object.\n\t    @private\n\t    @param   {Object} Options object.\n\t    @returns {Object} Options object.\n\t  */\n\n\n\t  Thenable.prototype._resetMergedFlags = function _resetMergedFlags(obj) {\n\t    // set the submodule to be without timeline for perf reasons\n\t    obj.isTimelineLess = true;\n\t    // reset isShowStart flag for the submodules\n\t    obj.isShowStart = false;\n\t    // reset isRefreshState flag for the submodules\n\t    obj.isRefreshState = false;\n\t    // set the submodule callbacks context\n\t    obj.callbacksContext = this._props.callbacksContext || this;\n\t    // set previous module\n\t    obj.prevChainModule = _h2.default.getLastItem(this._modules);\n\t    // pass the `this` as master module\n\t    obj.masterModule = this;\n\t    return obj;\n\t  };\n\t  /*\n\t    Method to initialize properties.\n\t    @private\n\t  */\n\n\n\t  Thenable.prototype._vars = function _vars() {\n\t    _Tweenable.prototype._vars.call(this);\n\t    // save _master module\n\t    this._masterModule = this._o.masterModule;\n\t    // set isChained flag based on prevChainModule option\n\t    this._isChained = !!this._masterModule;\n\t    // we are expect that the _o object\n\t    // have been already extended by defaults\n\t    var initialRecord = _h2.default.cloneObj(this._props);\n\t    for (var key in this._arrayPropertyMap) {\n\t      if (this._o[key]) {\n\t        var preParsed = this._parsePreArrayProperty(key, this._o[key]);\n\t        initialRecord[key] = preParsed;\n\t      }\n\t    }\n\n\t    this._history = [initialRecord];\n\t    // the array holds all modules in the then chain\n\t    this._modules = [this];\n\t    // the props that to exclude from then merge\n\t    this._nonMergeProps = { shape: 1 };\n\t  };\n\t  /*\n\t    Method to merge two options into one. Used in .then chains.\n\t    @private\n\t    @param {Object} Start options for the merge.\n\t    @param {Object} End options for the merge.\n\t    @returns {Object} Merged options.\n\t  */\n\n\n\t  Thenable.prototype._mergeThenOptions = function _mergeThenOptions(start, end) {\n\t    var o = {};\n\t    this._mergeStartLoop(o, start);\n\t    this._mergeEndLoop(o, start, end);\n\t    this._history.push(o);\n\t    return o;\n\t  };\n\t  /*\n\t    Method to pipe startValue of the delta.\n\t    @private\n\t    @param {String} Start property name.\n\t    @param {Any} Start property value.\n\t    @returns {Any} Start property value.\n\t  */\n\n\n\t  Thenable.prototype._checkStartValue = function _checkStartValue(name, value) {\n\t    return value;\n\t  };\n\t  /*\n\t    Originally part of the _mergeThenOptions.\n\t    Loops thru start object and copies all the props from it.\n\t    @param {Object} An object to copy in.\n\t    @parma {Object} Start options object.\n\t  */\n\n\n\t  Thenable.prototype._mergeStartLoop = function _mergeStartLoop(o, start) {\n\t    // loop thru start options object\n\t    for (var key in start) {\n\t      var value = start[key];\n\t      if (start[key] == null) {\n\t        continue;\n\t      };\n\t      // copy all values from start if not tween prop or duration\n\t      if (!_h2.default.isTweenProp(key) || key === 'duration') {\n\t        // if delta - copy only the end value\n\t        if (this._isDelta(value)) {\n\t          o[key] = _h2.default.getDeltaEnd(value);\n\t        } else {\n\t          o[key] = value;\n\t        }\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Originally part of the _mergeThenOptions.\n\t    Loops thru start object and merges all the props from it.\n\t    @param {Object} An object to copy in.\n\t    @parma {Object} Start options object.\n\t    @parma {Object} End options object.\n\t  */\n\n\n\t  Thenable.prototype._mergeEndLoop = function _mergeEndLoop(o, start, end) {\n\t    var endKeys = (0, _keys2.default)(end);\n\n\t    for (var key in end) {\n\t      // just copy parent option\n\t      if (key == 'parent') {\n\t        o[key] = end[key];continue;\n\t      };\n\n\t      // get key/value of the end object\n\t      // endKey - name of the property, endValue - value of the property\n\t      var endValue = end[key],\n\t          startValue = start[key] != null ? start[key] : this._defaults[key];\n\n\t      startValue = this._checkStartValue(key, startValue);\n\t      if (endValue == null) {\n\t        continue;\n\t      };\n\t      // make ∆ of start -> end\n\t      // if key name is radiusX/radiusY and\n\t      // the startValue is not set fallback to radius value\n\t      var isSubRadius = key === 'radiusX' || key === 'radiusY';\n\t      if (isSubRadius && startValue == null) {\n\t        startValue = start.radius;\n\t      }\n\n\t      var isSubRadius = key === 'scaleX' || key === 'scaleY';\n\t      if (isSubRadius && startValue == null) {\n\t        startValue = start.scale;\n\t      }\n\n\t      o[key] = this._mergeThenProperty(key, startValue, endValue);\n\t    }\n\t  };\n\t  /*\n\t    Method to merge `start` and `end` for a property in then record.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Start value of the property.\n\t    @param {Any}    End value of the property.\n\t  */\n\n\n\t  Thenable.prototype._mergeThenProperty = function _mergeThenProperty(key, startValue, endValue) {\n\t    // if isnt tween property\n\t    var isBoolean = typeof endValue === 'boolean',\n\t        curve,\n\t        easing;\n\n\t    if (!_h2.default.isTweenProp(key) && !this._nonMergeProps[key] && !isBoolean) {\n\n\t      if (_h2.default.isObject(endValue) && endValue.to != null) {\n\t        curve = endValue.curve;\n\t        easing = endValue.easing;\n\t        endValue = endValue.to;\n\t      }\n\n\t      // if end value is delta - just save it\n\t      if (this._isDelta(endValue)) {\n\t        return this._parseDeltaValues(key, endValue);\n\t      } else {\n\t        var parsedEndValue = this._parsePreArrayProperty(key, endValue);\n\t        // if end value is not delta - merge with start value\n\t        if (this._isDelta(startValue)) {\n\t          var _ref;\n\n\t          // if start value is delta - take the end value\n\t          // as start value of the new delta\n\t          return _ref = {}, _ref[_h2.default.getDeltaEnd(startValue)] = parsedEndValue, _ref.easing = easing, _ref.curve = curve, _ref;\n\t          // if both start and end value are not ∆ - make ∆\n\t        } else {\n\t          var _ref2;\n\n\t          return _ref2 = {}, _ref2[startValue] = parsedEndValue, _ref2.easing = easing, _ref2.curve = curve, _ref2;\n\t        }\n\t      }\n\t      // copy the tween values unattended\n\t    } else {\n\t      return endValue;\n\t    }\n\t  };\n\t  /*\n\t    Method to retreive array's length and return -1 for\n\t    all other types.\n\t    @private\n\t    @param {Array, Any} Array to get the width for.\n\t    @returns {Number} Array length or -1 if not array.\n\t  */\n\n\n\t  Thenable.prototype._getArrayLength = function _getArrayLength(arr) {\n\t    return _h2.default.isArray(arr) ? arr.length : -1;\n\t  };\n\t  /*\n\t    Method to check if the property is delta property.\n\t    @private\n\t    @param {Any} Parameter value to check.\n\t    @returns {Boolean}\n\t  */\n\n\n\t  Thenable.prototype._isDelta = function _isDelta(optionsValue) {\n\t    var isObject = _h2.default.isObject(optionsValue);\n\t    isObject = isObject && !optionsValue.unit;\n\t    return !(!isObject || _h2.default.isArray(optionsValue) || _h2.default.isDOM(optionsValue));\n\t  };\n\t  /*\n\t    Method to check if the module is first in `then` chain.\n\t    @private\n\t    @returns {Boolean} If the module is the first in module chain.\n\t  */\n\n\n\t  Thenable.prototype._isFirstInChain = function _isFirstInChain() {\n\t    return !this._masterModule;\n\t  };\n\t  /*\n\t    Method to check if the module is last in `then` chain.\n\t    @private\n\t    @returns {Boolean} If the module is the last in module chain.\n\t  */\n\n\n\t  Thenable.prototype._isLastInChain = function _isLastInChain() {\n\t    var master = this._masterModule;\n\t    // if there is no master field - check the modules length\n\t    // if module length is 1 thus there is no modules chain \n\t    // it is the last one, otherwise it isnt\n\t    if (!master) {\n\t      return this._modules.length === 1;\n\t    }\n\t    // if there is master - check if it is the last item in _modules chain\n\t    return this === _h2.default.getLastItem(master._modules);\n\t  };\n\n\t  return Thenable;\n\t}(_tweenable2.default);\n\n\texports.default = Thenable;\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _tween = __webpack_require__(101);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _timeline = __webpack_require__(110);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _module = __webpack_require__(84);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  Class to define a module ancestor\n\t  with timeline and tween options and functionality.\n\t  All runable modules should inherit from this class.\n\n\t  @class Tweenable\n\t*/\n\tvar Tweenable = function (_Module) {\n\t  (0, _inherits3.default)(Tweenable, _Module);\n\n\t  /*\n\t    `play` method for the timeline.\n\t    @public\n\t    @param {Number} Time shift.\n\t    @returns this.\n\t  */\n\t  Tweenable.prototype.play = function play() {\n\t    this.timeline.play.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `playBackward` method for the timeline.\n\t    @public\n\t    @param {Number} Time shift.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.playBackward = function playBackward() {\n\t    this.timeline.playBackward.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `pause` method for the timeline.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.pause = function pause() {\n\t    this.timeline.pause.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `stop` method for the timeline.\n\t    @public\n\t    @param {Number} [0...1] Progress to set on stop.\n\t                            *Default* is `0` if `play`\n\t                            and `1` if `playBAckward`.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.stop = function stop() {\n\t    this.timeline.stop.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `reset` method for the timeline.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.reset = function reset() {\n\t    this.timeline.reset.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `replay` method for the timeline.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.replay = function replay() {\n\t    this.timeline.replay.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `replay` method for the timeline.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.replayBackward = function replayBackward() {\n\t    this.timeline.replayBackward.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `resume` method for the timeline.\n\t    @public\n\t    @param {Number} Time shift.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.resume = function resume() {\n\t    var shift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n\t    this.timeline.resume.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    `setProgress` method for the timeline.\n\t    @public\n\t    @param {Number} [0...1] Progress value.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.setProgress = function setProgress() {\n\t    this.timeline.setProgress.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\t  /*\n\t    setSpeed method for the timeline.\n\t    @param {Number} Speed value.\n\t    @returns this.\n\t  */\n\n\n\t  Tweenable.prototype.setSpeed = function setSpeed(speed) {\n\t    this.timeline.setSpeed.apply(this.timeline, arguments);\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  function Tweenable() {\n\t    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t    (0, _classCallCheck3.default)(this, Tweenable);\n\n\t    // pipe function for _o object\n\t    // before creating tween/timeline\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, _Module.call(this, o));\n\t    // super of Module\n\n\n\t    _this._transformTweenOptions();\n\t    // make tween only if isTweenLess option is not set\n\t    !_this._o.isTweenLess && _this._makeTween();\n\t    // make timeline only if isTimelineLess option is not set\n\t    !_this._o.isTimelineLess && _this._makeTimeline();\n\t    return _this;\n\t  }\n\t  /*\n\t    Placeholder method that should be overrided\n\t    and will be called before tween/timeline creation.\n\t    @private\n\t  */\n\n\n\t  Tweenable.prototype._transformTweenOptions = function _transformTweenOptions() {};\n\t  /*\n\t    Method to create tween.\n\t    @private\n\t  */\n\n\n\t  Tweenable.prototype._makeTween = function _makeTween() {\n\t    // pass callbacks context\n\t    this._o.callbacksContext = this._o.callbacksContext || this;\n\t    this.tween = new _tween2.default(this._o);\n\t    // make timeline property point to tween one is \"no timeline\" mode\n\t    this._o.isTimelineLess && (this.timeline = this.tween);\n\t  };\n\t  /*\n\t    Method to create timeline.\n\t    @private\n\t    @param {Object} Timeline's options.\n\t                    An object which contains \"timeline\" property with\n\t                    timeline options.\n\t  */\n\n\n\t  Tweenable.prototype._makeTimeline = function _makeTimeline() {\n\t    // pass callbacks context\n\t    this._o.timeline = this._o.timeline || {};\n\t    this._o.timeline.callbacksContext = this._o.callbacksContext || this;\n\t    this.timeline = new _timeline2.default(this._o.timeline);\n\t    // set the flag to indicate that real timeline is present\n\t    this._isTimeline = true;\n\t    // if tween exist - add it to the timeline there is some\n\t    // modules like burst and stagger that have no tween\n\t    this.tween && this.timeline.add(this.tween);\n\t  };\n\n\t  return Tweenable;\n\t}(_module2.default);\n\n\texports.default = Tweenable;\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _tweener = __webpack_require__(102);\n\n\tvar _tweener2 = _interopRequireDefault(_tweener);\n\n\tvar _easing = __webpack_require__(105);\n\n\tvar _easing2 = _interopRequireDefault(_easing);\n\n\tvar _module = __webpack_require__(84);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t// import h from '../h';\n\tvar Tween = function (_Module) {\n\t  (0, _inherits3.default)(Tween, _Module);\n\n\t  /*\n\t    Method do declare defaults with this._defaults object.\n\t    @private\n\t  */\n\t  Tween.prototype._declareDefaults = function _declareDefaults() {\n\t    // DEFAULTS\n\t    this._defaults = {\n\t      /* duration of the tween [0..∞] */\n\t      duration: 350,\n\t      /* delay of the tween [-∞..∞] */\n\t      delay: 0,\n\t      /* repeat of the tween [0..∞], means how much to\n\t         repeat the tween regardless first run,\n\t         for instance repeat: 2 will make the tween run 3 times */\n\t      repeat: 0,\n\t      /* speed of playback [0..∞], speed that is less then 1\n\t         will slowdown playback, for instance .5 will make tween\n\t         run 2x slower. Speed of 2 will speedup the tween to 2x. */\n\t      speed: 1,\n\t      /*  flip onUpdate's progress on each even period.\n\t          note that callbacks order won't flip at least\n\t          for now (under consideration). */\n\t      isYoyo: false,\n\t      /* easing for the tween, could be any easing type [link to easing-types.md] */\n\t      easing: 'Sin.Out',\n\t      /*\n\t        Easing for backward direction of the tweenthe tween,\n\t        if `null` - fallbacks to `easing` property.\n\t        forward direction in `yoyo` period is treated as backward for the easing.\n\t      */\n\t      backwardEasing: null,\n\t      /* custom tween's name */\n\t      name: null,\n\t      /* custom tween's base name */\n\t      nameBase: 'Tween',\n\t      /*\n\t        onProgress callback runs before any other callback.\n\t        @param {Number}   The entire, not eased, progress\n\t                          of the tween regarding repeat option.\n\t        @param {Boolean}  The direction of the tween.\n\t                          `true` for forward direction.\n\t                          `false` for backward direction(tween runs in reverse).\n\t      */\n\t      onProgress: null,\n\t      /*\n\t        onStart callback runs on very start of the tween just after onProgress\n\t        one. Runs on very end of the tween if tween is reversed.\n\t        @param {Boolean}  Direction of the tween.\n\t                          `true` for forward direction.\n\t                          `false` for backward direction(tween runs in reverse).\n\t      */\n\t      onStart: null,\n\t      onRefresh: null,\n\t      onComplete: null,\n\t      onRepeatStart: null,\n\t      onRepeatComplete: null,\n\t      onFirstUpdate: null,\n\t      onUpdate: null,\n\t      isChained: false,\n\t      // playback callbacks\n\t      onPlaybackStart: null,\n\t      onPlaybackPause: null,\n\t      onPlaybackStop: null,\n\t      onPlaybackComplete: null,\n\t      // context which all callbacks will be called with\n\t      callbacksContext: null\n\t    };\n\t  };\n\t  /*\n\t    API method to play the Tween.\n\t    @public\n\t    @param  {Number} Shift time in milliseconds.\n\t    @return {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.play = function play() {\n\t    var shift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n\t    if (this._state === 'play' && this._isRunning) {\n\t      return this;\n\t    }\n\t    this._props.isReversed = false;\n\t    this._subPlay(shift, 'play');\n\t    this._setPlaybackState('play');\n\t    return this;\n\t  };\n\t  /*\n\t    API method to play the Tween in reverse.\n\t    @public\n\t    @param  {Number} Shift time in milliseconds.\n\t    @return {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.playBackward = function playBackward() {\n\t    var shift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n\t    if (this._state === 'reverse' && this._isRunning) {\n\t      return this;\n\t    }\n\t    this._props.isReversed = true;\n\t    this._subPlay(shift, 'reverse');\n\t    this._setPlaybackState('reverse');\n\t    return this;\n\t  };\n\t  /*\n\t    API method to pause Tween.\n\t    @public\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.pause = function pause() {\n\t    if (this._state === 'pause' || this._state === 'stop') {\n\t      return this;\n\t    }\n\t    this._removeFromTweener();\n\t    this._setPlaybackState('pause');\n\t    return this;\n\t  };\n\t  /*\n\t    API method to stop the Tween.\n\t    @public\n\t    @param   {Number} Progress [0..1] to set when stopped.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.stop = function stop(progress) {\n\t    if (this._state === 'stop') {\n\t      return this;\n\t    }\n\n\t    this._wasUknownUpdate = undefined;\n\n\t    var stopProc = progress != null ? progress\n\t    /* if no progress passsed - set 1 if tween\n\t       is playingBackward, otherwise set to 0 */\n\t    : this._state === 'reverse' ? 1 : 0;\n\n\t    this.setProgress(stopProc);\n\n\t    this.reset();\n\t    return this;\n\t  };\n\t  /*\n\t    API method to replay(restart) the Tween.\n\t    @public\n\t    @param   {Number} Shift time in milliseconds.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.replay = function replay() {\n\t    var shift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n\t    this.reset();\n\t    this.play(shift);\n\t    return this;\n\t  };\n\t  /*\n\t    API method to replay(restart) backward the Tween.\n\t    @public\n\t    @param   {Number} Shift time in milliseconds.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.replayBackward = function replayBackward() {\n\t    var shift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n\t    this.reset();\n\t    this.playBackward(shift);\n\t    return this;\n\t  };\n\t  /*\n\t    API method to resume the Tween.\n\t    @public\n\t    @param  {Number} Shift time in milliseconds.\n\t    @return {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.resume = function resume() {\n\t    var shift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n\t    if (this._state !== 'pause') {\n\t      return this;\n\t    }\n\n\t    switch (this._prevState) {\n\t      case 'play':\n\t        this.play(shift);\n\t        break;\n\t      case 'reverse':\n\t        this.playBackward(shift);\n\t        break;\n\t    }\n\n\t    return this;\n\t  };\n\t  /*\n\t    API method to set progress on tween.\n\t    @public\n\t    @param {Number} Progress to set.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype.setProgress = function setProgress(progress) {\n\t    var p = this._props;\n\t    // set start time if there is no one yet.\n\t    !p.startTime && this._setStartTime();\n\t    // reset play time\n\t    this._playTime = null;\n\t    // progress should be in range of [0..1]\n\t    progress < 0 && (progress = 0);\n\t    progress > 1 && (progress = 1);\n\t    // update self with calculated time\n\t    this._update(p.startTime - p.delay + progress * p.repeatTime);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to set tween's speed.\n\t    @public\n\t    @param {Number} Speed value.\n\t    @returns this.\n\t  */\n\n\n\t  Tween.prototype.setSpeed = function setSpeed(speed) {\n\t    this._props.speed = speed;\n\t    // if playing - normalize _startTime and _prevTime to the current point.\n\t    if (this._state === 'play' || this._state === 'reverse') {\n\t      this._setResumeTime(this._state);\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to reset tween's state and properties.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tween.prototype.reset = function reset() {\n\t    this._removeFromTweener();\n\t    this._setPlaybackState('stop');\n\t    this._progressTime = 0;\n\t    this._isCompleted = false;\n\t    this._isStarted = false;\n\t    this._isFirstUpdate = false;\n\t    this._wasUknownUpdate = undefined;\n\t    this._prevTime = undefined;\n\t    this._prevYoyo = undefined;\n\t    // this._props.startTime  = undefined;\n\t    this._props.isReversed = false;\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to launch play. Used as launch\n\t    method for bothplay and reverse methods.\n\t    @private\n\t    @param  {Number} Shift time in milliseconds.\n\t    @param  {String} Play or reverse state.\n\t    @return {Object} Self.\n\t  */\n\n\n\t  Tween.prototype._subPlay = function _subPlay() {\n\t    var shift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t    var state = arguments[1];\n\n\t    var resumeTime,\n\t        startTime,\n\t        p = this._props,\n\n\t    // check if direction of playback changes,\n\t    // if so, the _progressTime needs to be flipped\n\t    _state = this._state,\n\t        _prevState = this._prevState,\n\t        isPause = _state === 'pause',\n\t        wasPlay = _state === 'play' || isPause && _prevState === 'play',\n\t        wasReverse = _state === 'reverse' || isPause && _prevState === 'reverse',\n\t        isFlip = wasPlay && state === 'reverse' || wasReverse && state === 'play';\n\n\t    // if tween was ended, set progress to 0 if not, set to elapsed progress\n\t    this._progressTime = this._progressTime >= p.repeatTime ? 0 : this._progressTime;\n\t    // flip the _progressTime if playback direction changed\n\t    if (isFlip) {\n\t      this._progressTime = p.repeatTime - this._progressTime;\n\t    }\n\t    // set resume time and normalize prev/start times\n\t    this._setResumeTime(state, shift);\n\t    // add self to tweener = play\n\t    _tweener2.default.add(this);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to set _resumeTime, _startTime and _prevTime.\n\t    @private\n\t    @param {String} Current state. [play, reverse]\n\t    @param {Number} Time shift. *Default* is 0.\n\t  */\n\n\n\t  Tween.prototype._setResumeTime = function _setResumeTime(state) {\n\t    var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t    // get current moment as resume time\n\t    this._resumeTime = performance.now();\n\t    // set start time regarding passed `shift` and `procTime`\n\t    var startTime = this._resumeTime - Math.abs(shift) - this._progressTime;\n\t    this._setStartTime(startTime, false);\n\t    // if we have prevTime - we need to normalize\n\t    // it for the current resume time\n\t    if (this._prevTime != null) {\n\t      this._prevTime = state === 'play' ? this._normPrevTimeForward() : this._props.endTime - this._progressTime;\n\t    }\n\t  };\n\t  /*\n\t    Method recalculate _prevTime for forward direction.\n\t    @private\n\t    @return {Number} Normalized prev time.\n\t  */\n\n\n\t  Tween.prototype._normPrevTimeForward = function _normPrevTimeForward() {\n\t    var p = this._props;\n\t    return p.startTime + this._progressTime - p.delay;\n\t  };\n\t  /*\n\t    Constructor of the class.\n\t    @private\n\t  */\n\n\n\t  function Tween() {\n\t    var _ret;\n\n\t    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t    (0, _classCallCheck3.default)(this, Tween);\n\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, _Module.call(this, o));\n\n\t    _this._props.name == null && _this._setSelfName();\n\t    return _ret = _this, (0, _possibleConstructorReturn3.default)(_this, _ret);\n\t  }\n\t  /*\n\t    Method to set self name to generic one.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._setSelfName = function _setSelfName() {\n\t    var globalName = '_' + this._props.nameBase + 's';\n\t    // track amount of tweens globally\n\t    _tweener2.default[globalName] = _tweener2.default[globalName] == null ? 1 : ++_tweener2.default[globalName];\n\t    // and set generic tween's name  || Tween # ||\n\t    this._props.name = this._props.nameBase + ' ' + _tweener2.default[globalName];\n\t  };\n\t  /*\n\t    Method set playback state string.\n\t    @private\n\t    @param {String} State name\n\t  */\n\n\n\t  Tween.prototype._setPlaybackState = function _setPlaybackState(state) {\n\t    // save previous state\n\t    this._prevState = this._state;\n\t    this._state = state;\n\n\t    // callbacks\n\t    var wasPause = this._prevState === 'pause',\n\t        wasStop = this._prevState === 'stop',\n\t        wasPlay = this._prevState === 'play',\n\t        wasReverse = this._prevState === 'reverse',\n\t        wasPlaying = wasPlay || wasReverse,\n\t        wasStill = wasStop || wasPause;\n\n\t    if ((state === 'play' || state === 'reverse') && wasStill) {\n\t      this._playbackStart();\n\t    }\n\t    if (state === 'pause' && wasPlaying) {\n\t      this._playbackPause();\n\t    }\n\t    if (state === 'stop' && (wasPlaying || wasPause)) {\n\t      this._playbackStop();\n\t    }\n\t  };\n\t  /*\n\t    Method to declare some vars.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._vars = function _vars() {\n\t    this.progress = 0;\n\t    this._prevTime = undefined;\n\t    this._progressTime = 0;\n\t    this._negativeShift = 0;\n\t    this._state = 'stop';\n\t    // if negative delay was specified,\n\t    // save it to _negativeShift property and\n\t    // reset it back to 0\n\t    if (this._props.delay < 0) {\n\t      this._negativeShift = this._props.delay;\n\t      this._props.delay = 0;\n\t    }\n\n\t    return this._calcDimentions();\n\t  };\n\t  /*\n\t    Method to calculate tween's dimentions.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._calcDimentions = function _calcDimentions() {\n\t    this._props.time = this._props.duration + this._props.delay;\n\t    this._props.repeatTime = this._props.time * (this._props.repeat + 1);\n\t  };\n\t  /*\n\t    Method to extend defaults by options and put them in _props.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._extendDefaults = function _extendDefaults() {\n\t    // save callback overrides object with fallback to empty one\n\t    this._callbackOverrides = this._o.callbackOverrides || {};\n\t    delete this._o.callbackOverrides;\n\t    // call the _extendDefaults @ Module\n\t    _Module.prototype._extendDefaults.call(this);\n\n\t    var p = this._props;\n\t    p.easing = _easing2.default.parseEasing(p.easing);\n\t    p.easing._parent = this;\n\n\t    // parse only present backward easing to prevent parsing as `linear.none`\n\t    // because we need to fallback to `easing` in `_setProgress` method\n\t    if (p.backwardEasing != null) {\n\t      p.backwardEasing = _easing2.default.parseEasing(p.backwardEasing);\n\t      p.backwardEasing._parent = this;\n\t    }\n\t  };\n\t  /*\n\t    Method for setting start and end time to props.\n\t    @private\n\t    @param {Number(Timestamp)}, {Null} Start time.\n\t    @param {Boolean} Should reset flags.\n\t    @returns this\n\t  */\n\n\n\t  Tween.prototype._setStartTime = function _setStartTime(time) {\n\t    var isResetFlags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n\t    var p = this._props,\n\t        shiftTime = p.shiftTime || 0;\n\t    // reset flags\n\t    if (isResetFlags) {\n\t      this._isCompleted = false;this._isRepeatCompleted = false;\n\t      this._isStarted = false;\n\t    }\n\t    // set start time to passed time or to the current moment\n\t    var startTime = time == null ? performance.now() : time;\n\t    // calculate bounds\n\t    // - negativeShift is negative delay in options hash\n\t    // - shift time is shift of the parent\n\t    p.startTime = startTime + p.delay + this._negativeShift + shiftTime;\n\t    p.endTime = p.startTime + p.repeatTime - p.delay;\n\t    // set play time to the startTimes\n\t    // if playback controls are used - use _resumeTime as play time,\n\t    // else use shifted startTime -- shift is needed for timelines append chains\n\t    this._playTime = this._resumeTime != null ? this._resumeTime : startTime + shiftTime;\n\t    this._resumeTime = null;\n\n\t    return this;\n\t  };\n\t  /*\n\t    Method to update tween's progress.\n\t    @private\n\t    @param {Number} Current update time.\n\t    -- next params only present when parent Timeline calls the method.\n\t    @param {Number} Previous Timeline's update time.\n\t    @param {Boolean} Was parent in yoyo period.\n\t    @param {Number} [-1, 0, 1] If update is on edge.\n\t                   -1 = edge jump in negative direction.\n\t                    0 = no edge jump.\n\t                    1 = edge jump in positive direction.\n\t  */\n\n\n\t  Tween.prototype._update = function _update(time, timelinePrevTime, wasYoyo, onEdge) {\n\t    var p = this._props;\n\t    // if we don't the _prevTime thus the direction we are heading to,\n\t    // but prevTime was passed thus we are child of a Timeline\n\t    // set _prevTime to passed one and pretent that there was unknown\n\t    // update to not to block start/complete callbacks\n\t    if (this._prevTime == null && timelinePrevTime != null) {\n\n\t      if (this._props.speed && this._playTime) {\n\t        // play point + ( speed * delta )\n\t        this._prevTime = this._playTime + this._props.speed * (timelinePrevTime - this._playTime);\n\t      }\n\t      // this._prevTime = timelinePrevTime;\n\t      this._wasUknownUpdate = true;\n\t    }\n\n\t    // var before = time;\n\t    // cache vars\n\t    var startPoint = p.startTime - p.delay;\n\t    // if speed param was defined - calculate\n\t    // new time regarding speed\n\t    if (p.speed && this._playTime) {\n\t      // play point + ( speed * delta )\n\t      time = this._playTime + p.speed * (time - this._playTime);\n\t    }\n\n\t    // due to javascript precision issues, after speed mapping\n\t    // we can get very close number that was made from progress of 1\n\t    // and in fact represents `endTime` if so, set the time to `endTime`\n\t    if (Math.abs(p.endTime - time) < 0.00000001) {\n\t      time = p.endTime;\n\t    }\n\n\t    // if parent is onEdge but not very start nor very end\n\t    if (onEdge && wasYoyo != null) {\n\t      var T = this._getPeriod(time),\n\t          isYoyo = !!(p.isYoyo && this._props.repeat && T % 2 === 1);\n\n\t      // for timeline\n\t      // notify children about edge jump\n\t      if (this._timelines) {\n\t        for (var i = 0; i < this._timelines.length; i++) {\n\t          this._timelines[i]._update(time, timelinePrevTime, wasYoyo, onEdge);\n\t        }\n\t      }\n\t      // forward edge direction\n\t      if (onEdge === 1) {\n\t        // jumped from yoyo period?\n\t        if (wasYoyo) {\n\t          this._prevTime = time + 1;\n\t          this._repeatStart(time, isYoyo);\n\t          this._start(time, isYoyo);\n\t        } else {\n\t          this._prevTime = time - 1;\n\t          this._repeatComplete(time, isYoyo);\n\t          this._complete(time, isYoyo);\n\t        }\n\t        // backward edge direction\n\t      } else if (onEdge === -1) {\n\t        // jumped from yoyo period?\n\t        if (wasYoyo) {\n\t          this._prevTime = time - 1;\n\t          this._repeatComplete(time, isYoyo);\n\t          this._complete(time, isYoyo);\n\t        } else {\n\t          // call _start callbacks only if prev time was in active area\n\t          // not always true for append chains\n\t          if (this._prevTime >= p.startTime && this._prevTime <= p.endTime) {\n\t            this._prevTime = time + 1;\n\t            this._repeatStart(time, isYoyo);\n\t            this._start(time, isYoyo);\n\t            // reset isCOmpleted immediately to prevent onComplete cb\n\t            this._isCompleted = true;\n\t          }\n\t        }\n\t      }\n\t      // reset the _prevTime - drop one frame to undestand\n\t      // where we are heading\n\t      this._prevTime = undefined;\n\t    }\n\t    // if in active area and not ended - save progress time\n\t    // for pause/play purposes.\n\t    if (time > startPoint && time < p.endTime) {\n\t      this._progressTime = time - startPoint;\n\t    }\n\t    // else if not started or ended set progress time to 0\n\t    else if (time <= startPoint) {\n\t        this._progressTime = 0;\n\t      } else if (time >= p.endTime) {\n\t        // set progress time to repeat time + tiny cofficient\n\t        // to make it extend further than the end time\n\t        this._progressTime = p.repeatTime + .00000000001;\n\t      }\n\t    // reverse time if _props.isReversed is set\n\t    if (p.isReversed) {\n\t      time = p.endTime - this._progressTime;\n\t    }\n\t    // We need to know what direction we are heading to,\n\t    // so if we don't have the previous update value - this is very first\n\t    // update, - skip it entirely and wait for the next value\n\t    if (this._prevTime == null) {\n\t      this._prevTime = time;\n\t      this._wasUknownUpdate = true;\n\t      return false;\n\t    }\n\n\t    // ====== AFTER SKIPPED FRAME ======\n\n\t    // handle onProgress callback\n\t    if (time >= startPoint && time <= p.endTime) {\n\t      this._progress((time - startPoint) / p.repeatTime, time);\n\t    }\n\t    /*\n\t      if time is inside the active area of the tween.\n\t      active area is the area from start time to end time,\n\t      with all the repeat and delays in it\n\t    */\n\t    if (time >= p.startTime && time <= p.endTime) {\n\t      this._updateInActiveArea(time);\n\t    } else {\n\t      // if was in active area - update in inactive area but just once -\n\t      // right after the active area\n\t      if (this._isInActiveArea) {\n\t        this._updateInInactiveArea(time);\n\t      } else if (!this._isRefreshed) {\n\t        // onRefresh callback\n\t        // before startTime\n\t        if (time < p.startTime && this.progress !== 0) {\n\t          this._refresh(true);\n\t          this._isRefreshed = true;\n\t          // after endTime\n\t        }\n\t        // else if ( time > p.endTime ) { }\n\t      }\n\t    }\n\n\t    this._prevTime = time;\n\t    return time >= p.endTime || time <= startPoint;\n\t  };\n\t  /*\n\t    Method to handle tween's progress in inactive area.\n\t    @private\n\t    @param {Number} Current update time.\n\t  */\n\n\n\t  Tween.prototype._updateInInactiveArea = function _updateInInactiveArea(time) {\n\t    if (!this._isInActiveArea) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    // complete if time is larger then end time\n\t    if (time > p.endTime && !this._isCompleted) {\n\t      this._progress(1, time);\n\t      // get period number\n\t      var T = this._getPeriod(p.endTime),\n\t          isYoyo = p.isYoyo && T % 2 === 0;\n\n\t      this._setProgress(isYoyo ? 0 : 1, time, isYoyo);\n\t      this._repeatComplete(time, isYoyo);\n\t      this._complete(time, isYoyo);\n\t    }\n\t    // if was active and went to - inactive area \"-\"\n\t    if (time < this._prevTime && time < p.startTime && !this._isStarted && !this._isCompleted) {\n\t      // if was in active area and didn't fire onStart callback\n\t      this._progress(0, time, false);\n\t      this._setProgress(0, time, false);\n\t      this._isRepeatStart = false;\n\t      this._repeatStart(time, false);\n\t      this._start(time, false);\n\t    }\n\t    this._isInActiveArea = false;\n\t  };\n\t  /*\n\t    Method to handle tween's progress in active area.\n\t    @private\n\t    @param {Number} Current update time.\n\t  */\n\n\n\t  Tween.prototype._updateInActiveArea = function _updateInActiveArea(time) {\n\n\t    var props = this._props,\n\t        delayDuration = props.delay + props.duration,\n\t        startPoint = props.startTime - props.delay,\n\t        elapsed = (time - props.startTime + props.delay) % delayDuration,\n\t        TCount = Math.round((props.endTime - props.startTime + props.delay) / delayDuration),\n\t        T = this._getPeriod(time),\n\t        TValue = this._delayT,\n\t        prevT = this._getPeriod(this._prevTime),\n\t        TPrevValue = this._delayT;\n\n\t    // \"zero\" and \"one\" value regarding yoyo and it's period\n\t    var isYoyo = props.isYoyo && T % 2 === 1,\n\t        isYoyoPrev = props.isYoyo && prevT % 2 === 1,\n\t        yoyoZero = isYoyo ? 1 : 0,\n\t        yoyoOne = 1 - yoyoZero;\n\n\t    if (time === props.endTime) {\n\t      this._wasUknownUpdate = false;\n\t      // if `time` is equal to `endTime`, T represents the next period,\n\t      // so we need to decrement T and calculate \"one\" value regarding yoyo\n\t      var isYoyo = props.isYoyo && (T - 1) % 2 === 1;\n\t      this._setProgress(isYoyo ? 0 : 1, time, isYoyo);\n\t      if (time > this._prevTime) {\n\t        this._isRepeatCompleted = false;\n\t      }\n\t      this._repeatComplete(time, isYoyo);\n\t      return this._complete(time, isYoyo);\n\t    }\n\n\t    // reset callback flags\n\t    this._isCompleted = false;\n\t    this._isRefreshed = false;\n\t    // if time is inside the duration area of the tween\n\t    if (startPoint + elapsed >= props.startTime) {\n\t      this._isInActiveArea = true;this._isRepeatCompleted = false;\n\t      this._isRepeatStart = false;this._isStarted = false;\n\t      // active zone or larger then end\n\t      var elapsed2 = (time - props.startTime) % delayDuration,\n\t          proc = elapsed2 / props.duration;\n\t      // |=====|=====|=====| >>>\n\t      //      ^1^2\n\t      var isOnEdge = T > 0 && prevT < T;\n\t      // |=====|=====|=====| <<<\n\t      //      ^2^1\n\t      var isOnReverseEdge = prevT > T;\n\n\t      // for use in timeline\n\t      this._onEdge = 0;\n\t      isOnEdge && (this._onEdge = 1);\n\t      isOnReverseEdge && (this._onEdge = -1);\n\n\t      if (this._wasUknownUpdate) {\n\t        if (time > this._prevTime) {\n\t          this._start(time, isYoyo);\n\t          this._repeatStart(time, isYoyo);\n\t          this._firstUpdate(time, isYoyo);\n\t        }\n\t        // if backward direction and \n\t        // if ( time < this._prevTime && time !== this._props.startTime ) {\n\t        if (time < this._prevTime) {\n\t          this._complete(time, isYoyo);\n\t          this._repeatComplete(time, isYoyo);\n\t          this._firstUpdate(time, isYoyo);\n\t          // reset isCompleted immediately\n\t          this._isCompleted = false;\n\t        }\n\t      }\n\n\t      if (isOnEdge) {\n\t        // if not just after delay\n\t        // |---=====|---=====|---=====| >>>\n\t        //            ^1 ^2\n\t        // because we have already handled\n\t        // 1 and onRepeatComplete in delay gap\n\t        if (this.progress !== 1) {\n\t          // prevT\n\t          var isThisYoyo = props.isYoyo && (T - 1) % 2 === 1;\n\t          this._repeatComplete(time, isThisYoyo);\n\t        }\n\t        // if on edge but not at very start\n\t        // |=====|=====|=====| >>>\n\t        // ^!    ^here ^here \n\t        if (prevT >= 0) {\n\t          this._repeatStart(time, isYoyo);\n\t        }\n\t      }\n\n\t      if (time > this._prevTime) {\n\t        //  |=====|=====|=====| >>>\n\t        // ^1  ^2\n\t        if (!this._isStarted && this._prevTime <= props.startTime) {\n\t          this._start(time, isYoyo);\n\t          this._repeatStart(time, isYoyo);\n\t          // it was zero anyways\n\n\t          // restart flags immediately in case if we will\n\t          // return to '-' inactive area on the next step\n\t          this._isStarted = false;\n\t          this._isRepeatStart = false;\n\t        }\n\t        this._firstUpdate(time, isYoyo);\n\t      }\n\n\t      if (isOnReverseEdge) {\n\t        // if on edge but not at very end\n\t        // |=====|=====|=====| <<<\n\t        //       ^here ^here ^not here\n\t        if (this.progress !== 0 && this.progress !== 1 && prevT != TCount) {\n\t          this._repeatStart(time, isYoyoPrev);\n\t        }\n\t        // if on very end edge\n\t        // |=====|=====|=====| <<<\n\t        //       ^!    ^! ^2 ^1\n\t        // we have handled the case in this._wasUknownUpdate\n\t        // block so filter that\n\t        if (prevT === TCount && !this._wasUknownUpdate) {\n\t          this._complete(time, isYoyo);\n\t          this._repeatComplete(time, isYoyo);\n\t          this._firstUpdate(time, isYoyo);\n\t          // reset isComplete flag call\n\t          // cuz we returned to active area\n\t          // this._isRepeatCompleted = false;\n\t          this._isCompleted = false;\n\t        }\n\t        this._repeatComplete(time, isYoyo);\n\t      }\n\n\t      if (prevT === 'delay') {\n\t        // if just before delay gap\n\t        // |---=====|---=====|---=====| <<<\n\t        //               ^2    ^1\n\t        if (T < TPrevValue) {\n\t          this._repeatComplete(time, isYoyo);\n\t        }\n\t        // if just after delay gap\n\t        // |---=====|---=====|---=====| >>>\n\t        //            ^1  ^2\n\t        if (T === TPrevValue && T > 0) {\n\t          this._repeatStart(time, isYoyo);\n\t        }\n\t      }\n\n\t      // swap progress and repeatStart based on direction\n\t      if (time > this._prevTime) {\n\t        // if progress is equal 0 and progress grows\n\t        if (proc === 0) {\n\t          this._repeatStart(time, isYoyo);\n\t        }\n\t        if (time !== props.endTime) {\n\t          this._setProgress(isYoyo ? 1 - proc : proc, time, isYoyo);\n\t        }\n\t      } else {\n\t        if (time !== props.endTime) {\n\t          this._setProgress(isYoyo ? 1 - proc : proc, time, isYoyo);\n\t        }\n\t        // if progress is equal 0 and progress grows\n\t        if (proc === 0) {\n\t          this._repeatStart(time, isYoyo);\n\t        }\n\t      }\n\n\t      if (time === props.startTime) {\n\t        this._start(time, isYoyo);\n\t      }\n\t      // delay gap - react only once\n\t    } else if (this._isInActiveArea) {\n\t      // because T will be string of \"delay\" here,\n\t      // let's normalize it be setting to TValue\n\t      var t = T === 'delay' ? TValue : T,\n\t          isGrows = time > this._prevTime;\n\t      // decrement period if forward direction of update\n\t      isGrows && t--;\n\t      // calculate normalized yoyoZero value\n\t      yoyoZero = props.isYoyo && t % 2 === 1 ? 1 : 0;\n\t      // if was in active area and previous time was larger\n\t      // |---=====|---=====|---=====| <<<\n\t      //   ^2 ^1    ^2 ^1    ^2 ^1\n\t      if (time < this._prevTime) {\n\t        this._setProgress(yoyoZero, time, yoyoZero === 1);\n\t        this._repeatStart(time, yoyoZero === 1);\n\t      }\n\t      // set 1 or 0 regarding direction and yoyo\n\t      this._setProgress(isGrows ? 1 - yoyoZero : yoyoZero, time, yoyoZero === 1);\n\t      // if time grows\n\t      if (time > this._prevTime) {\n\t        // if reverse direction and in delay gap, then progress will be 0\n\t        // if so we don't need to call the onRepeatComplete callback\n\t        // |---=====|---=====|---=====| <<<\n\t        //   ^0       ^0       ^0   \n\t        // OR we have flipped 0 to 1 regarding yoyo option\n\t        if (this.progress !== 0 || yoyoZero === 1) {\n\t          // since we repeatComplete for previous period\n\t          // invert isYoyo option\n\t          // is elapsed is 0 - count as previous period\n\t          this._repeatComplete(time, yoyoZero === 1);\n\t        }\n\t      }\n\t      // set flag to indicate inactive area\n\t      this._isInActiveArea = false;\n\t    }\n\t    // we've got the first update now\n\t    this._wasUknownUpdate = false;\n\t  };\n\t  /*\n\t    Method to remove the Tween from the tweener.\n\t    @private\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype._removeFromTweener = function _removeFromTweener() {\n\t    _tweener2.default.remove(this);return this;\n\t  };\n\t  /*\n\t    Method to get current period number.\n\t    @private\n\t    @param {Number} Time to get the period for.\n\t    @returns {Number} Current period number.\n\t  */\n\n\n\t  Tween.prototype._getPeriod = function _getPeriod(time) {\n\t    var p = this._props,\n\t        TTime = p.delay + p.duration,\n\t        dTime = p.delay + time - p.startTime,\n\t        T = dTime / TTime,\n\n\t    // if time if equal to endTime we need to set the elapsed\n\t    // time to 0 to fix the occasional precision js bug, which\n\t    // causes 0 to be something like 1e-12\n\t    elapsed = time < p.endTime ? dTime % TTime : 0;\n\t    // If the latest period, round the result, otherwise floor it.\n\t    // Basically we always can floor the result, but because of js\n\t    // precision issues, sometimes the result is 2.99999998 which\n\t    // will result in 2 instead of 3 after the floor operation.\n\t    T = time >= p.endTime ? Math.round(T) : Math.floor(T);\n\t    // if time is larger then the end time\n\t    if (time > p.endTime) {\n\t      // set equal to the periods count\n\t      T = Math.round((p.endTime - p.startTime + p.delay) / TTime);\n\t      // if in delay gap, set _delayT to current\n\t      // period number and return \"delay\"\n\t    } else if (elapsed > 0 && elapsed < p.delay) {\n\t      this._delayT = T;T = 'delay';\n\t    }\n\t    // if the end of period and there is a delay\n\t    return T;\n\t  };\n\t  /*\n\t    Method to set Tween's progress and call onUpdate callback.\n\t    @private\n\t    @override @ Module\n\t    @param {Number} Progress to set.\n\t    @param {Number} Current update time.\n\t    @param {Boolean} Is yoyo perido. Used in Timeline to pass to Tween.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Tween.prototype._setProgress = function _setProgress(proc, time, isYoyo) {\n\t    var p = this._props,\n\t        isYoyoChanged = p.wasYoyo !== isYoyo,\n\t        isForward = time > this._prevTime;\n\n\t    this.progress = proc;\n\t    // get the current easing for `forward` direction regarding `yoyo`\n\t    if (isForward && !isYoyo || !isForward && isYoyo) {\n\t      this.easedProgress = p.easing(proc);\n\t      // get the current easing for `backward` direction regarding `yoyo`\n\t    } else if (!isForward && !isYoyo || isForward && isYoyo) {\n\t      var easing = p.backwardEasing != null ? p.backwardEasing : p.easing;\n\n\t      this.easedProgress = easing(proc);\n\t    }\n\n\t    if (p.prevEasedProgress !== this.easedProgress || isYoyoChanged) {\n\t      if (p.onUpdate != null && typeof p.onUpdate === 'function') {\n\t        p.onUpdate.call(p.callbacksContext || this, this.easedProgress, this.progress, isForward, isYoyo);\n\t      }\n\t    }\n\t    p.prevEasedProgress = this.easedProgress;\n\t    p.wasYoyo = isYoyo;\n\t    return this;\n\t  };\n\t  /*\n\t    Method to set tween's state to start and call onStart callback.\n\t    @method _start\n\t    @private\n\t    @param {Number} Progress to set.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\n\n\t  Tween.prototype._start = function _start(time, isYoyo) {\n\t    if (this._isStarted) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onStart != null && typeof p.onStart === 'function') {\n\t      p.onStart.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\t    this._isCompleted = false;this._isStarted = true;\n\t    this._isFirstUpdate = false;\n\t  };\n\t  /*\n\t    Method to call onPlaybackStart callback\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._playbackStart = function _playbackStart() {\n\t    var p = this._props;\n\t    if (p.onPlaybackStart != null && typeof p.onPlaybackStart === 'function') {\n\t      p.onPlaybackStart.call(p.callbacksContext || this);\n\t    }\n\t  };\n\t  /*\n\t    Method to call onPlaybackPause callback\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._playbackPause = function _playbackPause() {\n\t    var p = this._props;\n\t    if (p.onPlaybackPause != null && typeof p.onPlaybackPause === 'function') {\n\t      p.onPlaybackPause.call(p.callbacksContext || this);\n\t    }\n\t  };\n\t  /*\n\t    Method to call onPlaybackStop callback\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._playbackStop = function _playbackStop() {\n\t    var p = this._props;\n\t    if (p.onPlaybackStop != null && typeof p.onPlaybackStop === 'function') {\n\t      p.onPlaybackStop.call(p.callbacksContext || this);\n\t    }\n\t  };\n\t  /*\n\t    Method to call onPlaybackComplete callback\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._playbackComplete = function _playbackComplete() {\n\t    var p = this._props;\n\t    if (p.onPlaybackComplete != null && typeof p.onPlaybackComplete === 'function') {\n\t      p.onPlaybackComplete.call(p.callbacksContext || this);\n\t    }\n\t  };\n\t  /*\n\t    Method to set tween's state to complete.\n\t    @method _complete\n\t    @private\n\t    @param {Number} Current time.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\n\n\t  Tween.prototype._complete = function _complete(time, isYoyo) {\n\t    if (this._isCompleted) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onComplete != null && typeof p.onComplete === 'function') {\n\t      p.onComplete.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\n\t    this._isCompleted = true;this._isStarted = false;\n\t    this._isFirstUpdate = false;\n\t    // reset _prevYoyo for timeline usage\n\t    this._prevYoyo = undefined;\n\t  };\n\n\t  /*\n\t    Method to run onFirstUpdate callback.\n\t    @method _firstUpdate\n\t    @private\n\t    @param {Number} Current update time.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\n\n\t  Tween.prototype._firstUpdate = function _firstUpdate(time, isYoyo) {\n\t    if (this._isFirstUpdate) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onFirstUpdate != null && typeof p.onFirstUpdate === 'function') {\n\t      // onFirstUpdate should have tween pointer\n\t      p.onFirstUpdate.tween = this;\n\t      p.onFirstUpdate.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\t    this._isFirstUpdate = true;\n\t  };\n\t  /*\n\t    Method call onRepeatComplete calback and set flags.\n\t    @private\n\t    @param {Number} Current update time.\n\t    @param {Boolean} Is repeat period.\n\t  */\n\n\n\t  Tween.prototype._repeatComplete = function _repeatComplete(time, isYoyo) {\n\t    if (this._isRepeatCompleted) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onRepeatComplete != null && typeof p.onRepeatComplete === 'function') {\n\t      p.onRepeatComplete.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\t    this._isRepeatCompleted = true;\n\t    // this._prevYoyo = null;\n\t  };\n\n\t  /*\n\t    Method call onRepeatStart calback and set flags.\n\t    @private\n\t    @param {Number} Current update time.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\n\n\t  Tween.prototype._repeatStart = function _repeatStart(time, isYoyo) {\n\t    if (this._isRepeatStart) {\n\t      return;\n\t    }\n\t    var p = this._props;\n\t    if (p.onRepeatStart != null && typeof p.onRepeatStart === 'function') {\n\t      p.onRepeatStart.call(p.callbacksContext || this, time > this._prevTime, isYoyo);\n\t    }\n\t    this._isRepeatStart = true;\n\t  };\n\t  /*\n\t    Method to launch onProgress callback.\n\t    @method _progress\n\t    @private\n\t    @param {Number} Progress to set.\n\t  */\n\n\n\t  Tween.prototype._progress = function _progress(progress, time) {\n\t    var p = this._props;\n\t    if (p.onProgress != null && typeof p.onProgress === 'function') {\n\t      p.onProgress.call(p.callbacksContext || this, progress, time > this._prevTime);\n\t    }\n\t  };\n\t  /*\n\t    Method to launch onRefresh callback.\n\t    @method _refresh\n\t    @private\n\t    @param {Boolean} If refresh even before start time.\n\t  */\n\n\n\t  Tween.prototype._refresh = function _refresh(isBefore) {\n\t    var p = this._props;\n\t    if (p.onRefresh != null) {\n\t      var context = p.callbacksContext || this,\n\t          progress = isBefore ? 0 : 1;\n\n\t      p.onRefresh.call(context, isBefore, p.easing(progress), progress);\n\t    }\n\t  };\n\t  /*\n\t    Method which is called when the tween is removed from tweener.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._onTweenerRemove = function _onTweenerRemove() {};\n\t  /*\n\t    Method which is called when the tween is removed\n\t    from tweener when finished.\n\t    @private\n\t  */\n\n\n\t  Tween.prototype._onTweenerFinish = function _onTweenerFinish() {\n\t    this._setPlaybackState('stop');\n\t    this._playbackComplete();\n\t  };\n\t  /*\n\t    Method to set property[s] on Tween.\n\t    @private\n\t    @override @ Module\n\t    @param {Object, String} Hash object of key/value pairs, or property name.\n\t    @param {_} Property's value to set.\n\t  */\n\n\n\t  Tween.prototype._setProp = function _setProp(obj, value) {\n\t    _Module.prototype._setProp.call(this, obj, value);\n\t    this._calcDimentions();\n\t  };\n\t  /*\n\t    Method to set single property.\n\t    @private\n\t    @override @ Module\n\t    @param {String} Name of the property.\n\t    @param {Any} Value for the property.\n\t  */\n\n\n\t  Tween.prototype._assignProp = function _assignProp(key, value) {\n\t    // fallback to defaults\n\t    if (value == null) {\n\t      value = this._defaults[key];\n\t    }\n\t    // parse easing\n\t    if (key === 'easing') {\n\t      value = _easing2.default.parseEasing(value);\n\t      value._parent = this;\n\t    }\n\t    // handle control callbacks overrides\n\t    var control = this._callbackOverrides[key],\n\t        isntOverriden = !value || !value.isMojsCallbackOverride;\n\t    if (control && isntOverriden) {\n\t      value = this._overrideCallback(value, control);\n\t    }\n\t    // call super on Module\n\t    _Module.prototype._assignProp.call(this, key, value);\n\t  };\n\t  /*\n\t    Method to override callback for controll pupropes.\n\t    @private\n\t    @param {String}    Callback name.\n\t    @parma {Function}  Method to call  \n\t  */\n\n\n\t  Tween.prototype._overrideCallback = function _overrideCallback(callback, fun) {\n\t    var isCallback = callback && typeof callback === 'function',\n\t        override = function callbackOverride() {\n\t      // call overriden callback if it exists\n\t      isCallback && callback.apply(this, arguments);\n\t      // call the passed cleanup function\n\t      fun.apply(this, arguments);\n\t    };\n\t    // add overridden flag\n\t    override.isMojsCallbackOverride = true;\n\t    return override;\n\t  };\n\n\t  // _visualizeProgress(time) {\n\t  //   var str = '|',\n\t  //       procStr = ' ',\n\t  //       p = this._props,\n\t  //       proc = p.startTime - p.delay;\n\n\t  //   while ( proc < p.endTime ) {\n\t  //     if (p.delay > 0 ) {\n\t  //       var newProc = proc + p.delay;\n\t  //       if ( time > proc && time < newProc ) {\n\t  //         procStr += ' ^ ';\n\t  //       } else {\n\t  //         procStr += '   ';\n\t  //       }\n\t  //       proc = newProc;\n\t  //       str  += '---';\n\t  //     }\n\t  //     var newProc = proc + p.duration;\n\t  //     if ( time > proc && time < newProc ) {\n\t  //       procStr += '  ^   ';\n\t  //     } else if (time === proc) {\n\t  //       procStr += '^     ';\n\t  //     } else if (time === newProc) {\n\t  //       procStr += '    ^ ';\n\t  //     } else {\n\t  //       procStr += '      ';\n\t  //     }\n\t  //     proc = newProc;\n\t  //     str += '=====|';\n\t  //   }\n\n\t  //   console.log(str);\n\t  //   console.log(procStr);\n\t  // }\n\n\n\t  return Tween;\n\t}(_module2.default);\n\n\texports.default = Tween;\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\t__webpack_require__(103);\n\n\t__webpack_require__(104);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Tweener = function () {\n\t  function Tweener() {\n\t    (0, _classCallCheck3.default)(this, Tweener);\n\n\t    this._vars();\n\t    this._listenVisibilityChange();\n\t    return this;\n\t  }\n\n\t  Tweener.prototype._vars = function _vars() {\n\t    this.tweens = [];\n\t    this._savedTweens = [];\n\t    this._loop = this._loop.bind(this);\n\t    this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\t  };\n\t  /*\n\t    Main animation loop. Should have only one concurrent loop.\n\t    @private\n\t    @returns this\n\t  */\n\n\n\t  Tweener.prototype._loop = function _loop() {\n\t    if (!this._isRunning) {\n\t      return false;\n\t    }\n\t    this._update(window.performance.now());\n\t    if (!this.tweens.length) {\n\t      return this._isRunning = false;\n\t    }\n\t    requestAnimationFrame(this._loop);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to start animation loop.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._startLoop = function _startLoop() {\n\t    if (this._isRunning) {\n\t      return;\n\t    };this._isRunning = true;\n\t    requestAnimationFrame(this._loop);\n\t  };\n\t  /*\n\t    Method to stop animation loop.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._stopLoop = function _stopLoop() {\n\t    this._isRunning = false;\n\t  };\n\t  /*\n\t    Method to update every tween/timeline on animation frame.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._update = function _update(time) {\n\t    var i = this.tweens.length;\n\t    while (i--) {\n\t      // cache the current tween\n\t      var tween = this.tweens[i];\n\t      if (tween && tween._update(time) === true) {\n\t        this.remove(tween);\n\t        tween._onTweenerFinish();\n\t        tween._prevTime = undefined;\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to add a Tween/Timeline to loop pool.\n\t    @param {Object} Tween/Timeline to add.\n\t  */\n\n\n\t  Tweener.prototype.add = function add(tween) {\n\t    // return if tween is already running\n\t    if (tween._isRunning) {\n\t      return;\n\t    }\n\t    tween._isRunning = true;\n\t    this.tweens.push(tween);\n\t    this._startLoop();\n\t  };\n\t  /*\n\t    Method stop updating all the child tweens/timelines.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype.removeAll = function removeAll() {\n\t    this.tweens.length = 0;\n\t  };\n\t  /*\n\t    Method to remove specific tween/timeline form updating.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype.remove = function remove(tween) {\n\t    var index = typeof tween === 'number' ? tween : this.tweens.indexOf(tween);\n\n\t    if (index !== -1) {\n\t      tween = this.tweens[index];\n\t      if (tween) {\n\t        tween._isRunning = false;\n\t        this.tweens.splice(index, 1);\n\t        tween._onTweenerRemove();\n\t      }\n\t    }\n\t  };\n\n\t  /*\n\t    Method to initialize event listeners to visibility change events.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._listenVisibilityChange = function _listenVisibilityChange() {\n\t    if (typeof document.hidden !== \"undefined\") {\n\t      this._visibilityHidden = \"hidden\";\n\t      this._visibilityChange = \"visibilitychange\";\n\t    } else if (typeof document.mozHidden !== \"undefined\") {\n\t      this._visibilityHidden = \"mozHidden\";\n\t      this._visibilityChange = \"mozvisibilitychange\";\n\t    } else if (typeof document.msHidden !== \"undefined\") {\n\t      this._visibilityHidden = \"msHidden\";\n\t      this._visibilityChange = \"msvisibilitychange\";\n\t    } else if (typeof document.webkitHidden !== \"undefined\") {\n\t      this._visibilityHidden = \"webkitHidden\";\n\t      this._visibilityChange = \"webkitvisibilitychange\";\n\t    }\n\n\t    document.addEventListener(this._visibilityChange, this._onVisibilityChange, false);\n\t  };\n\t  /*\n\t    Method that will fire on visibility change.\n\t  */\n\n\n\t  Tweener.prototype._onVisibilityChange = function _onVisibilityChange() {\n\t    if (document[this._visibilityHidden]) {\n\t      this._savePlayingTweens();\n\t    } else {\n\t      this._restorePlayingTweens();\n\t    }\n\t  };\n\t  /*\n\t    Method to save all playing tweens.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._savePlayingTweens = function _savePlayingTweens() {\n\t    this._savedTweens = this.tweens.slice(0);\n\t    for (var i = 0; i < this._savedTweens.length; i++) {\n\t      this._savedTweens[i].pause();\n\t    }\n\t  };\n\t  /*\n\t    Method to restore all playing tweens.\n\t    @private\n\t  */\n\n\n\t  Tweener.prototype._restorePlayingTweens = function _restorePlayingTweens() {\n\t    for (var i = 0; i < this._savedTweens.length; i++) {\n\t      this._savedTweens[i].resume();\n\t    }\n\t  };\n\n\t  return Tweener;\n\t}();\n\n\tvar t = new Tweener();\n\texports.default = t;\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports) {\n\n\t\n\t/* istanbul ignore next */\n\t(function() {\n\t  'use strict';\n\t  var cancel, i, isOldBrowser, lastTime, vendors, vp, w;\n\t  vendors = ['webkit', 'moz'];\n\t  i = 0;\n\t  w = window;\n\t  while (i < vendors.length && !w.requestAnimationFrame) {\n\t    vp = vendors[i];\n\t    w.requestAnimationFrame = w[vp + 'RequestAnimationFrame'];\n\t    cancel = w[vp + 'CancelAnimationFrame'];\n\t    w.cancelAnimationFrame = cancel || w[vp + 'CancelRequestAnimationFrame'];\n\t    ++i;\n\t  }\n\t  isOldBrowser = !w.requestAnimationFrame || !w.cancelAnimationFrame;\n\t  if (/iP(ad|hone|od).*OS 6/.test(w.navigator.userAgent) || isOldBrowser) {\n\t    lastTime = 0;\n\t    w.requestAnimationFrame = function(callback) {\n\t      var nextTime, now;\n\t      now = Date.now();\n\t      nextTime = Math.max(lastTime + 16, now);\n\t      return setTimeout((function() {\n\t        callback(lastTime = nextTime);\n\t      }), nextTime - now);\n\t    };\n\t    w.cancelAnimationFrame = clearTimeout;\n\t  }\n\t})();\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports) {\n\n\t\n\t/* istanbul ignore next */\n\t(function(root) {\n\t  var offset, ref, ref1;\n\t  if (root.performance == null) {\n\t    root.performance = {};\n\t  }\n\t  Date.now = Date.now || function() {\n\t    return (new Date).getTime();\n\t  };\n\t  if (root.performance.now == null) {\n\t    offset = ((ref = root.performance) != null ? (ref1 = ref.timing) != null ? ref1.navigationStart : void 0 : void 0) ? performance.timing.navigationStart : Date.now();\n\t    return root.performance.now = function() {\n\t      return Date.now() - offset;\n\t    };\n\t  }\n\t})(window);\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Easing, PI, PathEasing, approximate, bezier, easing, h, mix, sin;\n\n\tbezier = __webpack_require__(106);\n\n\tPathEasing = __webpack_require__(107);\n\n\tmix = __webpack_require__(108);\n\n\th = __webpack_require__(71);\n\n\tapproximate = __webpack_require__(109)[\"default\"] || __webpack_require__(109);\n\n\tsin = Math.sin;\n\n\tPI = Math.PI;\n\n\tEasing = (function() {\n\t  function Easing() {}\n\n\t  Easing.prototype.bezier = bezier;\n\n\t  Easing.prototype.PathEasing = PathEasing;\n\n\t  Easing.prototype.path = (new PathEasing('creator')).create;\n\n\t  Easing.prototype.approximate = approximate;\n\n\t  Easing.prototype.inverse = function(p) {\n\t    return 1 - p;\n\t  };\n\n\t  Easing.prototype.linear = {\n\t    none: function(k) {\n\t      return k;\n\t    }\n\t  };\n\n\t  Easing.prototype.ease = {\n\t    \"in\": bezier.apply(Easing, [0.42, 0, 1, 1]),\n\t    out: bezier.apply(Easing, [0, 0, 0.58, 1]),\n\t    inout: bezier.apply(Easing, [0.42, 0, 0.58, 1])\n\t  };\n\n\t  Easing.prototype.sin = {\n\t    \"in\": function(k) {\n\t      return 1 - Math.cos(k * PI / 2);\n\t    },\n\t    out: function(k) {\n\t      return sin(k * PI / 2);\n\t    },\n\t    inout: function(k) {\n\t      return 0.5 * (1 - Math.cos(PI * k));\n\t    }\n\t  };\n\n\t  Easing.prototype.quad = {\n\t    \"in\": function(k) {\n\t      return k * k;\n\t    },\n\t    out: function(k) {\n\t      return k * (2 - k);\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * k * k;\n\t      }\n\t      return -0.5 * (--k * (k - 2) - 1);\n\t    }\n\t  };\n\n\t  Easing.prototype.cubic = {\n\t    \"in\": function(k) {\n\t      return k * k * k;\n\t    },\n\t    out: function(k) {\n\t      return --k * k * k + 1;\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * k * k * k;\n\t      }\n\t      return 0.5 * ((k -= 2) * k * k + 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.quart = {\n\t    \"in\": function(k) {\n\t      return k * k * k * k;\n\t    },\n\t    out: function(k) {\n\t      return 1 - (--k * k * k * k);\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * k * k * k * k;\n\t      }\n\t      return -0.5 * ((k -= 2) * k * k * k - 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.quint = {\n\t    \"in\": function(k) {\n\t      return k * k * k * k * k;\n\t    },\n\t    out: function(k) {\n\t      return --k * k * k * k * k + 1;\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * k * k * k * k * k;\n\t      }\n\t      return 0.5 * ((k -= 2) * k * k * k * k + 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.expo = {\n\t    \"in\": function(k) {\n\t      if (k === 0) {\n\t        return 0;\n\t      } else {\n\t        return Math.pow(1024, k - 1);\n\t      }\n\t    },\n\t    out: function(k) {\n\t      if (k === 1) {\n\t        return 1;\n\t      } else {\n\t        return 1 - Math.pow(2, -10 * k);\n\t      }\n\t    },\n\t    inout: function(k) {\n\t      if (k === 0) {\n\t        return 0;\n\t      }\n\t      if (k === 1) {\n\t        return 1;\n\t      }\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * Math.pow(1024, k - 1);\n\t      }\n\t      return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.circ = {\n\t    \"in\": function(k) {\n\t      return 1 - Math.sqrt(1 - k * k);\n\t    },\n\t    out: function(k) {\n\t      return Math.sqrt(1 - (--k * k));\n\t    },\n\t    inout: function(k) {\n\t      if ((k *= 2) < 1) {\n\t        return -0.5 * (Math.sqrt(1 - k * k) - 1);\n\t      }\n\t      return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\t    }\n\t  };\n\n\t  Easing.prototype.back = {\n\t    \"in\": function(k) {\n\t      var s;\n\t      s = 1.70158;\n\t      return k * k * ((s + 1) * k - s);\n\t    },\n\t    out: function(k) {\n\t      var s;\n\t      s = 1.70158;\n\t      return --k * k * ((s + 1) * k + s) + 1;\n\t    },\n\t    inout: function(k) {\n\t      var s;\n\t      s = 1.70158 * 1.525;\n\t      if ((k *= 2) < 1) {\n\t        return 0.5 * (k * k * ((s + 1) * k - s));\n\t      }\n\t      return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\t    }\n\t  };\n\n\t  Easing.prototype.elastic = {\n\t    \"in\": function(k) {\n\t      var a, p, s;\n\t      s = void 0;\n\t      p = 0.4;\n\t      if (k === 0) {\n\t        return 0;\n\t      }\n\t      if (k === 1) {\n\t        return 1;\n\t      }\n\t      a = 1;\n\t      s = p / 4;\n\t      return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n\t    },\n\t    out: function(k) {\n\t      var a, p, s;\n\t      s = void 0;\n\t      p = 0.4;\n\t      if (k === 0) {\n\t        return 0;\n\t      }\n\t      if (k === 1) {\n\t        return 1;\n\t      }\n\t      a = 1;\n\t      s = p / 4;\n\t      return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;\n\t    },\n\t    inout: function(k) {\n\t      var a, p, s;\n\t      s = void 0;\n\t      p = 0.4;\n\t      if (k === 0) {\n\t        return 0;\n\t      }\n\t      if (k === 1) {\n\t        return 1;\n\t      }\n\t      a = 1;\n\t      s = p / 4;\n\t      if ((k *= 2) < 1) {\n\t        return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n\t      }\n\t      return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t    }\n\t  };\n\n\t  Easing.prototype.bounce = {\n\t    \"in\": function(k) {\n\t      return 1 - easing.bounce.out(1 - k);\n\t    },\n\t    out: function(k) {\n\t      if (k < (1 / 2.75)) {\n\t        return 7.5625 * k * k;\n\t      } else if (k < (2 / 2.75)) {\n\t        return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n\t      } else if (k < (2.5 / 2.75)) {\n\t        return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n\t      } else {\n\t        return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n\t      }\n\t    },\n\t    inout: function(k) {\n\t      if (k < 0.5) {\n\t        return easing.bounce[\"in\"](k * 2) * 0.5;\n\t      }\n\t      return easing.bounce.out(k * 2 - 1) * 0.5 + 0.5;\n\t    }\n\t  };\n\n\t  Easing.prototype.parseEasing = function(easing) {\n\t    var easingParent, type;\n\t    if (easing == null) {\n\t      easing = 'linear.none';\n\t    }\n\t    type = typeof easing;\n\t    if (type === 'string') {\n\t      if (easing.charAt(0).toLowerCase() === 'm') {\n\t        return this.path(easing);\n\t      } else {\n\t        easing = this._splitEasing(easing);\n\t        easingParent = this[easing[0]];\n\t        if (!easingParent) {\n\t          h.error(\"Easing with name \\\"\" + easing[0] + \"\\\" was not found, fallback to \\\"linear.none\\\" instead\");\n\t          return this['linear']['none'];\n\t        }\n\t        return easingParent[easing[1]];\n\t      }\n\t    }\n\t    if (h.isArray(easing)) {\n\t      return this.bezier.apply(this, easing);\n\t    }\n\t    if ('function') {\n\t      return easing;\n\t    }\n\t  };\n\n\t  Easing.prototype._splitEasing = function(string) {\n\t    var firstPart, secondPart, split;\n\t    if (typeof string === 'function') {\n\t      return string;\n\t    }\n\t    if (typeof string === 'string' && string.length) {\n\t      split = string.split('.');\n\t      firstPart = split[0].toLowerCase() || 'linear';\n\t      secondPart = split[1].toLowerCase() || 'none';\n\t      return [firstPart, secondPart];\n\t    } else {\n\t      return ['linear', 'none'];\n\t    }\n\t  };\n\n\t  return Easing;\n\n\t})();\n\n\teasing = new Easing;\n\n\teasing.mix = mix(easing);\n\n\tmodule.exports = easing;\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {var BezierEasing, bezierEasing, h,\n\t  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n\th = __webpack_require__(71);\n\n\n\t/**\n\t * Copyright (c) 2014 Gaëtan Renaudeau http://goo.gl/El3k7u\n\t * Adopted from https://github.com/gre/bezier-easing\n\t */\n\n\tBezierEasing = (function() {\n\t  function BezierEasing(o) {\n\t    this.vars();\n\t    return this.generate;\n\t  }\n\n\t  BezierEasing.prototype.vars = function() {\n\t    return this.generate = h.bind(this.generate, this);\n\t  };\n\n\t  BezierEasing.prototype.generate = function(mX1, mY1, mX2, mY2) {\n\t    var A, B, C, NEWTON_ITERATIONS, NEWTON_MIN_SLOPE, SUBDIVISION_MAX_ITERATIONS, SUBDIVISION_PRECISION, _precomputed, arg, binarySubdivide, calcBezier, calcSampleValues, f, float32ArraySupported, getSlope, getTForX, i, j, kSampleStepSize, kSplineTableSize, mSampleValues, newtonRaphsonIterate, precompute, str;\n\t    if (arguments.length < 4) {\n\t      return this.error('Bezier function expects 4 arguments');\n\t    }\n\t    for (i = j = 0; j < 4; i = ++j) {\n\t      arg = arguments[i];\n\t      if (typeof arg !== \"number\" || isNaN(arg) || !isFinite(arg)) {\n\t        return this.error('Bezier function expects 4 arguments');\n\t      }\n\t    }\n\t    if (mX1 < 0 || mX1 > 1 || mX2 < 0 || mX2 > 1) {\n\t      return this.error('Bezier x values should be > 0 and < 1');\n\t    }\n\t    NEWTON_ITERATIONS = 4;\n\t    NEWTON_MIN_SLOPE = 0.001;\n\t    SUBDIVISION_PRECISION = 0.0000001;\n\t    SUBDIVISION_MAX_ITERATIONS = 10;\n\t    kSplineTableSize = 11;\n\t    kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\t    float32ArraySupported = indexOf.call(global, 'Float32Array') >= 0;\n\t    A = function(aA1, aA2) {\n\t      return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n\t    };\n\t    B = function(aA1, aA2) {\n\t      return 3.0 * aA2 - 6.0 * aA1;\n\t    };\n\t    C = function(aA1) {\n\t      return 3.0 * aA1;\n\t    };\n\t    calcBezier = function(aT, aA1, aA2) {\n\t      return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n\t    };\n\t    getSlope = function(aT, aA1, aA2) {\n\t      return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n\t    };\n\t    newtonRaphsonIterate = function(aX, aGuessT) {\n\t      var currentSlope, currentX;\n\t      i = 0;\n\t      while (i < NEWTON_ITERATIONS) {\n\t        currentSlope = getSlope(aGuessT, mX1, mX2);\n\n\t        /* istanbul ignore if */\n\t        if (currentSlope === 0.0) {\n\t          return aGuessT;\n\t        }\n\t        currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n\t        aGuessT -= currentX / currentSlope;\n\t        ++i;\n\t      }\n\t      return aGuessT;\n\t    };\n\t    calcSampleValues = function() {\n\t      i = 0;\n\t      while (i < kSplineTableSize) {\n\t        mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n\t        ++i;\n\t      }\n\t    };\n\n\t    /* istanbul ignore next */\n\t    binarySubdivide = function(aX, aA, aB) {\n\t      var currentT, currentX, isBig;\n\t      currentX = void 0;\n\t      currentT = void 0;\n\t      i = 0;\n\t      while (true) {\n\t        currentT = aA + (aB - aA) / 2.0;\n\t        currentX = calcBezier(currentT, mX1, mX2) - aX;\n\t        if (currentX > 0.0) {\n\t          aB = currentT;\n\t        } else {\n\t          aA = currentT;\n\t        }\n\t        isBig = Math.abs(currentX) > SUBDIVISION_PRECISION;\n\t        if (!(isBig && ++i < SUBDIVISION_MAX_ITERATIONS)) {\n\t          break;\n\t        }\n\t      }\n\t      return currentT;\n\t    };\n\t    getTForX = function(aX) {\n\t      var currentSample, delta, dist, guessForT, initialSlope, intervalStart, lastSample;\n\t      intervalStart = 0.0;\n\t      currentSample = 1;\n\t      lastSample = kSplineTableSize - 1;\n\t      while (currentSample !== lastSample && mSampleValues[currentSample] <= aX) {\n\t        intervalStart += kSampleStepSize;\n\t        ++currentSample;\n\t      }\n\t      --currentSample;\n\t      delta = mSampleValues[currentSample + 1] - mSampleValues[currentSample];\n\t      dist = (aX - mSampleValues[currentSample]) / delta;\n\t      guessForT = intervalStart + dist * kSampleStepSize;\n\t      initialSlope = getSlope(guessForT, mX1, mX2);\n\t      if (initialSlope >= NEWTON_MIN_SLOPE) {\n\t        return newtonRaphsonIterate(aX, guessForT);\n\t      } else {\n\n\t        /* istanbul ignore next */\n\t        if (initialSlope === 0.0) {\n\t          return guessForT;\n\t        } else {\n\t          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);\n\t        }\n\t      }\n\t    };\n\t    precompute = function() {\n\t      var _precomputed;\n\t      _precomputed = true;\n\t      if (mX1 !== mY1 || mX2 !== mY2) {\n\t        return calcSampleValues();\n\t      }\n\t    };\n\t    mSampleValues = !float32ArraySupported ? new Array(kSplineTableSize) : new Float32Array(kSplineTableSize);\n\t    _precomputed = false;\n\t    f = function(aX) {\n\t      if (!_precomputed) {\n\t        precompute();\n\t      }\n\t      if (mX1 === mY1 && mX2 === mY2) {\n\t        return aX;\n\t      }\n\t      if (aX === 0) {\n\t        return 0;\n\t      }\n\t      if (aX === 1) {\n\t        return 1;\n\t      }\n\t      return calcBezier(getTForX(aX), mY1, mY2);\n\t    };\n\t    str = \"bezier(\" + [mX1, mY1, mX2, mY2] + \")\";\n\t    f.toStr = function() {\n\t      return str;\n\t    };\n\t    return f;\n\t  };\n\n\t  BezierEasing.prototype.error = function(msg) {\n\t    return h.error(msg);\n\t  };\n\n\t  return BezierEasing;\n\n\t})();\n\n\tbezierEasing = new BezierEasing;\n\n\tmodule.exports = bezierEasing;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar PathEasing, h;\n\n\th = __webpack_require__(71);\n\n\tPathEasing = (function() {\n\t  PathEasing.prototype._vars = function() {\n\t    this._precompute = h.clamp(this.o.precompute || 1450, 100, 10000);\n\t    this._step = 1 / this._precompute;\n\t    this._rect = this.o.rect || 100;\n\t    this._approximateMax = this.o.approximateMax || 5;\n\t    this._eps = this.o.eps || 0.001;\n\t    return this._boundsPrevProgress = -1;\n\t  };\n\n\t  function PathEasing(path, o1) {\n\t    this.o = o1 != null ? o1 : {};\n\t    if (path === 'creator') {\n\t      return;\n\t    }\n\t    this.path = h.parsePath(path);\n\t    if (this.path == null) {\n\t      return h.error('Error while parsing the path');\n\t    }\n\t    this._vars();\n\t    this.path.setAttribute('d', this._normalizePath(this.path.getAttribute('d')));\n\t    this.pathLength = this.path.getTotalLength();\n\t    this.sample = h.bind(this.sample, this);\n\t    this._hardSample = h.bind(this._hardSample, this);\n\t    this._preSample();\n\t    this;\n\t  }\n\n\t  PathEasing.prototype._preSample = function() {\n\t    var i, j, length, point, progress, ref, results;\n\t    this._samples = [];\n\t    results = [];\n\t    for (i = j = 0, ref = this._precompute; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n\t      progress = i * this._step;\n\t      length = this.pathLength * progress;\n\t      point = this.path.getPointAtLength(length);\n\t      results.push(this._samples[i] = {\n\t        point: point,\n\t        length: length,\n\t        progress: progress\n\t      });\n\t    }\n\t    return results;\n\t  };\n\n\t  PathEasing.prototype._findBounds = function(array, p) {\n\t    var buffer, direction, end, i, j, len, loopEnd, pointP, pointX, ref, ref1, start, value;\n\t    if (p === this._boundsPrevProgress) {\n\t      return this._prevBounds;\n\t    }\n\t    if (this._boundsStartIndex == null) {\n\t      this._boundsStartIndex = 0;\n\t    }\n\t    len = array.length;\n\t    if (this._boundsPrevProgress > p) {\n\t      loopEnd = 0;\n\t      direction = 'reverse';\n\t    } else {\n\t      loopEnd = len;\n\t      direction = 'forward';\n\t    }\n\t    if (direction === 'forward') {\n\t      start = array[0];\n\t      end = array[array.length - 1];\n\t    } else {\n\t      start = array[array.length - 1];\n\t      end = array[0];\n\t    }\n\t    for (i = j = ref = this._boundsStartIndex, ref1 = loopEnd; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {\n\t      value = array[i];\n\t      pointX = value.point.x / this._rect;\n\t      pointP = p;\n\t      if (direction === 'reverse') {\n\t        buffer = pointX;\n\t        pointX = pointP;\n\t        pointP = buffer;\n\t      }\n\t      if (pointX < pointP) {\n\t        start = value;\n\t        this._boundsStartIndex = i;\n\t      } else {\n\t        end = value;\n\t        break;\n\t      }\n\t    }\n\t    this._boundsPrevProgress = p;\n\t    return this._prevBounds = {\n\t      start: start,\n\t      end: end\n\t    };\n\t  };\n\n\t  PathEasing.prototype.sample = function(p) {\n\t    var bounds, res;\n\t    p = h.clamp(p, 0, 1);\n\t    bounds = this._findBounds(this._samples, p);\n\t    res = this._checkIfBoundsCloseEnough(p, bounds);\n\t    if (res != null) {\n\t      return res;\n\t    }\n\t    return this._findApproximate(p, bounds.start, bounds.end);\n\t  };\n\n\t  PathEasing.prototype._checkIfBoundsCloseEnough = function(p, bounds) {\n\t    var point, y;\n\t    point = void 0;\n\t    y = this._checkIfPointCloseEnough(p, bounds.start.point);\n\t    if (y != null) {\n\t      return y;\n\t    }\n\t    return this._checkIfPointCloseEnough(p, bounds.end.point);\n\t  };\n\n\t  PathEasing.prototype._checkIfPointCloseEnough = function(p, point) {\n\t    if (h.closeEnough(p, point.x / this._rect, this._eps)) {\n\t      return this._resolveY(point);\n\t    }\n\t  };\n\n\t  PathEasing.prototype._approximate = function(start, end, p) {\n\t    var deltaP, percentP;\n\t    deltaP = end.point.x - start.point.x;\n\t    percentP = (p - (start.point.x / this._rect)) / (deltaP / this._rect);\n\t    return start.length + percentP * (end.length - start.length);\n\t  };\n\n\t  PathEasing.prototype._findApproximate = function(p, start, end, approximateMax) {\n\t    var approximation, args, newPoint, point, x;\n\t    if (approximateMax == null) {\n\t      approximateMax = this._approximateMax;\n\t    }\n\t    approximation = this._approximate(start, end, p);\n\t    point = this.path.getPointAtLength(approximation);\n\t    x = point.x / this._rect;\n\t    if (h.closeEnough(p, x, this._eps)) {\n\t      return this._resolveY(point);\n\t    } else {\n\t      if (--approximateMax < 1) {\n\t        return this._resolveY(point);\n\t      }\n\t      newPoint = {\n\t        point: point,\n\t        length: approximation\n\t      };\n\t      args = p < x ? [p, start, newPoint, approximateMax] : [p, newPoint, end, approximateMax];\n\t      return this._findApproximate.apply(this, args);\n\t    }\n\t  };\n\n\t  PathEasing.prototype._resolveY = function(point) {\n\t    return 1 - (point.y / this._rect);\n\t  };\n\n\t  PathEasing.prototype._normalizePath = function(path) {\n\t    var commands, endIndex, normalizedPath, points, startIndex, svgCommandsRegexp;\n\t    svgCommandsRegexp = /[M|L|H|V|C|S|Q|T|A]/gim;\n\t    points = path.split(svgCommandsRegexp);\n\t    points.shift();\n\t    commands = path.match(svgCommandsRegexp);\n\t    startIndex = 0;\n\t    points[startIndex] = this._normalizeSegment(points[startIndex]);\n\t    endIndex = points.length - 1;\n\t    points[endIndex] = this._normalizeSegment(points[endIndex], this._rect || 100);\n\t    return normalizedPath = this._joinNormalizedPath(commands, points);\n\t  };\n\n\t  PathEasing.prototype._joinNormalizedPath = function(commands, points) {\n\t    var command, i, j, len1, normalizedPath, space;\n\t    normalizedPath = '';\n\t    for (i = j = 0, len1 = commands.length; j < len1; i = ++j) {\n\t      command = commands[i];\n\t      space = i === 0 ? '' : ' ';\n\t      normalizedPath += \"\" + space + command + (points[i].trim());\n\t    }\n\t    return normalizedPath;\n\t  };\n\n\t  PathEasing.prototype._normalizeSegment = function(segment, value) {\n\t    var i, j, lastPoint, len1, nRgx, pairs, parsedX, point, space, x;\n\t    if (value == null) {\n\t      value = 0;\n\t    }\n\t    segment = segment.trim();\n\t    nRgx = /(-|\\+)?((\\d+(\\.(\\d|\\e(-|\\+)?)+)?)|(\\.?(\\d|\\e|(\\-|\\+))+))/gim;\n\t    pairs = this._getSegmentPairs(segment.match(nRgx));\n\t    lastPoint = pairs[pairs.length - 1];\n\t    x = lastPoint[0];\n\t    parsedX = Number(x);\n\t    if (parsedX !== value) {\n\t      segment = '';\n\t      lastPoint[0] = value;\n\t      for (i = j = 0, len1 = pairs.length; j < len1; i = ++j) {\n\t        point = pairs[i];\n\t        space = i === 0 ? '' : ' ';\n\t        segment += \"\" + space + point[0] + \",\" + point[1];\n\t      }\n\t    }\n\t    return segment;\n\t  };\n\n\t  PathEasing.prototype._getSegmentPairs = function(array) {\n\t    var i, j, len1, newArray, pair, value;\n\t    if (array.length % 2 !== 0) {\n\t      h.error('Failed to parse the path - segment pairs are not even.', array);\n\t    }\n\t    newArray = [];\n\t    for (i = j = 0, len1 = array.length; j < len1; i = j += 2) {\n\t      value = array[i];\n\t      pair = [array[i], array[i + 1]];\n\t      newArray.push(pair);\n\t    }\n\t    return newArray;\n\t  };\n\n\t  PathEasing.prototype.create = function(path, o) {\n\t    var handler;\n\t    handler = new PathEasing(path, o);\n\t    handler.sample.path = handler.path;\n\t    return handler.sample;\n\t  };\n\n\t  return PathEasing;\n\n\t})();\n\n\tmodule.exports = PathEasing;\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports) {\n\n\tvar create, easing, getNearest, mix, parseIfEasing, sort,\n\t  slice = [].slice;\n\n\teasing = null;\n\n\tparseIfEasing = function(item) {\n\t  if (typeof item.value === 'number') {\n\t    return item.value;\n\t  } else {\n\t    return easing.parseEasing(item.value);\n\t  }\n\t};\n\n\tsort = function(a, b) {\n\t  var returnValue;\n\t  a.value = parseIfEasing(a);\n\t  b.value = parseIfEasing(b);\n\t  returnValue = 0;\n\t  a.to < b.to && (returnValue = -1);\n\t  a.to > b.to && (returnValue = 1);\n\t  return returnValue;\n\t};\n\n\tgetNearest = function(array, progress) {\n\t  var i, index, j, len, value;\n\t  index = 0;\n\t  for (i = j = 0, len = array.length; j < len; i = ++j) {\n\t    value = array[i];\n\t    index = i;\n\t    if (value.to > progress) {\n\t      break;\n\t    }\n\t  }\n\t  return index;\n\t};\n\n\tmix = function() {\n\t  var args;\n\t  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n\t  if (args.length > 1) {\n\t    args = args.sort(sort);\n\t  } else {\n\t    args[0].value = parseIfEasing(args[0]);\n\t  }\n\t  return function(progress) {\n\t    var index, value;\n\t    index = getNearest(args, progress);\n\t    if (index !== -1) {\n\t      value = args[index].value;\n\t      if (index === args.length - 1 && progress > args[index].to) {\n\t        return 1;\n\t      }\n\t      if (typeof value === 'function') {\n\t        return value(progress);\n\t      } else {\n\t        return value;\n\t      }\n\t    }\n\t  };\n\t};\n\n\tcreate = function(e) {\n\t  easing = e;\n\t  return mix;\n\t};\n\n\tmodule.exports = create;\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _typeof2 = __webpack_require__(3);\n\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  Method to bootstrap approximation function.\n\t  @private\n\t  @param   {Object} Samples Object.\n\t  @returns {Function} Approximate function.\n\t*/\n\tvar _proximate = function _proximate(samples) {\n\t  var n = samples.base,\n\t      samplesAmount = Math.pow(10, n),\n\t      samplesStep = 1 / samplesAmount;\n\n\t  function RoundNumber(input, numberDecimals) {\n\t    numberDecimals = +numberDecimals || 0; // +var magic!\n\n\t    var multiplyer = Math.pow(10.0, numberDecimals);\n\n\t    return Math.round(input * multiplyer) / multiplyer;\n\t  }\n\n\t  var cached = function cached(p) {\n\t    var newKey = RoundNumber(p, n),\n\t        sample = samples[newKey.toString()];\n\n\t    if (Math.abs(p - newKey) < samplesStep) {\n\t      return sample;\n\t    }\n\n\t    if (p > newKey) {\n\t      var nextIndex = newKey + samplesStep;\n\t      var nextValue = samples[nextIndex];\n\t    } else {\n\t      var nextIndex = newKey - samplesStep;\n\t      var nextValue = samples[nextIndex];\n\t    }\n\n\t    var dLength = nextIndex - newKey;\n\t    var dValue = nextValue - sample;\n\t    if (dValue < samplesStep) {\n\t      return sample;\n\t    }\n\n\t    var progressScale = (p - newKey) / dLength;\n\t    var coef = nextValue > sample ? -1 : 1;\n\t    var scaledDifference = coef * progressScale * dValue;\n\n\t    return sample + scaledDifference;\n\t  };\n\n\t  cached.getSamples = function () {\n\t    return samples;\n\t  };\n\n\t  return cached;\n\t};\n\t/*\n\t    Method to take samples of the function and call the _proximate\n\t    method with the dunction and samples. Or if samples passed - pipe\n\t    them to the _proximate method without sampling.\n\t    @private\n\t    @param {Function} Function to sample.\n\t    @param {Number, Object, String} Precision or precomputed samples.\n\t  */\n\tvar _sample = function _sample(fn) {\n\t  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\n\n\t  var nType = typeof n === 'undefined' ? 'undefined' : (0, _typeof3.default)(n);\n\n\t  var samples = {};\n\t  if (nType === 'number') {\n\t    var p = 0,\n\t        samplesCount = Math.pow(10, n),\n\t        step = 1 / samplesCount;\n\n\t    samples[0] = fn(0);\n\t    for (var i = 0; i < samplesCount - 1; i++) {\n\t      p += step;\n\n\t      var index = parseFloat(p.toFixed(n));\n\t      samples[index] = fn(p);\n\t    }\n\t    samples[1] = fn(1);\n\n\t    samples.base = n;\n\t  } else if (nType === 'object') {\n\t    samples = n;\n\t  } else if (nType === 'string') {\n\t    samples = JSON.parse(n);\n\t  }\n\n\t  return Approximate._sample._proximate(samples);\n\t};\n\n\tvar Approximate = { _sample: _sample, _proximate: _proximate };\n\tApproximate._sample._proximate = Approximate._proximate;\n\n\texports.default = Approximate._sample;\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _getIterator2 = __webpack_require__(111);\n\n\tvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _tweener = __webpack_require__(102);\n\n\tvar _tweener2 = _interopRequireDefault(_tweener);\n\n\tvar _tween = __webpack_require__(101);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Timeline = function (_Tween) {\n\t  (0, _inherits3.default)(Timeline, _Tween);\n\n\t  /*\n\t    API method to add child tweens/timelines.\n\t    @public\n\t    @param {Object, Array} Tween/Timeline or an array of such.\n\t    @returns {Object} Self.\n\t  */\n\t  Timeline.prototype.add = function add() {\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this._pushTimelineArray(args);\n\t    this._calcDimentions();\n\t    return this;\n\t  };\n\t  /*\n\t    API method to append the Tween/Timeline to the end of the\n\t    timeline. Each argument is treated as a new append.\n\t    Array of tweens is treated as a parallel sequence. \n\t    @public\n\t    @param {Object, Array} Tween/Timeline to append or array of such.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Timeline.prototype.append = function append() {\n\t    for (var _len2 = arguments.length, timeline = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t      timeline[_key2] = arguments[_key2];\n\t    }\n\n\t    for (var _iterator = timeline, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n\t      var _ref;\n\n\t      if (_isArray) {\n\t        if (_i >= _iterator.length) break;\n\t        _ref = _iterator[_i++];\n\t      } else {\n\t        _i = _iterator.next();\n\t        if (_i.done) break;\n\t        _ref = _i.value;\n\t      }\n\n\t      var tm = _ref;\n\n\t      if (_h2.default.isArray(tm)) {\n\t        this._appendTimelineArray(tm);\n\t      } else {\n\t        this._appendTimeline(tm, this._timelines.length);\n\t      }\n\t      this._calcDimentions();\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    API method to stop the Tween.\n\t    @public\n\t    @param   {Number} Progress [0..1] to set when stopped.\n\t    @returns {Object} Self.\n\t  */\n\n\n\t  Timeline.prototype.stop = function stop(progress) {\n\t    _Tween.prototype.stop.call(this, progress);\n\t    this._stopChildren(progress);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to reset tween's state and properties.\n\t    @public\n\t    @overrides @ Tween\n\t    @returns this.\n\t  */\n\n\n\t  Timeline.prototype.reset = function reset() {\n\t    _Tween.prototype.reset.call(this);\n\t    this._resetChildren();\n\t    return this;\n\t  };\n\t  /*\n\t    Method to call `reset` method on all children.\n\t    @private\n\t  */\n\n\n\t  Timeline.prototype._resetChildren = function _resetChildren() {\n\t    for (var i = 0; i < this._timelines.length; i++) {\n\t      this._timelines[i].reset();\n\t    }\n\t  };\n\t  /*\n\t    Method to call `stop` method on all children.\n\t    @private\n\t    @param   {Number} Progress [0..1] to set when stopped.\n\t  */\n\n\n\t  Timeline.prototype._stopChildren = function _stopChildren(progress) {\n\t    for (var i = this._timelines.length - 1; i >= 0; i--) {\n\t      this._timelines[i].stop(progress);\n\t    }\n\t  };\n\t  /*\n\t    Method to set tween's state to complete.\n\t    @private\n\t    @overrides @ Tween\n\t    @param {Number} Current time.\n\t    @param {Boolean} Is yoyo period.\n\t  */\n\t  // _complete ( time, isYoyo ) {\n\t  //   // this._updateChildren( 1, time, isYoyo );\n\t  //   // this._setProgress( 1, time, isYoyo );\n\t  //   super._complete( time, isYoyo );\n\t  //   // this._resetChildren();\n\t  // }\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to append Tween/Timeline array or mix of such.\n\t    @private\n\t    @param {Array} Array of Tweens/Timelines.\n\t  */\n\n\n\t  Timeline.prototype._appendTimelineArray = function _appendTimelineArray(timelineArray) {\n\t    var i = timelineArray.length,\n\t        time = this._props.repeatTime - this._props.delay,\n\t        len = this._timelines.length;\n\n\t    while (i--) {\n\t      this._appendTimeline(timelineArray[i], len, time);\n\t    }\n\t  };\n\t  /*\n\t    Method to append a single timeline to the Timeline.\n\t    @private\n\t    @param {Object} Tween/Timline to append.\n\t    @param {Number} Index of the append.\n\t    @param {Number} Shift time.\n\t  */\n\n\n\t  Timeline.prototype._appendTimeline = function _appendTimeline(timeline, index, time) {\n\t    // if timeline is a module with timeline property then extract it\n\t    if (timeline.timeline instanceof Timeline) {\n\t      timeline = timeline.timeline;\n\t    }\n\t    if (timeline.tween instanceof _tween2.default) {\n\t      timeline = timeline.tween;\n\t    }\n\n\t    var shift = time != null ? time : this._props.duration;\n\t    shift += timeline._props.shiftTime || 0;\n\t    timeline.index = index;this._pushTimeline(timeline, shift);\n\t  };\n\t  /*\n\t    PrivateMethod to push Tween/Timeline array.\n\t    @private\n\t    @param {Array} Array of Tweens/Timelines.\n\t  */\n\n\n\t  Timeline.prototype._pushTimelineArray = function _pushTimelineArray(array) {\n\t    for (var i = 0; i < array.length; i++) {\n\t      var tm = array[i];\n\t      // recursive push to handle arrays of arrays\n\t      if (_h2.default.isArray(tm)) {\n\t        this._pushTimelineArray(tm);\n\t      } else {\n\t        this._pushTimeline(tm);\n\t      }\n\t    };\n\t  };\n\t  /*\n\t    Method to push a single Tween/Timeline.\n\t    @private\n\t    @param {Object} Tween or Timeline to push.\n\t    @param {Number} Number of milliseconds to shift the start time\n\t                    of the Tween/Timeline.\n\t  */\n\n\n\t  Timeline.prototype._pushTimeline = function _pushTimeline(timeline, shift) {\n\t    // if timeline is a module with timeline property then extract it\n\t    if (timeline.timeline instanceof Timeline) {\n\t      timeline = timeline.timeline;\n\t    }\n\t    if (timeline.tween instanceof _tween2.default) {\n\t      timeline = timeline.tween;\n\t    }\n\t    // add self delay to the timeline\n\t    shift != null && timeline._setProp({ 'shiftTime': shift });\n\t    this._timelines.push(timeline);\n\t    this._recalcDuration(timeline);\n\t  };\n\t  /*\n\t    Method set progress on self and child Tweens/Timelines.\n\t    @private\n\t    @param {Number} Progress to set.\n\t    @param {Number} Current update time.\n\t  */\n\n\n\t  Timeline.prototype._setProgress = function _setProgress(p, time, isYoyo) {\n\t    // we need to pass self previous time to children\n\t    // to prevent initial _wasUnknownUpdate nested waterfall\n\t    // if not yoyo option set, pass the previous time\n\t    // otherwise, pass previous or next time regarding yoyo period.\n\n\t    // COVER CURRENT SWAPPED ORDER\n\t    this._updateChildren(p, time, isYoyo);\n\n\t    _tween2.default.prototype._setProgress.call(this, p, time);\n\t  };\n\n\t  Timeline.prototype._updateChildren = function _updateChildren(p, time, isYoyo) {\n\t    var coef = time > this._prevTime ? -1 : 1;\n\t    if (this._props.isYoyo && isYoyo) {\n\t      coef *= -1;\n\t    }\n\t    var timeToTimelines = this._props.startTime + p * this._props.duration,\n\t        prevTimeToTimelines = timeToTimelines + coef,\n\t        len = this._timelines.length;\n\n\t    for (var i = 0; i < len; i++) {\n\t      // specify the children's array update loop direction\n\t      // if time > prevTime go from 0->length else from length->0\n\t      // var j = ( time > this._prevTime ) ? i : (len-1) - i ;\n\t      var j = timeToTimelines > prevTimeToTimelines ? i : len - 1 - i;\n\t      this._timelines[j]._update(timeToTimelines, prevTimeToTimelines, this._prevYoyo, this._onEdge);\n\t    }\n\t    this._prevYoyo = isYoyo;\n\t  };\n\t  /*\n\t    Method calculate self duration based on timeline's duration.\n\t    @private\n\t    @param {Object} Tween or Timeline to calculate.\n\t  */\n\n\n\t  Timeline.prototype._recalcDuration = function _recalcDuration(timeline) {\n\t    var p = timeline._props,\n\t        timelineTime = p.repeatTime / p.speed + (p.shiftTime || 0) + timeline._negativeShift;\n\n\t    this._props.duration = Math.max(timelineTime, this._props.duration);\n\t  };\n\t  /*\n\t    Method calculate self duration from skretch.\n\t    @private\n\t  */\n\n\n\t  Timeline.prototype._recalcTotalDuration = function _recalcTotalDuration() {\n\t    var i = this._timelines.length;\n\t    this._props.duration = 0;\n\t    while (i--) {\n\t      var tm = this._timelines[i];\n\t      // recalc total duration on child timelines\n\t      tm._recalcTotalDuration && tm._recalcTotalDuration();\n\t      // add the timeline's duration to selft duration\n\t      this._recalcDuration(tm);\n\t    }\n\t    this._calcDimentions();\n\t  };\n\t  /*\n\t    Method set start and end times.\n\t    @private\n\t    @param {Number, Null} Time to start with.\n\t  */\n\n\n\t  Timeline.prototype._setStartTime = function _setStartTime(time) {\n\t    var isReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n\t    _Tween.prototype._setStartTime.call(this, time);\n\t    this._startTimelines(this._props.startTime, isReset);\n\t  };\n\t  /*\n\t    Method calculate self duration based on timeline's duration.\n\t    @private\n\t    @param {Number, Null} Time to start with.\n\t  */\n\n\n\t  Timeline.prototype._startTimelines = function _startTimelines(time) {\n\t    var isReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n\t    var p = this._props,\n\t        isStop = this._state === 'stop';\n\n\t    time == null && (time = this._props.startTime);\n\n\t    for (var i = 0; i < this._timelines.length; i++) {\n\t      var tm = this._timelines[i];\n\t      tm._setStartTime(time, isReset);\n\t      // if from `_subPlay` and `_prevTime` is set and state is `stop`\n\t      // prevTime normalizing is for play/pause functionality, so no\n\t      // need to normalize if the timeline is in `stop` state.\n\t      if (!isReset && tm._prevTime != null && !isStop) {\n\t        tm._prevTime = tm._normPrevTimeForward();\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to launch onRefresh callback.\n\t    @method _refresh\n\t    @private\n\t    @overrides @ Tween\n\t    @param {Boolean} If refresh even before start time.\n\t  */\n\n\n\t  Timeline.prototype._refresh = function _refresh(isBefore) {\n\t    var len = this._timelines.length;\n\t    for (var i = 0; i < len; i++) {\n\t      this._timelines[i]._refresh(isBefore);\n\t    }\n\t    _Tween.prototype._refresh.call(this, isBefore);\n\t  };\n\t  /*\n\t    Method do declare defaults by this._defaults object\n\t    @private\n\t  */\n\n\n\t  Timeline.prototype._declareDefaults = function _declareDefaults() {\n\t    // if duration was passed on initialization stage, warn user and reset it.\n\t    if (this._o.duration != null) {\n\t      _h2.default.error('Duration can not be declared on Timeline, but \"' + this._o.duration + '\" is. You probably want to use Tween instead.');\n\t      this._o.duration = 0;\n\t    }\n\t    _Tween.prototype._declareDefaults.call(this);\n\t    // remove default \n\t    this._defaults.duration = 0;\n\t    this._defaults.easing = 'Linear.None';\n\t    this._defaults.backwardEasing = 'Linear.None';\n\t    this._defaults.nameBase = 'Timeline';\n\t  };\n\n\t  function Timeline() {\n\t    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t    (0, _classCallCheck3.default)(this, Timeline);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Tween.call(this, o));\n\t  }\n\t  /*\n\t    Method to declare some vars.\n\t    @private\n\t  */\n\n\n\t  Timeline.prototype._vars = function _vars() {\n\t    this._timelines = [];\n\t    _Tween.prototype._vars.call(this);\n\t  };\n\n\t  return Timeline;\n\t}(_tween2.default);\n\n\texports.default = Timeline;\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(112), __esModule: true };\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(50);\n\t__webpack_require__(6);\n\tmodule.exports = __webpack_require__(113);\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar anObject = __webpack_require__(19)\n\t  , get      = __webpack_require__(114);\n\tmodule.exports = __webpack_require__(14).getIterator = function(it){\n\t  var iterFn = get(it);\n\t  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');\n\t  return anObject(iterFn.call(it));\n\t};\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar classof   = __webpack_require__(115)\n\t  , ITERATOR  = __webpack_require__(47)('iterator')\n\t  , Iterators = __webpack_require__(29);\n\tmodule.exports = __webpack_require__(14).getIteratorMethod = function(it){\n\t  if(it != undefined)return it[ITERATOR]\n\t    || it['@@iterator']\n\t    || Iterators[classof(it)];\n\t};\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// getting tag from 19.1.3.6 Object.prototype.toString()\n\tvar cof = __webpack_require__(37)\n\t  , TAG = __webpack_require__(47)('toStringTag')\n\t  // ES3 wrong here\n\t  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n\t// fallback for IE11 Script Access Denied error\n\tvar tryGet = function(it, key){\n\t  try {\n\t    return it[key];\n\t  } catch(e){ /* empty */ }\n\t};\n\n\tmodule.exports = function(it){\n\t  var O, T, B;\n\t  return it === undefined ? 'Undefined' : it === null ? 'Null'\n\t    // @@toStringTag case\n\t    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n\t    // builtinTag case\n\t    : ARG ? cof(O)\n\t    // ES3 arguments fallback\n\t    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n\t};\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _keys = __webpack_require__(95);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _thenable = __webpack_require__(99);\n\n\tvar _thenable2 = _interopRequireDefault(_thenable);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Tuneable = function (_Thenable) {\n\t  (0, _inherits3.default)(Tuneable, _Thenable);\n\n\t  function Tuneable() {\n\t    (0, _classCallCheck3.default)(this, Tuneable);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Thenable.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to start the animation with optional new options.\n\t    @public\n\t    @param {Object} New options to set on the run.\n\t    @returns {Object} this.\n\t  */\n\t  Tuneable.prototype.tune = function tune(o) {\n\t    // if options object was passed\n\t    if (o && (0, _keys2.default)(o).length) {\n\t      this._transformHistory(o);\n\t      this._tuneNewOptions(o);\n\t      // restore array prop values because _props\n\t      // contain them as parsed arrays\n\t      // but we need the as strings to store in history\n\t      // and merge in history chains\n\t      this._history[0] = _h2.default.cloneObj(this._props);\n\t      for (var key in this._arrayPropertyMap) {\n\t        if (o[key] != null) {\n\t          this._history[0][key] = this._preparsePropValue(key, o[key]);\n\t        }\n\t      }\n\n\t      this._tuneSubModules();\n\t      this._resetTweens();\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to regenerate all the random properties form initial object.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Tuneable.prototype.generate = function generate() {\n\t    return this.tune(this._o);\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to preparse options in object.\n\t    @private\n\t    @param {Object} Object to preparse properties on.\n\t    @returns {Object} Passed object with preparsed props.\n\t  */\n\t  // _preParseOptions ( o ) {\n\t  //   for (var key in o) {\n\t  //     o[key] = this._preparsePropValue( key, o[key] );\n\t  //   }\n\t  //   return o;\n\t  // }\n\t  /*\n\t    Method to transform history rewrite new options object chain on run.\n\t    @private\n\t    @param {Object} New options to tune for.\n\t  */\n\n\n\t  Tuneable.prototype._transformHistory = function _transformHistory(o) {\n\t    for (var key in o) {\n\t      var value = o[key];\n\t      // don't transform for childOptions\n\t      // if ( key === 'childOptions' ) { continue; }\n\t      this._transformHistoryFor(key, this._preparsePropValue(key, value));\n\t    }\n\t  };\n\t  /*\n\t    Method to transform history chain for specific key/value.\n\t    @param {String} Name of the property to transform history for.\n\t    @param {Any} The new property's value.\n\t  */\n\n\n\t  Tuneable.prototype._transformHistoryFor = function _transformHistoryFor(key, value) {\n\t    for (var i = 0; i < this._history.length; i++) {\n\t      if (value = this._transformHistoryRecord(i, key, value)) {\n\t        // break if no further history modifications needed\n\t        if (value == null) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to transform history recod with key/value.\n\t    @param {Number} Index of the history record to transform.\n\t    @param {String} Property name to transform.\n\t    @param {Any} Property value to transform to.\n\t    @param {Object} Optional the current history record.\n\t    @param {Object} Optional the next history record.\n\t    @returns {Boolean} Returns true if no further\n\t                       history modifications is needed.\n\t  */\n\n\n\t  Tuneable.prototype._transformHistoryRecord = function _transformHistoryRecord(index, key, newVal, currRecord, nextRecord) {\n\t    // newVal = this._parseProperty( key, newVal );\n\t    if (newVal == null) {\n\t      return null;\n\t    }\n\n\t    // fallback to history records, if wasn't specified\n\t    currRecord = currRecord == null ? this._history[index] : currRecord;\n\t    nextRecord = nextRecord == null ? this._history[index + 1] : nextRecord;\n\n\t    var oldVal = currRecord[key],\n\t        nextVal = nextRecord == null ? null : nextRecord[key];\n\n\t    // if index is 0 - always save the newVal\n\t    // and return non-delta for subsequent modifications\n\t    if (index === 0) {\n\t      currRecord[key] = newVal;\n\t      // always return on tween properties\n\t      if (_h2.default.isTweenProp(key) && key !== 'duration') {\n\t        return null;\n\t      }\n\t      // nontween properties\n\t      var isRewriteNext = this._isRewriteNext(oldVal, nextVal),\n\t          returnVal = this._isDelta(newVal) ? _h2.default.getDeltaEnd(newVal) : newVal;\n\t      return isRewriteNext ? returnVal : null;\n\t    } else {\n\t      // if was delta and came none-deltta - rewrite\n\t      // the start of the delta and stop\n\t      if (this._isDelta(oldVal)) {\n\t        var _currRecord$key;\n\n\t        currRecord[key] = (_currRecord$key = {}, _currRecord$key[newVal] = _h2.default.getDeltaEnd(oldVal), _currRecord$key);\n\t        return null;\n\t      } else {\n\t        // if the old value is not delta and the new one is\n\t        currRecord[key] = newVal;\n\t        // if the next item has the same value - return the\n\t        // item for subsequent modifications or stop\n\t        return this._isRewriteNext(oldVal, nextVal) ? newVal : null;\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to check if the next item should\n\t    be rewrited in transform history operation.\n\t    @private\n\t    @param {Any} Current value.\n\t    @param {Any} Next value.\n\t    @returns {Boolean} If need to rewrite the next value.\n\t  */\n\n\n\t  Tuneable.prototype._isRewriteNext = function _isRewriteNext(currVal, nextVal) {\n\t    // return false if nothing to rewrite next\n\t    if (nextVal == null && currVal != null) {\n\t      return false;\n\t    }\n\n\t    var isEqual = currVal === nextVal,\n\t        isNextDelta = this._isDelta(nextVal),\n\t        isDelta = this._isDelta(currVal),\n\t        isValueDeltaChain = false,\n\t        isDeltaChain = false;\n\n\t    if (isDelta && isNextDelta) {\n\t      if (_h2.default.getDeltaEnd(currVal) == _h2.default.getDeltaStart(nextVal)) {\n\t        isDeltaChain = true;\n\t      }\n\t    } else if (isNextDelta) {\n\t      isValueDeltaChain = _h2.default.getDeltaStart(nextVal) === '' + currVal;\n\t    }\n\n\t    return isEqual || isValueDeltaChain || isDeltaChain;\n\t  };\n\t  /*\n\t    Method to tune new history options to all the submodules.\n\t    @private\n\t  */\n\n\n\t  Tuneable.prototype._tuneSubModules = function _tuneSubModules() {\n\t    for (var i = 1; i < this._modules.length; i++) {\n\t      this._modules[i]._tuneNewOptions(this._history[i]);\n\t    }\n\t  };\n\t  /*\n\t    Method to set new options on run.\n\t    @param {Boolean} If foreign context.\n\t    @private\n\t  */\n\n\n\t  Tuneable.prototype._resetTweens = function _resetTweens() {\n\t    var i = 0,\n\t        shift = 0,\n\t        tweens = this.timeline._timelines;\n\n\t    // if `isTimelineLess` return\n\t    if (tweens == null) {\n\t      return;\n\t    }\n\n\t    for (var i = 0; i < tweens.length; i++) {\n\t      var tween = tweens[i],\n\t          prevTween = tweens[i - 1];\n\n\t      shift += prevTween ? prevTween._props.repeatTime : 0;\n\t      this._resetTween(tween, this._history[i], shift);\n\t    }\n\t    this.timeline._setProp(this._props.timeline);\n\t    this.timeline._recalcTotalDuration();\n\t  };\n\t  /*\n\t    Method to reset tween with new options.\n\t    @param {Object} Tween to reset.\n\t    @param {Object} Tween's to reset tween with.\n\t    @param {Number} Optional number to shift tween start time.\n\t  */\n\n\n\t  Tuneable.prototype._resetTween = function _resetTween(tween, o) {\n\t    var shift = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n\t    o.shiftTime = shift;tween._setProp(o);\n\t  };\n\n\t  return Tuneable;\n\t}(_thenable2.default);\n\n\texports.default = Tuneable;\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _shape = __webpack_require__(94);\n\n\tvar _shape2 = _interopRequireDefault(_shape);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  *TODO:*\n\t  ---\n\t  - tweak then chains\n\t*/\n\n\tvar ShapeSwirl = function (_Shape) {\n\t  (0, _inherits3.default)(ShapeSwirl, _Shape);\n\n\t  function ShapeSwirl() {\n\t    (0, _classCallCheck3.default)(this, ShapeSwirl);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Shape.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare _defaults and other default objects.\n\t    @private\n\t    @override @ Shape\n\t  */\n\t  ShapeSwirl.prototype._declareDefaults = function _declareDefaults() {\n\t    _Shape.prototype._declareDefaults.call(this);\n\n\t    /* _DEFAULTS ARE - Shape DEFAULTS + THESE: */\n\n\t    /* [boolean] :: If shape should follow sinusoidal path. */\n\t    this._defaults.isSwirl = true;\n\t    /* ∆ :: [number > 0] :: Degree size of the sinusoidal path. */\n\t    this._defaults.swirlSize = 10;\n\t    /* ∆ :: [number > 0] :: Frequency of the sinusoidal path. */\n\t    this._defaults.swirlFrequency = 3;\n\t    /* ∆ :: [number > 0] :: Sinusoidal path length scale. */\n\t    this._defaults.pathScale = 1;\n\t    /* ∆ :: [number] :: Degree shift for the sinusoidal path. */\n\t    this._defaults.degreeShift = 0;\n\t    /* ∆ :: [number] :: Radius of the shape. */\n\t    this._defaults.radius = 5;\n\t    // ∆ :: Units :: Possible values: [ number, string ]\n\t    this._defaults.x = 0;\n\t    // ∆ :: Units :: Possible values: [ number, string ]\n\t    this._defaults.y = 0;\n\t    // ∆ :: Possible values: [ number ]\n\t    this._defaults.scale = { 1: 0 };\n\t    /* [number: -1, 1] :: Directon of Swirl. */\n\t    this._defaults.direction = 1;\n\t  };\n\n\t  // ^ PUBLIC  METHOD(S) ^\n\t  // v PRIVATE METHOD(S) v\n\n\t  /*\n\t    Method to copy _o options to _props with\n\t    fallback to _defaults.\n\t    @private\n\t    @override @ Module\n\t  */\n\n\n\t  ShapeSwirl.prototype._extendDefaults = function _extendDefaults() {\n\t    _Shape.prototype._extendDefaults.call(this);\n\t    this._calcPosData();\n\t  };\n\t  /*\n\t    Method to tune new oprions to _o and _props object.\n\t    @private\n\t    @overrides @ Module\n\t    @param {Object} Options object to tune to.\n\t  */\n\n\n\t  ShapeSwirl.prototype._tuneNewOptions = function _tuneNewOptions(o) {\n\t    if (o == null) {\n\t      return;\n\t    }\n\n\t    _Shape.prototype._tuneNewOptions.call(this, o);\n\t    if (o.x != null || o.y != null) {\n\t      this._calcPosData();\n\t    }\n\t  };\n\t  /*\n\t    Method to calculate Swirl's position data.\n\t    @private\n\t  */\n\n\n\t  ShapeSwirl.prototype._calcPosData = function _calcPosData() {\n\t    var x = this._getPosValue('x'),\n\t        y = this._getPosValue('y'),\n\t        angle = 90 + Math.atan(y.delta / x.delta || 0) * _h2.default.RAD_TO_DEG;\n\n\t    this._posData = {\n\t      radius: Math.sqrt(x.delta * x.delta + y.delta * y.delta),\n\t      angle: x.delta < 0 ? angle + 180 : angle,\n\t      x: x, y: y\n\t    };\n\t    // set the last position to _props\n\t    // this._calcSwirlXY( 1 );\n\t  };\n\t  /*\n\t    Gets `x` or `y` position value.\n\t    @private\n\t    @param {String} Name of the property.\n\t  */\n\n\n\t  ShapeSwirl.prototype._getPosValue = function _getPosValue(name) {\n\t    var delta = this._deltas[name];\n\t    if (delta) {\n\t      // delete from deltas to prevent normal\n\t      delete this._deltas[name];\n\t      return {\n\t        start: delta.start.value,\n\t        end: delta.end.value,\n\t        delta: delta.delta,\n\t        units: delta.end.unit\n\t      };\n\t    } else {\n\t      var pos = _h2.default.parseUnit(this._props[name]);\n\t      return { start: pos.value, end: pos.value, delta: 0, units: pos.unit };\n\t    }\n\t  };\n\t  /*\n\t    Method to calculate the progress of the Swirl.\n\t    @private\n\t    @overrides @ Shape\n\t    @param {Numer} Eased progress of the Swirl in range of [0..1]\n\t    @param {Numer} Progress of the Swirl in range of [0..1]\n\t  */\n\n\n\t  ShapeSwirl.prototype._setProgress = function _setProgress(easedProgress, progress) {\n\t    this._progress = easedProgress;\n\t    this._calcCurrentProps(easedProgress, progress);\n\t    this._calcSwirlXY(easedProgress);\n\t    // this._calcOrigin();\n\t    this._draw(easedProgress);\n\t  };\n\t  /*\n\t    Method to calculate x/y for Swirl's progress\n\t    @private\n\t    @mutates _props\n\t    @param {Number} Current progress in [0...1]\n\t  */\n\n\n\t  ShapeSwirl.prototype._calcSwirlXY = function _calcSwirlXY(proc) {\n\t    var p = this._props,\n\t        angle = this._posData.angle + p.degreeShift,\n\t        point = _h2.default.getRadialPoint({\n\t      angle: p.isSwirl ? angle + this._getSwirl(proc) : angle,\n\t      radius: proc * this._posData.radius * p.pathScale,\n\t      center: {\n\t        x: this._posData.x.start,\n\t        y: this._posData.y.start\n\t      }\n\t    });\n\t    // if foreign svg canvas - set position without units\n\t    var x = point.x,\n\t        y = point.y,\n\t        smallNumber = 0.000001;\n\n\t    // remove very small numbers to prevent exponential forms\n\t    if (x > 0 && x < smallNumber) {\n\t      x = smallNumber;\n\t    }\n\t    if (y > 0 && y < smallNumber) {\n\t      y = smallNumber;\n\t    }\n\t    if (x < 0 && x > -smallNumber) {\n\t      x = -smallNumber;\n\t    }\n\t    if (y < 0 && y > -smallNumber) {\n\t      y = -smallNumber;\n\t    }\n\n\t    p.x = this._o.ctx ? x : '' + x + this._posData.x.units;\n\t    p.y = this._o.ctx ? y : '' + y + this._posData.y.units;\n\t  };\n\t  /*\n\t    Method to get progress of the swirl.\n\t    @private\n\t    @param {Number} Progress of the Swirl.\n\t    @returns {Number} Progress of the swirl.\n\t  */\n\n\n\t  ShapeSwirl.prototype._getSwirl = function _getSwirl(proc) {\n\t    var p = this._props;\n\t    return p.direction * p.swirlSize * Math.sin(p.swirlFrequency * proc);\n\t  };\n\t  /*\n\t    Method to draw shape.\n\t    If !isWithShape - draw self el only, but not shape.\n\t    @private\n\t    @overrides @ Shape.\n\t  */\n\n\n\t  ShapeSwirl.prototype._draw = function _draw() {\n\t    // call _draw or just _drawEl @ Shape depending if there is `shape`\n\t    var methodName = this._props.isWithShape ? '_draw' : '_drawEl';\n\t    _shape2.default.prototype[methodName].call(this);\n\t  };\n\n\t  return ShapeSwirl;\n\t}(_shape2.default);\n\n\texports.default = ShapeSwirl;\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _keys = __webpack_require__(95);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _timeline = __webpack_require__(110);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _shapeSwirl = __webpack_require__(117);\n\n\tvar _shapeSwirl2 = _interopRequireDefault(_shapeSwirl);\n\n\tvar _tunable = __webpack_require__(116);\n\n\tvar _tunable2 = _interopRequireDefault(_tunable);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t// import Shape    from './shape';\n\tvar Burst = function (_Tunable) {\n\t  (0, _inherits3.default)(Burst, _Tunable);\n\n\t  function Burst() {\n\t    (0, _classCallCheck3.default)(this, Burst);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Tunable.apply(this, arguments));\n\t  }\n\n\t  /*\n\t    Method to declare defaults.\n\t    @override @ ShapeSwirl.\n\t  */\n\t  Burst.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {\n\t      /* [number > 0] :: Quantity of Burst particles. */\n\t      count: 5,\n\t      /* [0 < number < 360] :: Degree of the Burst. */\n\t      degree: 360,\n\t      /* ∆ :: [number > 0] :: Radius of the Burst. */\n\t      radius: { 0: 50 },\n\t      /* ∆ :: [number > 0] :: X radius of the Burst. */\n\t      radiusX: null,\n\t      /* ∆ :: [number > 0] :: Y radius of the Burst. */\n\t      radiusY: null,\n\t      /* [number >= 0] :: width of the main swirl. */\n\t      width: 0,\n\t      /* [number >= 0] :: height of the main swirl. */\n\t      height: 0\n\t    };\n\t  };\n\t  /*\n\t    Method to create a then record for the module.\n\t    @public\n\t    overrides @ Thenable\n\t    @param    {Object} Options for the next animation.\n\t    @returns  {Object} this.\n\t  */\n\n\n\t  Burst.prototype.then = function then(o) {\n\t    // remove tween properties (not callbacks)\n\t    this._removeTweenProperties(o);\n\n\t    var newMaster = this._masterThen(o),\n\t        newSwirls = this._childThen(o);\n\n\t    this._setSwirlDuration(newMaster, this._calcPackTime(newSwirls));\n\n\t    this.timeline._recalcTotalDuration();\n\t    return this;\n\t  };\n\t  /*\n\t    Method to start the animation with optional new options.\n\t    @public\n\t    @param {Object} New options to set on the run.\n\t    @returns {Object} this.\n\t  */\n\n\n\t  Burst.prototype.tune = function tune(o) {\n\t    if (o == null) {\n\t      return this;\n\t    }\n\t    // save timeline options to _timelineOptions\n\t    // and delete the timeline options on o\n\t    // cuz masterSwirl should not get them\n\t    this._saveTimelineOptions(o);\n\n\t    // add new timeline properties to timeline\n\t    this.timeline._setProp(this._timelineOptions);\n\n\t    // remove tween options (not callbacks)\n\t    this._removeTweenProperties(o);\n\n\t    // tune _props\n\t    this._tuneNewOptions(o);\n\n\t    // tune master swirl\n\t    this.masterSwirl.tune(o);\n\n\t    // tune child swirls\n\t    this._tuneSwirls(o);\n\n\t    // recalc time for modules\n\t    this._recalcModulesTime();\n\t    return this;\n\t  };\n\n\t  // ^ PUBLIC  METHODS ^\n\t  // v PRIVATE METHODS v\n\n\t  /*\n\t    Method to copy `_o` options to `_props` object\n\t    with fallback to `_defaults`.\n\t    @private\n\t    @overrides @ Module\n\t  */\n\n\n\t  Burst.prototype._extendDefaults = function _extendDefaults() {\n\t    // remove tween properties (not callbacks)\n\t    this._removeTweenProperties(this._o);\n\t    _Tunable.prototype._extendDefaults.call(this);\n\t  };\n\t  /*\n\t    Method to remove all tween (excluding\n\t    callbacks) props from object.\n\t    @private\n\t    @param {Object} Object which should be cleaned\n\t                    up from tween properties.\n\t  */\n\n\n\t  Burst.prototype._removeTweenProperties = function _removeTweenProperties(o) {\n\t    for (var key in _h2.default.tweenOptionMap) {\n\t      // remove all items that are not declared in _defaults\n\t      if (this._defaults[key] == null) {\n\t        delete o[key];\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to recalc modules chain tween\n\t    times after tuning new options.\n\t    @private\n\t  */\n\n\n\t  Burst.prototype._recalcModulesTime = function _recalcModulesTime() {\n\t    var modules = this.masterSwirl._modules,\n\t        swirls = this._swirls,\n\t        shiftTime = 0;\n\n\t    for (var i = 0; i < modules.length; i++) {\n\t      var tween = modules[i].tween,\n\t          packTime = this._calcPackTime(swirls[i]);\n\t      tween._setProp({ 'duration': packTime, 'shiftTime': shiftTime });\n\t      shiftTime += packTime;\n\t    }\n\n\t    this.timeline._recalcTotalDuration();\n\t  };\n\t  /*\n\t    Method to tune Swirls with new options.\n\t    @private\n\t    @param {Object} New options.\n\t  */\n\n\n\t  Burst.prototype._tuneSwirls = function _tuneSwirls(o) {\n\t    // get swirls in first pack\n\t    var pack0 = this._swirls[0];\n\t    for (var i = 0; i < pack0.length; i++) {\n\t      var swirl = pack0[i],\n\t          option = this._getChildOption(o || {}, i);\n\n\t      // since the `degreeShift` participate in\n\t      // children position calculations, we need to keep\n\t      // the old `degreeShift` value if new not set\n\t      var isDegreeShift = option.degreeShift != null;\n\t      if (!isDegreeShift) {\n\t        option.degreeShift = this._swirls[0][i]._props.degreeShift;\n\t      }\n\n\t      this._addBurstProperties(option, i);\n\n\t      // after burst position calculation - delete the old `degreeShift`\n\t      // from the options, since anyways we have copied it from the swirl\n\t      if (!isDegreeShift) {\n\t        delete option.degreeShift;\n\t      }\n\n\t      swirl.tune(option);\n\t      this._refreshBurstOptions(swirl._modules, i);\n\t    }\n\t  };\n\t  /*\n\t    Method to refresh burst x/y/angle options on further chained \n\t    swirls, because they will be overriden after `tune` call on\n\t    very first swirl.\n\t    @param {Array} Chained modules array\n\t    param {Number} Index of the first swirl in the chain.\n\t  */\n\n\n\t  Burst.prototype._refreshBurstOptions = function _refreshBurstOptions(modules, i) {\n\t    for (var j = 1; j < modules.length; j++) {\n\t      var module = modules[j],\n\t          options = {};\n\t      this._addBurstProperties(options, i, j);\n\t      module._tuneNewOptions(options);\n\t    }\n\t  };\n\t  /*\n\t    Method to call then on masterSwirl.\n\t    @param {Object} Then options.\n\t    @returns {Object} New master swirl.\n\t  */\n\n\n\t  Burst.prototype._masterThen = function _masterThen(o) {\n\t    this.masterSwirl.then(o);\n\t    // get the latest master swirl in then chain\n\t    var newMasterSwirl = _h2.default.getLastItem(this.masterSwirl._modules);\n\t    // save to masterSwirls\n\t    this._masterSwirls.push(newMasterSwirl);\n\t    return newMasterSwirl;\n\t  };\n\t  /*\n\t    Method to call then on child swilrs.\n\t    @param {Object} Then options.\n\t    @return {Array} Array of new Swirls.\n\t  */\n\n\n\t  Burst.prototype._childThen = function _childThen(o) {\n\t    var pack = this._swirls[0],\n\t        newPack = [];\n\n\t    for (var i = 0; i < pack.length; i++) {\n\t      // get option by modulus\n\t      var options = this._getChildOption(o, i);\n\t      var swirl = pack[i];\n\t      var lastSwirl = _h2.default.getLastItem(swirl._modules);\n\t      // add new Master Swirl as parent of new childswirl\n\t      options.parent = this.el;\n\n\t      this._addBurstProperties(options, i, this._masterSwirls.length - 1);\n\n\t      swirl.then(options);\n\n\t      // save the new item in `then` chain\n\t      newPack.push(_h2.default.getLastItem(swirl._modules));\n\t    }\n\t    // save the pack to _swirls object\n\t    this._swirls[this._masterSwirls.length - 1] = newPack;\n\t    return newPack;\n\t  };\n\t  /*\n\t    Method to initialize properties.\n\t    @private\n\t    @overrides @ Thenable\n\t  */\n\n\n\t  Burst.prototype._vars = function _vars() {\n\t    _Tunable.prototype._vars.call(this);\n\t    // just buffer timeline for calculations\n\t    this._bufferTimeline = new _timeline2.default();\n\t  };\n\t  /*\n\t    Method for initial render of the module.\n\t  */\n\n\n\t  Burst.prototype._render = function _render() {\n\t    this._o.isWithShape = false;\n\t    this._o.isSwirl = this._props.isSwirl;\n\t    this._o.callbacksContext = this;\n\t    // save timeline options and remove from _o\n\t    // cuz the master swirl should not get them\n\t    this._saveTimelineOptions(this._o);\n\n\t    this.masterSwirl = new MainSwirl(this._o);\n\t    this._masterSwirls = [this.masterSwirl];\n\t    this.el = this.masterSwirl.el;\n\n\t    this._renderSwirls();\n\t  };\n\t  /*\n\t    Method for initial render of swirls.\n\t    @private\n\t  */\n\n\n\t  Burst.prototype._renderSwirls = function _renderSwirls() {\n\t    var p = this._props,\n\t        pack = [];\n\n\t    for (var i = 0; i < p.count; i++) {\n\t      var option = this._getChildOption(this._o, i);\n\t      pack.push(new ChildSwirl(this._addOptionalProps(option, i)));\n\t    }\n\t    this._swirls = { 0: pack };\n\t    this._setSwirlDuration(this.masterSwirl, this._calcPackTime(pack));\n\t  };\n\t  /*\n\t    Method to save timeline options to _timelineOptions\n\t    and delete the property on the object.\n\t    @private\n\t    @param {Object} The object to save the timeline options from.\n\t  */\n\n\n\t  Burst.prototype._saveTimelineOptions = function _saveTimelineOptions(o) {\n\t    this._timelineOptions = o.timeline;\n\t    delete o.timeline;\n\t  };\n\t  /*\n\t    Method to calculate total time of array of\n\t    concurrent tweens.\n\t    @param   {Array}  Pack to calculate the total time for.\n\t    @returns {Number} Total pack duration.\n\t  */\n\n\n\t  Burst.prototype._calcPackTime = function _calcPackTime(pack) {\n\t    var maxTime = 0;\n\t    for (var i = 0; i < pack.length; i++) {\n\t      var tween = pack[i].tween,\n\t          p = tween._props;\n\n\t      maxTime = Math.max(p.repeatTime / p.speed, maxTime);\n\t    }\n\n\t    return maxTime;\n\t  };\n\t  /*\n\t    Method to set duration for Swirl.\n\t    @param {Object} Swirl instance to set the duration to.\n\t    @param {Number} Duration to set.\n\t  */\n\n\n\t  Burst.prototype._setSwirlDuration = function _setSwirlDuration(swirl, duration) {\n\t    swirl.tween._setProp('duration', duration);\n\t    var isRecalc = swirl.timeline && swirl.timeline._recalcTotalDuration;\n\t    isRecalc && swirl.timeline._recalcTotalDuration();\n\t  };\n\t  /*\n\t    Method to get childOption form object call by modulus.\n\t    @private\n\t    @param   {Object} Object to look in.\n\t    @param   {Number} Index of the current Swirl.\n\t    @returns {Object} Options for the current swirl.\n\t  */\n\n\n\t  Burst.prototype._getChildOption = function _getChildOption(obj, i) {\n\t    var options = {};\n\t    for (var key in obj.children) {\n\t      options[key] = this._getPropByMod(key, i, obj.children);\n\t    }\n\t    return options;\n\t  };\n\t  /*\n\t    Method to get property by modulus.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Number} Index for the modulus.\n\t    @param {Object} Source object to check in.\n\t    @returns {Any} Property.\n\t  */\n\n\n\t  Burst.prototype._getPropByMod = function _getPropByMod(name, index) {\n\t    var sourceObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t    var prop = sourceObj[name];\n\t    return _h2.default.isArray(prop) ? prop[index % prop.length] : prop;\n\t  };\n\t  /*\n\t    Method to add optional Swirls' properties to passed object.\n\t    @private\n\t    @param {Object} Object to add the properties to.\n\t    @param {Number} Index of the property.\n\t  */\n\n\n\t  Burst.prototype._addOptionalProps = function _addOptionalProps(options, index) {\n\t    options.index = index;\n\t    options.parent = this.masterSwirl.el;\n\n\t    this._addBurstProperties(options, index);\n\n\t    return options;\n\t  };\n\t  /*\n\t    Method to add Burst options to object.\n\t    @private\n\t    @param {Object} Options to add the properties to.\n\t    @param {Number} Index of the Swirl.\n\t    @param {Number} Index of the main swirl.\n\t  */\n\n\n\t  Burst.prototype._addBurstProperties = function _addBurstProperties(options, index, i) {\n\t    // save index of the module\n\t    var mainIndex = this._index;\n\t    // temporary change the index to parse index based properties like stagger\n\t    this._index = index;\n\t    // parse degree shift for the bit\n\t    var degreeShift = this._parseProperty('degreeShift', options.degreeShift || 0);\n\t    // put the index of the module back\n\t    this._index = mainIndex;\n\n\t    var p = this._props,\n\t        degreeCnt = p.degree % 360 === 0 ? p.count : p.count - 1 || 1,\n\t        step = p.degree / degreeCnt,\n\t        pointStart = this._getSidePoint('start', index * step + degreeShift, i),\n\t        pointEnd = this._getSidePoint('end', index * step + degreeShift, i);\n\n\t    options.x = this._getDeltaFromPoints('x', pointStart, pointEnd);\n\t    options.y = this._getDeltaFromPoints('y', pointStart, pointEnd);\n\n\t    options.angle = this._getBitAngle(options.angle || 0, degreeShift, index);\n\t  };\n\t  /* \n\t    Method to get shapes angle in burst so\n\t    it will follow circular shape.\n\t     \n\t     @param    {Number, Object} Base angle.\n\t     @param    {Number}         Angle shift for the bit\n\t     @param    {Number}         Shape's index in burst.\n\t     @returns  {Number}         Angle in burst.\n\t  */\n\n\n\t  Burst.prototype._getBitAngle = function _getBitAngle() {\n\t    var angleProperty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t    var angleShift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t    var i = arguments[2];\n\n\t    var p = this._props,\n\t        degCnt = p.degree % 360 === 0 ? p.count : p.count - 1 || 1,\n\t        step = p.degree / degCnt,\n\t        angle = i * step + 90;\n\n\t    angle += angleShift;\n\t    // if not delta option\n\t    if (!this._isDelta(angleProperty)) {\n\t      angleProperty += angle;\n\t    } else {\n\t      var delta = {},\n\t          keys = (0, _keys2.default)(angleProperty),\n\t          start = keys[0],\n\t          end = angleProperty[start];\n\n\t      start = _h2.default.parseStringOption(start, i);\n\t      end = _h2.default.parseStringOption(end, i);\n\t      // new start = newEnd\n\t      delta[parseFloat(start) + angle] = parseFloat(end) + angle;\n\n\t      angleProperty = delta;\n\t    }\n\t    return angleProperty;\n\t  };\n\t  /*\n\t    Method to get radial point on `start` or `end`.\n\t    @private\n\t    @param {String} Name of the side - [start, end].\n\t    @param {Number} Angle of the radial point.\n\t    @param {Number} Index of the main swirl.\n\t    @returns radial point.\n\t  */\n\n\n\t  Burst.prototype._getSidePoint = function _getSidePoint(side, angle, i) {\n\t    var p = this._props,\n\t        sideRadius = this._getSideRadius(side, i);\n\n\t    return _h2.default.getRadialPoint({\n\t      radius: sideRadius.radius,\n\t      radiusX: sideRadius.radiusX,\n\t      radiusY: sideRadius.radiusY,\n\t      angle: angle,\n\t      // center:  { x: p.center, y: p.center }\n\t      center: { x: 0, y: 0 }\n\t    });\n\t  };\n\t  /*\n\t    Method to get radius of the side.\n\t    @private\n\t    @param {String} Name of the side - [start, end].\n\t    @param {Number} Index of the main swirl.\n\t    @returns {Object} Radius.\n\t  */\n\n\n\t  Burst.prototype._getSideRadius = function _getSideRadius(side, i) {\n\t    return {\n\t      radius: this._getRadiusByKey('radius', side, i),\n\t      radiusX: this._getRadiusByKey('radiusX', side, i),\n\t      radiusY: this._getRadiusByKey('radiusY', side, i)\n\t    };\n\t  };\n\t  /*\n\t    Method to get radius from ∆ or plain property.\n\t    @private\n\t    @param {String} Key name.\n\t    @param {String} Side name - [start, end].\n\t    @param {Number} Index of the main swirl.\n\t    @returns {Number} Radius value.\n\t  */\n\n\n\t  Burst.prototype._getRadiusByKey = function _getRadiusByKey(key, side) {\n\t    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n\t    var swirl = this._masterSwirls[i],\n\t        deltas = swirl._deltas,\n\t        props = swirl._props;\n\n\t    if (deltas[key] != null) {\n\t      return deltas[key][side];\n\t    } else if (props[key] != null) {\n\t      return props[key];\n\t    }\n\t  };\n\t  /*\n\t    Method to get delta from start and end position points.\n\t    @private\n\t    @param {String} Key name.\n\t    @param {Object} Start position point.\n\t    @param {Object} End position point.\n\t    @returns {Object} Delta of the end/start.\n\t  */\n\n\n\t  Burst.prototype._getDeltaFromPoints = function _getDeltaFromPoints(key, pointStart, pointEnd) {\n\t    var delta = {};\n\t    if (pointStart[key] === pointEnd[key]) {\n\t      delta = pointStart[key];\n\t    } else {\n\t      delta[pointStart[key]] = pointEnd[key];\n\t    }\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to create timeline.\n\t    @private\n\t    @override @ Tweenable\n\t  */\n\n\n\t  Burst.prototype._makeTimeline = function _makeTimeline() {\n\t    // restore timeline options that were deleted in _render method\n\t    this._o.timeline = this._timelineOptions;\n\t    _Tunable.prototype._makeTimeline.call(this);\n\t    this.timeline.add(this.masterSwirl, this._swirls[0]);\n\t  };\n\t  /*\n\t    Method to make Tween for the module.\n\t    @private\n\t    @override @ Tweenable\n\t  */\n\n\n\t  Burst.prototype._makeTween = function _makeTween() {} /* don't create any tween */\n\t  /*\n\t    Override `_hide` and `_show` methods on module\n\t    since we don't have to hide nor show on the module.\n\t  */\n\t  ;\n\n\t  Burst.prototype._hide = function _hide() {/* do nothing */};\n\n\t  Burst.prototype._show = function _show() {/* do nothing */};\n\n\t  return Burst;\n\t}(_tunable2.default);\n\n\tvar ChildSwirl = function (_ShapeSwirl) {\n\t  (0, _inherits3.default)(ChildSwirl, _ShapeSwirl);\n\n\t  function ChildSwirl() {\n\t    (0, _classCallCheck3.default)(this, ChildSwirl);\n\t    return (0, _possibleConstructorReturn3.default)(this, _ShapeSwirl.apply(this, arguments));\n\t  }\n\n\t  ChildSwirl.prototype._declareDefaults = function _declareDefaults() {\n\t    _ShapeSwirl.prototype._declareDefaults.call(this);\n\t    this._defaults.isSwirl = false;\n\t    this._o.duration = this._o.duration != null ? this._o.duration : 700;\n\t  };\n\t  // disable degreeshift calculations\n\n\n\t  ChildSwirl.prototype._calcSwirlXY = function _calcSwirlXY(proc) {\n\t    var degreeShift = this._props.degreeShift;\n\n\t    this._props.degreeShift = 0;\n\t    _ShapeSwirl.prototype._calcSwirlXY.call(this, proc);\n\t    this._props.degreeShift = degreeShift;\n\t  };\n\n\t  return ChildSwirl;\n\t}(_shapeSwirl2.default);\n\n\tvar MainSwirl = function (_ChildSwirl) {\n\t  (0, _inherits3.default)(MainSwirl, _ChildSwirl);\n\n\t  function MainSwirl() {\n\t    (0, _classCallCheck3.default)(this, MainSwirl);\n\t    return (0, _possibleConstructorReturn3.default)(this, _ChildSwirl.apply(this, arguments));\n\t  }\n\n\t  MainSwirl.prototype._declareDefaults = function _declareDefaults() {\n\t    _ChildSwirl.prototype._declareDefaults.call(this);\n\t    this._defaults.scale = 1;\n\t    this._defaults.width = 0;\n\t    this._defaults.height = 0;\n\t    this._defaults.radius = { 25: 75 };\n\t    // this._defaults.duration = 2000;\n\t  };\n\n\t  return MainSwirl;\n\t}(ChildSwirl);\n\n\tBurst.ChildSwirl = ChildSwirl;\n\tBurst.MainSwirl = MainSwirl;\n\n\texports.default = Burst;\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _extends4 = __webpack_require__(120);\n\n\tvar _extends5 = _interopRequireDefault(_extends4);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _keys = __webpack_require__(95);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _thenable = __webpack_require__(99);\n\n\tvar _thenable2 = _interopRequireDefault(_thenable);\n\n\tvar _tween = __webpack_require__(101);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _deltas = __webpack_require__(125);\n\n\tvar _deltas2 = _interopRequireDefault(_deltas);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar h = __webpack_require__(71);\n\n\n\t// get tween properties\n\tvar obj = {};\n\t_tween2.default.prototype._declareDefaults.call(obj);\n\tvar keys = (0, _keys2.default)(obj._defaults);\n\tfor (var i = 0; i < keys.length; i++) {\n\t  obj._defaults[keys[i]] = 1;\n\t}\n\tobj._defaults['timeline'] = 1;\n\tvar TWEEN_PROPERTIES = obj._defaults;\n\n\t/*\n\t  TODO:\n\n\t    - change _props to _propsObj for animations\n\t    - current values in deltas\n\t*/\n\n\tvar Html = function (_Thenable) {\n\t  (0, _inherits3.default)(Html, _Thenable);\n\n\t  function Html() {\n\t    (0, _classCallCheck3.default)(this, Html);\n\t    return (0, _possibleConstructorReturn3.default)(this, _Thenable.apply(this, arguments));\n\t  }\n\n\t  Html.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {\n\t      x: 0,\n\t      y: 0,\n\t      z: 0,\n\n\t      skewX: 0,\n\t      skewY: 0,\n\n\t      // angle:      0,\n\t      angleX: 0,\n\t      angleY: 0,\n\t      angleZ: 0,\n\n\t      scale: 1,\n\t      scaleX: 1,\n\t      scaleY: 1,\n\n\t      isSoftHide: true,\n\t      isShowStart: true,\n\t      isShowEnd: true,\n\t      isForce3d: false,\n\t      isRefreshState: true\n\n\t    };\n\t    // exclude from automatic drawing\n\t    this._drawExclude = { el: 1 };\n\t    // properties that cause 3d layer\n\t    this._3dProperties = ['angleX', 'angleY', 'z'];\n\t    // properties that have array values\n\t    this._arrayPropertyMap = { transformOrigin: 1, backgroundPosition: 1 };\n\t    // properties that have no units\n\t    this._numberPropertyMap = {\n\t      opacity: 1, scale: 1, scaleX: 1, scaleY: 1,\n\t      // angle: 1,\n\t      angleX: 1, angleY: 1, angleZ: 1,\n\t      skewX: 1, skewY: 1\n\t    };\n\t    // properties that should be prefixed \n\t    this._prefixPropertyMap = { transform: 1, transformOrigin: 1 };\n\t    // save prefix\n\t    this._prefix = h.prefix.css;\n\t  };\n\n\t  Html.prototype.then = function then(o) {\n\t    // return if nothing was passed\n\t    if (o == null || !(0, _keys2.default)(o).length) {\n\t      return 1;\n\t    }\n\n\t    // get the last item in `then` chain\n\t    var prevModule = h.getLastItem(this._modules);\n\t    // set deltas to the finish state\n\t    prevModule.deltas.refresh(false);\n\t    // copy finish state to the last history record\n\t    this._history[this._history.length - 1] = prevModule._o;\n\t    // call super\n\t    _Thenable.prototype.then.call(this, o);\n\t    // restore the _props\n\t    prevModule.deltas.restore();\n\n\t    return this;\n\t  };\n\t  /*\n\t    Method to pipe startValue of the delta.\n\t    @private\n\t    @ovarrides @ Thenable\n\t    @param {String} Start property name.\n\t    @param {Any} Start property value.\n\t    @returns {Any} Start property value.\n\t  */\n\n\n\t  Html.prototype._checkStartValue = function _checkStartValue(key, value) {\n\t    if (value == null) {\n\t      // return default value for transforms\n\t      if (this._defaults[key] != null) {\n\t        return this._defaults[key];\n\t      }\n\t      // return default value from _customProps\n\t      if (this._customProps[key] != null) {\n\t        return this._customProps[key];\n\t      }\n\t      // try to get the default value\n\t      if (h.defaultStyles[key] != null) {\n\t        return h.defaultStyles[key];\n\t      }\n\t      // at the end return 0\n\t      return 0;\n\t    }\n\n\t    return value;\n\t  };\n\t  /*\n\t    Method to draw _props to el.\n\t    @private\n\t  */\n\n\n\t  Html.prototype._draw = function _draw() {\n\t    var p = this._props;\n\t    for (var i = 0; i < this._drawProps.length; i++) {\n\t      var name = this._drawProps[i];\n\t      this._setStyle(name, p[name]);\n\t    }\n\t    // draw transforms\n\t    this._drawTransform();\n\t    // call custom transform callback if exist\n\t    this._customDraw && this._customDraw(this._props.el, this._props);\n\t  };\n\t  /*\n\t    Method to set transform on element.\n\t    @private\n\t  */\n\n\n\t  Html.prototype._drawTransform = function _drawTransform() {\n\t    var p = this._props;\n\t    var string = !this._is3d ? 'translate(' + p.x + ', ' + p.y + ')\\n          rotate(' + p.angleZ + 'deg)\\n          skew(' + p.skewX + 'deg, ' + p.skewY + 'deg)\\n          scale(' + p.scaleX + ', ' + p.scaleY + ')' : 'translate3d(' + p.x + ', ' + p.y + ', ' + p.z + ')\\n          rotateX(' + p.angleX + 'deg)\\n          rotateY(' + p.angleY + 'deg)\\n          rotateZ(' + p.angleZ + 'deg)\\n          skew(' + p.skewX + 'deg, ' + p.skewY + 'deg)\\n          scale(' + p.scaleX + ', ' + p.scaleY + ')';\n\n\t    this._setStyle('transform', string);\n\t  };\n\t  /*\n\t    Method to render on initialization.\n\t    @private\n\t    @overrides @ Module\n\t  */\n\n\n\t  Html.prototype._render = function _render() {\n\t    // return immediately if not the first in `then` chain\n\t    if (this._o.prevChainModule) {\n\t      return;\n\t    }\n\n\t    var p = this._props;\n\n\t    for (var i = 0; i < this._renderProps.length; i++) {\n\t      var name = this._renderProps[i],\n\t          value = p[name];\n\n\t      value = typeof value === 'number' ? value + 'px' : value;\n\t      this._setStyle(name, value);\n\t    }\n\n\t    this._draw();\n\n\t    if (!p.isShowStart) {\n\t      this._hide();\n\t    }\n\t  };\n\t  /*\n\t    Method to set style on el.\n\t    @private\n\t    @param {String} Style property name.\n\t    @param {String} Style property value.\n\t  */\n\n\n\t  Html.prototype._setStyle = function _setStyle(name, value) {\n\t    if (this._state[name] !== value) {\n\t      var style = this._props.el.style;\n\t      // set style\n\t      style[name] = value;\n\t      // if prefix needed - set it\n\t      if (this._prefixPropertyMap[name]) {\n\t        style['' + this._prefix + name] = value;\n\t      }\n\t      // cache the last set value\n\t      this._state[name] = value;\n\t    }\n\t  };\n\t  /*\n\t    Method to copy `_o` options to `_props` object.\n\t    @private\n\t  */\n\n\n\t  Html.prototype._extendDefaults = function _extendDefaults() {\n\t    this._props = this._o.props || {};\n\t    // props for intial render only\n\t    this._renderProps = [];\n\t    // props for draw on every frame update\n\t    this._drawProps = [];\n\t    // save custom properties if present\n\t    this._saveCustomProperties(this._o);\n\t    // copy the options\n\t    var o = (0, _extends5.default)({}, this._o);\n\t    // extend options with defaults\n\t    o = this._addDefaults(o);\n\n\t    var keys = (0, _keys2.default)(o);\n\t    for (var i = 0; i < keys.length; i++) {\n\t      var key = keys[i];\n\t      // include the property if it is not in drawExclude object\n\t      // and not in defaults = not a transform\n\t      var isInclude = !this._drawExclude[key] && // not in exclude map\n\t      this._defaults[key] == null && // not transform property\n\t      !TWEEN_PROPERTIES[key]; // not tween property\n\n\t      var isCustom = this._customProps[key];\n\t      // copy all non-delta properties to the props\n\t      // if not delta then add the property to render\n\t      // list that is called on initialization\n\t      // otherwise add it to the draw list that will\n\t      // be drawed on each frame\n\t      if (!h.isDelta(o[key]) && !TWEEN_PROPERTIES[key]) {\n\t        this._parseOption(key, o[key]);\n\t        if (key === 'el') {\n\t          this._props.el = h.parseEl(o.el);\n\t          this.el = this._props.el;\n\t        }\n\t        if (isInclude && !isCustom) {\n\t          this._renderProps.push(key);\n\t        }\n\t        // copy delta prop but not transforms\n\t        // otherwise push it to draw list that gets traversed on every draw\n\t      } else if (isInclude && !isCustom) {\n\t        this._drawProps.push(key);\n\t      }\n\t    }\n\n\t    this._createDeltas(o);\n\t  };\n\t  /*\n\t    Method to save customProperties to _customProps.\n\t    @param {Object} Options of the module.\n\t  */\n\n\n\t  Html.prototype._saveCustomProperties = function _saveCustomProperties() {\n\t    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t    this._customProps = o.customProperties || {};\n\t    this._customProps = (0, _extends5.default)({}, this._customProps);\n\t    this._customDraw = this._customProps.draw;\n\t    delete this._customProps.draw;\n\t    delete o.customProperties;\n\n\t    this._copyDefaultCustomProps();\n\n\t    // if ( this._customProps ) {}\n\t    // this._customProps = this._customProps || {};\n\t  };\n\n\t  Html.prototype._copyDefaultCustomProps = function _copyDefaultCustomProps() {\n\t    for (var key in this._customProps) {\n\t      if (this._o[key] == null) {\n\t        this._o[key] = this._customProps[key];\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to reset some flags on merged options object.\n\t    @private\n\t    @overrides @ Thenable\n\t    @param   {Object} Options object.\n\t    @returns {Object} Options object.\n\t  */\n\n\n\t  Html.prototype._resetMergedFlags = function _resetMergedFlags(o) {\n\t    _Thenable.prototype._resetMergedFlags.call(this, o);\n\t    o.props = this._props;\n\t    o.customProperties = this._customProps;\n\t    return o;\n\t  };\n\t  /*\n\t    Method to parse option value.\n\t    @private\n\t    @param {String} Option name.\n\t    @param {Any} Option value.\n\t  */\n\n\n\t  Html.prototype._parseOption = function _parseOption(key, value) {\n\t    _Thenable.prototype._parseOption.call(this, key, value);\n\t    // at this point the property is parsed\n\t    var parsed = this._props[key];\n\t    // cast it to string if it is array\n\t    if (h.isArray(parsed)) {\n\t      this._props[key] = this._arrToString(parsed);\n\t    }\n\t  };\n\t  /*\n\t    Method cast array to string value.\n\t    @private\n\t    @param {Array} Array of parsed numbers with units.\n\t    @returns {String} Casted array.\n\t  */\n\n\n\t  Html.prototype._arrToString = function _arrToString(arr) {\n\t    var string = '';\n\t    for (var i = 0; i < arr.length; i++) {\n\t      string += arr[i].string + ' ';\n\t    }\n\t    return string;\n\t  };\n\t  /*\n\t    Method to add defauls to passed object.\n\t    @private\n\t    @param {Object} Object to add defaults to.\n\t  */\n\n\n\t  Html.prototype._addDefaults = function _addDefaults(obj) {\n\t    // flag that after all defaults are set will indicate\n\t    // if user have set the 3d transform\n\t    this._is3d = false;\n\n\t    for (var key in this._defaults) {\n\t      // skip property if it is listed in _skipProps\n\t      // if (this._skipProps && this._skipProps[key]) { continue; }\n\n\t      // copy the properties to the _o object\n\t      // if it's null - set the default value\n\t      if (obj[key] == null) {\n\t        // scaleX and scaleY should fallback to scale\n\t        if (key === 'scaleX' || key === 'scaleY') {\n\t          obj[key] = obj['scale'] != null ? obj['scale'] : this._defaults['scale'];\n\t        } else {\n\t          obj[key] = this._defaults[key];\n\t        }\n\t      } else {\n\t        // get if 3d property was set.\n\t        if (this._3dProperties.indexOf(key) !== -1) {\n\t          this._is3d = true;\n\t        }\n\t      }\n\t    }\n\n\t    if (this._o.isForce3d) {\n\t      this._is3d = true;\n\t    }\n\n\t    return obj;\n\t  };\n\t  /*\n\t    Lifecycle method to declare variables.\n\t    @private\n\t  */\n\n\n\t  Html.prototype._vars = function _vars() {\n\t    // set deltas to the last value, so the _props with\n\t    // end values will be copied to the _history, it is\n\t    // crucial for `then` chaining\n\t    this.deltas.refresh(false);\n\t    // call super vars\n\t    _Thenable.prototype._vars.call(this);\n\t    // state of set properties\n\t    this._state = {};\n\t    // restore delta values that we have refreshed before\n\t    this.deltas.restore(false);\n\t  };\n\t  /*\n\t    Method to create deltas from passed object.\n\t    @private\n\t    @param {Object} Options object to pass to the Deltas.\n\t  */\n\n\n\t  Html.prototype._createDeltas = function _createDeltas(options) {\n\t    this.deltas = new _deltas2.default({\n\t      options: options,\n\t      props: this._props,\n\t      arrayPropertyMap: this._arrayPropertyMap,\n\t      numberPropertyMap: this._numberPropertyMap,\n\t      customProps: this._customProps,\n\t      callbacksContext: options.callbacksContext || this,\n\t      isChained: !!this._o.prevChainModule\n\t    });\n\n\t    // if chained module set timeline to deltas' timeline \n\t    if (this._o.prevChainModule) {\n\t      this.timeline = this.deltas.timeline;\n\t    }\n\t  };\n\t  /* @overrides @ Tweenable */\n\n\n\t  Html.prototype._makeTween = function _makeTween() {};\n\n\t  Html.prototype._makeTimeline = function _makeTimeline() {\n\t    // do not create timeline if module if chained\n\t    if (this._o.prevChainModule) {\n\t      return;\n\t    }\n\t    // add callbacks overrides\n\t    this._o.timeline = this._o.timeline || {};\n\t    this._addCallbackOverrides(this._o.timeline);\n\t    _Thenable.prototype._makeTimeline.call(this);\n\t    this.timeline.add(this.deltas);\n\t  };\n\t  /*\n\t    Method to add callback overrides to passed object object.\n\t    @param {Object} Object to add overrides on.\n\t  */\n\n\n\t  Html.prototype._addCallbackOverrides = function _addCallbackOverrides(o) {\n\t    var it = this;\n\t    var p = this._props;\n\t    o.callbackOverrides = {\n\t      onUpdate: this._draw,\n\t      onRefresh: this._props.isRefreshState ? this._draw : void 0,\n\t      onStart: function onStart(isFwd) {\n\t        // don't touch main `el` onStart in chained elements\n\t        if (it._isChained) {\n\t          return;\n\t        };\n\t        // show if was hidden at start\n\t        if (isFwd && !p.isShowStart) {\n\t          it._show();\n\t        }\n\t        // hide if should be hidden at start\n\t        else {\n\t            if (!p.isShowStart) {\n\t              it._hide();\n\t            }\n\t          }\n\t      },\n\t      onComplete: function onComplete(isFwd) {\n\t        // don't touch main `el` if not the last in `then` chain\n\t        if (it._isChained) {\n\t          return;\n\t        }\n\t        if (isFwd) {\n\t          if (!p.isShowEnd) {\n\t            it._hide();\n\t          }\n\t        } else if (!p.isShowEnd) {\n\t          it._show();\n\t        }\n\t      }\n\t    };\n\t  };\n\n\t  /*\n\t    Method that gets called on `soft` show of the module,\n\t    it should restore transform styles of the module.\n\t    @private\n\t    @overrides @ Module\n\t  */\n\n\n\t  Html.prototype._showByTransform = function _showByTransform() {\n\t    this._drawTransform();\n\t  };\n\n\t  /*\n\t    Method to merge `start` and `end` for a property in then record.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Any}    Start value of the property.\n\t    @param {Any}    End value of the property.\n\t  */\n\t  // !! COVER !!\n\n\n\t  Html.prototype._mergeThenProperty = function _mergeThenProperty(key, startValue, endValue) {\n\t    // if isnt tween property\n\t    var isBoolean = typeof endValue === 'boolean',\n\t        curve,\n\t        easing;\n\n\t    if (!h.isTweenProp(key) && !this._nonMergeProps[key] && !isBoolean) {\n\n\t      var TWEEN_PROPS = {};\n\t      if (h.isObject(endValue) && endValue.to != null) {\n\t        for (var _key in endValue) {\n\t          if (TWEEN_PROPERTIES[_key] || _key === 'curve') {\n\t            TWEEN_PROPS[_key] = endValue[_key];\n\t            delete endValue[_key];\n\t          }\n\t        }\n\t        // curve    = endValue.curve;\n\t        // easing   = endValue.easing;\n\t        endValue = endValue.to;\n\t      }\n\n\t      // if end value is delta - just save it\n\t      if (this._isDelta(endValue)) {\n\n\t        var _TWEEN_PROPS = {};\n\t        for (var _key2 in endValue) {\n\t          if (TWEEN_PROPERTIES[_key2] || _key2 === 'curve') {\n\t            _TWEEN_PROPS[_key2] = endValue[_key2];\n\t            delete endValue[_key2];\n\t          }\n\t        }\n\t        var result = this._parseDeltaValues(key, endValue);\n\n\t        return (0, _extends5.default)({}, result, _TWEEN_PROPS);\n\t      } else {\n\t        var parsedEndValue = this._parsePreArrayProperty(key, endValue);\n\t        // if end value is not delta - merge with start value\n\t        if (this._isDelta(startValue)) {\n\t          var _extends2;\n\n\t          // if start value is delta - take the end value\n\t          // as start value of the new delta\n\t          return (0, _extends5.default)((_extends2 = {}, _extends2[h.getDeltaEnd(startValue)] = parsedEndValue, _extends2), TWEEN_PROPS);\n\t          // if both start and end value are not ∆ - make ∆\n\t        } else {\n\t          var _extends3;\n\n\t          return (0, _extends5.default)((_extends3 = {}, _extends3[startValue] = parsedEndValue, _extends3), TWEEN_PROPS);\n\t        }\n\t      }\n\t      // copy the tween values unattended\n\t    } else {\n\t      return endValue;\n\t    }\n\t  };\n\n\t  return Html;\n\t}(_thenable2.default);\n\n\texports.default = Html;\n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\tvar _assign = __webpack_require__(121);\n\n\tvar _assign2 = _interopRequireDefault(_assign);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = _assign2.default || function (target) {\n\t  for (var i = 1; i < arguments.length; i++) {\n\t    var source = arguments[i];\n\n\t    for (var key in source) {\n\t      if (Object.prototype.hasOwnProperty.call(source, key)) {\n\t        target[key] = source[key];\n\t      }\n\t    }\n\t  }\n\n\t  return target;\n\t};\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(122), __esModule: true };\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(123);\n\tmodule.exports = __webpack_require__(14).Object.assign;\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// 19.1.3.1 Object.assign(target, source)\n\tvar $export = __webpack_require__(12);\n\n\t$export($export.S + $export.F, 'Object', {assign: __webpack_require__(124)});\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// 19.1.2.1 Object.assign(target, source, ...)\n\tvar getKeys  = __webpack_require__(33)\n\t  , gOPS     = __webpack_require__(62)\n\t  , pIE      = __webpack_require__(63)\n\t  , toObject = __webpack_require__(49)\n\t  , IObject  = __webpack_require__(36)\n\t  , $assign  = Object.assign;\n\n\t// should work with symbols and should have deterministic property order (V8 bug)\n\tmodule.exports = !$assign || __webpack_require__(23)(function(){\n\t  var A = {}\n\t    , B = {}\n\t    , S = Symbol()\n\t    , K = 'abcdefghijklmnopqrst';\n\t  A[S] = 7;\n\t  K.split('').forEach(function(k){ B[k] = k; });\n\t  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n\t}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n\t  var T     = toObject(target)\n\t    , aLen  = arguments.length\n\t    , index = 1\n\t    , getSymbols = gOPS.f\n\t    , isEnum     = pIE.f;\n\t  while(aLen > index){\n\t    var S      = IObject(arguments[index++])\n\t      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)\n\t      , length = keys.length\n\t      , j      = 0\n\t      , key;\n\t    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n\t  } return T;\n\t} : $assign;\n\n/***/ }),\n/* 125 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _extends2 = __webpack_require__(120);\n\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _keys = __webpack_require__(95);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _timeline = __webpack_require__(110);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _tween = __webpack_require__(101);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _delta = __webpack_require__(126);\n\n\tvar _delta2 = _interopRequireDefault(_delta);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\n\t  This module's target is to parse options object,\n\t  find deltas in it and send them to `Delta` classes.\n\t  The `Delta` class is dull - they expect actual parsed deltas\n\t  and separated tween options, so we should parse them here.\n\t  The timeline of the module controls the `Delta` modules' tweens.\n\n\t  @param {Object} props Object to set deltas result to (pass to the Delta classes).\n\t  @param {Object} options Object to parse the deltas from.\n\t  @param {Function} onUpdate onUpdate callback.\n\t  @param optional {Object} arrayPropertyMap List of properties with truthy\n\t                                            values which describe properties\n\t                                            that should be parsed as arrays.\n\t  @param optional {Object} numberPropertyMap List of properties with truthy\n\t                                            values which describe properties\n\t                                            that should be parsed as numbers\n\t                                            without units.\n\t*/\n\n\t// TODO:\n\t// - colors with curves change alpha level too\n\t// const html = new mojs.Html({\n\t//   el: '#js-el',\n\t//   x: { 0: 100 },\n\t//   onUpdate () {\n\t//     console.log(this._props.originX);\n\t//   },\n\t//   originX: { 'white': 'black', curve: 'M0,100 L100, 0' },\n\t//   customProperties: {\n\t//     originX: {\n\t//       type: 'color',\n\t//       default: 'cyan'\n\t//     },\n\t//     draw() { console.log('draw'); }\n\t//   }\n\t// });\n\n\n\tvar easing = __webpack_require__(105);\n\tvar h = __webpack_require__(71);\n\n\n\t// get tween properties\n\tvar obj = {};\n\t_tween2.default.prototype._declareDefaults.call(obj);\n\tvar keys = (0, _keys2.default)(obj._defaults);\n\tfor (var i = 0; i < keys.length; i++) {\n\t  obj._defaults[keys[i]] = 1;\n\t}\n\tobj._defaults['timeline'] = 1;\n\tvar TWEEN_PROPERTIES = obj._defaults;\n\n\tvar Deltas = function () {\n\t  function Deltas() {\n\t    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t    (0, _classCallCheck3.default)(this, Deltas);\n\n\t    this._o = o;\n\n\t    this._shortColors = {\n\t      transparent: 'rgba(0,0,0,0)',\n\t      none: 'rgba(0,0,0,0)',\n\t      aqua: 'rgb(0,255,255)',\n\t      black: 'rgb(0,0,0)',\n\t      blue: 'rgb(0,0,255)',\n\t      fuchsia: 'rgb(255,0,255)',\n\t      gray: 'rgb(128,128,128)',\n\t      green: 'rgb(0,128,0)',\n\t      lime: 'rgb(0,255,0)',\n\t      maroon: 'rgb(128,0,0)',\n\t      navy: 'rgb(0,0,128)',\n\t      olive: 'rgb(128,128,0)',\n\t      purple: 'rgb(128,0,128)',\n\t      red: 'rgb(255,0,0)',\n\t      silver: 'rgb(192,192,192)',\n\t      teal: 'rgb(0,128,128)',\n\t      white: 'rgb(255,255,255)',\n\t      yellow: 'rgb(255,255,0)',\n\t      orange: 'rgb(255,128,0)'\n\t    };\n\n\t    this._ignoreDeltasMap = { prevChainModule: 1, masterModule: 1 };\n\n\t    this._parseDeltas(o.options);\n\t    this._createDeltas();\n\t    this._createTimeline(this._mainTweenOptions);\n\t  }\n\t  /*\n\t    Method to call `refresh` on all child `delta` objects.\n\t    @public\n\t    @param {Boolean} If before start time (true) or after end time (false).\n\t  */\n\n\n\t  Deltas.prototype.refresh = function refresh(isBefore) {\n\t    for (var i = 0; i < this._deltas.length; i++) {\n\t      this._deltas[i].refresh(isBefore);\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to call `restore` on all child `delta` objects.\n\t    @public\n\t  */\n\n\n\t  Deltas.prototype.restore = function restore() {\n\t    for (var i = 0; i < this._deltas.length; i++) {\n\t      this._deltas[i].restore();\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to create Timeline.\n\t    @private\n\t    @param {Object} Timeline options.\n\t  */\n\n\n\t  Deltas.prototype._createTimeline = function _createTimeline() {\n\t    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t    // const o = this._o;\n\t    // opts.timeline = opts.timeline || {};\n\t    // opts.timeline.callbackOverrides = {\n\t    //   onUpdate:   o.onUpdate,\n\t    //   onRefresh:  o.onUpdate\n\t    // }\n\t    // send callbacksContext to timeline if set\n\t    // o.callbacksContext && (opts.timeline.callbacksContext = o.callbacksContext);\n\t    // opts.timeline\n\t    this.timeline = new _timeline2.default();\n\t    this.timeline.add(this._deltas);\n\t  };\n\t  /*\n\t    Method to create Deltas from parsed options.\n\t    @private\n\t  */\n\n\n\t  Deltas.prototype._createDeltas = function _createDeltas() {\n\t    this._deltas = [];\n\n\t    // create main delta object\n\t    this._deltas.push(this._createDelta(this._mainDeltas, this._mainTweenOptions));\n\n\t    // create child delta object\n\t    for (var i = 0; i < this._childDeltas.length; i++) {\n\t      var delta = this._childDeltas[i];\n\t      this._deltas.push(this._createDelta([delta.delta], delta.tweenOptions));\n\t    }\n\t  };\n\t  /*\n\t    Method to create Delta object with passed options.\n\t    @private\n\t    @param {Array} Array of deltas.\n\t    @param {Object} Tween properties.\n\t    @returns {Object} Delta object\n\t  */\n\n\n\t  Deltas.prototype._createDelta = function _createDelta(deltas, tweenOptions) {\n\t    var o = this._o;\n\t    return new _delta2.default({\n\t      deltas: deltas, tweenOptions: tweenOptions,\n\t      props: o.props,\n\t      isChained: o.isChained,\n\t      callbacksContext: o.callbacksContext\n\t    });\n\t  };\n\t  /*\n\t    Method to parse delta objects from options.\n\t    @private\n\t    @param {Object} Options object to parse the deltas from.\n\t  */\n\n\n\t  Deltas.prototype._parseDeltas = function _parseDeltas(obj) {\n\t    // spilt main animation properties and main tween properties\n\t    var mainSplit = this._splitTweenOptions(obj);\n\t    // main animation properties\n\t    var opts = mainSplit.delta;\n\t    // main tween properties\n\t    this._mainTweenOptions = mainSplit.tweenOptions;\n\n\t    this._mainDeltas = [];\n\t    this._childDeltas = [];\n\t    var keys = (0, _keys2.default)(opts);\n\t    // loop thru all properties without tween ones\n\t    for (var i = 0; i < keys.length; i++) {\n\t      var key = keys[i];\n\t      // is property is delta - parse it\n\t      if (this._isDelta(opts[key]) && !this._ignoreDeltasMap[key]) {\n\t        var delta = this._splitAndParseDelta(key, opts[key]);\n\t        // if parsed object has no tween values - it's delta of the main object\n\t        if (!delta.tweenOptions) {\n\t          this._mainDeltas.push(delta.delta);\n\t        }\n\t        // otherwise it is distinct delta object\n\t        else {\n\t            this._childDeltas.push(delta);\n\t          }\n\t      }\n\t    }\n\t  };\n\t  /*\n\t    Method to split tween values and parse single delta record.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Object} Raw delta object.\n\t    @returns {Object} Split object.\n\t                @param {Object} tweenOptions Tween properties.\n\t                @param {Object} delta Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._splitAndParseDelta = function _splitAndParseDelta(name, object) {\n\t    var split = this._splitTweenOptions(object);\n\t    // parse delta in the object\n\t    split.delta = this._parseDelta(name, split.delta);\n\t    return split;\n\t  };\n\t  /*\n\t    Method to parse delta by delegating the variables to _parse*Delta methods.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Object} Raw delta object.\n\t    @param {Number} Module index.\n\t  */\n\n\n\t  Deltas.prototype._parseDelta = function _parseDelta(name, object, index) {\n\t    // if name is in _o.customProps - parse it regarding the type\n\t    return this._o.customProps && this._o.customProps[name] != null ? this._parseDeltaByCustom(name, object, index) : this._parseDeltaByGuess(name, object, index);\n\t  };\n\t  /**\n\t    Method to parse delta by taking the type from the customProps object.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Object} Raw delta object.\n\t    @param {Number} Module index.\n\t  */\n\n\n\t  Deltas.prototype._parseDeltaByCustom = function _parseDeltaByCustom(name, object, index) {\n\t    return this._parseNumberDelta(name, object, index);\n\t    // const customRecord = this._o.customProps[name];\n\t    // switch ( customRecord.type.toLowerCase() ) {\n\t    //   case 'color':  { return this._parseColorDelta( name, object ); }\n\t    //   case 'array':  { return this._parseArrayDelta( name, object ); }\n\t    //   case 'number': { return this._parseNumberDelta( name, object, index ); }\n\t    //   case 'unit':   { return this._parseUnitDelta( name, object, index ); }\n\t    // }\n\t  };\n\t  /**\n\t    Method to parse delta by reasoning about it's value.\n\t    @private\n\t    @param {String} Property name.\n\t    @param {Object} Raw delta object.\n\t    @param {Number} Module index.\n\t  */\n\n\n\t  Deltas.prototype._parseDeltaByGuess = function _parseDeltaByGuess(name, object, index) {\n\t    var _preparseDelta2 = this._preparseDelta(object),\n\t        start = _preparseDelta2.start;\n\n\t    var o = this._o;\n\n\t    // color values\n\t    if (isNaN(parseFloat(start)) && !start.match(/rand\\(/) && !start.match(/stagger\\(/)) {\n\t      return this._parseColorDelta(name, object);\n\t      // array values\n\t    } else if (o.arrayPropertyMap && o.arrayPropertyMap[name]) {\n\t      return this._parseArrayDelta(name, object);\n\t      // unit or number values\n\t    } else {\n\t      return o.numberPropertyMap && o.numberPropertyMap[name] ?\n\t      // if the property is in the number property map - parse it like number\n\t      this._parseNumberDelta(name, object, index)\n\t      // otherwise - like number with units\n\t      : this._parseUnitDelta(name, object, index);\n\t    }\n\t  };\n\t  /*\n\t    Method to separate tween options from delta properties.\n\t    @param {Object} Object for separation.\n\t    @returns {Object} Object that contains 2 objects\n\t                        - one delta options\n\t                        - one tween options ( could be empty if no tween opts )\n\t  */\n\n\n\t  Deltas.prototype._splitTweenOptions = function _splitTweenOptions(delta) {\n\t    delta = (0, _extends3.default)({}, delta);\n\n\t    var keys = (0, _keys2.default)(delta),\n\t        tweenOptions = {};\n\t    var isTween = null;\n\n\t    for (var i = 0; i < keys.length; i++) {\n\t      var key = keys[i];\n\t      if (TWEEN_PROPERTIES[key]) {\n\t        if (delta[key] != null) {\n\t          tweenOptions[key] = delta[key];\n\t          isTween = true;\n\t        }\n\t        delete delta[key];\n\t      }\n\t    }\n\t    return {\n\t      delta: delta,\n\t      tweenOptions: isTween ? tweenOptions : undefined\n\t    };\n\t  };\n\t  /*\n\t    Method to check if the property is delta property.\n\t    @private\n\t    @param {Any} Parameter value to check.\n\t    @returns {Boolean}\n\t  */\n\n\n\t  Deltas.prototype._isDelta = function _isDelta(optionsValue) {\n\t    var isObject = h.isObject(optionsValue);\n\t    isObject = isObject && !optionsValue.unit;\n\t    return !(!isObject || h.isArray(optionsValue) || h.isDOM(optionsValue));\n\t  };\n\t  /*\n\t    Method to parse color delta values.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Any} Property value.\n\t    @returns {Object} Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._parseColorDelta = function _parseColorDelta(key, value) {\n\t    if (key === 'strokeLinecap') {\n\t      h.warn('Sorry, stroke-linecap property is not animatable yet, using the start(#{start}) value instead', value);\n\t      return {};\n\t    }\n\t    var preParse = this._preparseDelta(value);\n\n\t    var startColorObj = this._makeColorObj(preParse.start),\n\t        endColorObj = this._makeColorObj(preParse.end);\n\n\t    var delta = {\n\t      type: 'color',\n\t      name: key,\n\t      start: startColorObj,\n\t      end: endColorObj,\n\t      curve: preParse.curve,\n\t      delta: {\n\t        r: endColorObj.r - startColorObj.r,\n\t        g: endColorObj.g - startColorObj.g,\n\t        b: endColorObj.b - startColorObj.b,\n\t        a: endColorObj.a - startColorObj.a\n\t      }\n\t    };\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to parse array delta values.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Any} Property value.\n\t    @returns {Object} Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._parseArrayDelta = function _parseArrayDelta(key, value) {\n\t    var preParse = this._preparseDelta(value);\n\n\t    var startArr = this._strToArr(preParse.start),\n\t        endArr = this._strToArr(preParse.end);\n\n\t    h.normDashArrays(startArr, endArr);\n\n\t    for (var i = 0; i < startArr.length; i++) {\n\t      var end = endArr[i];\n\t      h.mergeUnits(startArr[i], end, key);\n\t    }\n\n\t    var delta = {\n\t      type: 'array',\n\t      name: key,\n\t      start: startArr,\n\t      end: endArr,\n\t      delta: h.calcArrDelta(startArr, endArr),\n\t      curve: preParse.curve\n\t    };\n\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to parse numeric delta values with units.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Any} Property value.\n\t    @param {Number} Index of the module.\n\t    @returns {Object} Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._parseUnitDelta = function _parseUnitDelta(key, value, index) {\n\t    var preParse = this._preparseDelta(value);\n\n\t    var end = h.parseUnit(h.parseStringOption(preParse.end, index)),\n\t        start = h.parseUnit(h.parseStringOption(preParse.start, index));\n\n\t    h.mergeUnits(start, end, key);\n\t    var delta = {\n\t      type: 'unit',\n\t      name: key,\n\t      start: start,\n\t      end: end,\n\t      delta: end.value - start.value,\n\t      curve: preParse.curve\n\t    };\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to parse numeric delta values without units.\n\t    @private\n\t    @param {String} Name of the property.\n\t    @param {Any} Property value.\n\t    @param {Number} Index of the module.\n\t    @returns {Object} Parsed delta.\n\t  */\n\n\n\t  Deltas.prototype._parseNumberDelta = function _parseNumberDelta(key, value, index) {\n\t    var preParse = this._preparseDelta(value);\n\n\t    var end = parseFloat(h.parseStringOption(preParse.end, index)),\n\t        start = parseFloat(h.parseStringOption(preParse.start, index));\n\n\t    var delta = {\n\t      type: 'number',\n\t      name: key,\n\t      start: start,\n\t      end: end,\n\t      delta: end - start,\n\t      curve: preParse.curve\n\t    };\n\n\t    return delta;\n\t  };\n\t  /*\n\t    Method to extract `curve` and `start`/`end` values.\n\t    @private\n\t    @param {Object} Delta object.\n\t    @returns {Object} Preparsed delta.\n\t              @property {String} Start value.\n\t              @property {String, Number} End value.\n\t  */\n\n\n\t  Deltas.prototype._preparseDelta = function _preparseDelta(value) {\n\t    // clone value object\n\t    value = (0, _extends3.default)({}, value);\n\t    // parse curve if exist\n\t    var curve = value.curve;\n\t    if (curve != null) {\n\t      curve = easing.parseEasing(curve);\n\t      curve._parent = this;\n\t    }\n\t    delete value.curve;\n\t    // parse start and end values\n\t    var start = (0, _keys2.default)(value)[0],\n\t        end = value[start];\n\n\t    return { start: start, end: end, curve: curve };\n\t  };\n\t  /*\n\t    Method to parse color into usable object.\n\t    @private\n\t    @param {String} Color string.\n\t    @returns {Object} Parsed color value.\n\t  */\n\n\n\t  Deltas.prototype._makeColorObj = function _makeColorObj(color) {\n\t    // HEX\n\t    var colorObj = {};\n\t    if (color[0] === '#') {\n\t      var result = /^#?([a-f\\d]{1,2})([a-f\\d]{1,2})([a-f\\d]{1,2})$/i.exec(color);\n\t      if (result) {\n\t        var r = result[1].length === 2 ? result[1] : result[1] + result[1],\n\t            g = result[2].length === 2 ? result[2] : result[2] + result[2],\n\t            b = result[3].length === 2 ? result[3] : result[3] + result[3];\n\n\t        colorObj = {\n\t          r: parseInt(r, 16), g: parseInt(g, 16), b: parseInt(b, 16), a: 1\n\t        };\n\t      }\n\t    }\n\n\t    // not HEX\n\t    // shorthand color and rgb()\n\t    if (color[0] !== '#') {\n\t      var isRgb = color[0] === 'r' && color[1] === 'g' && color[2] === 'b';\n\t      var rgbColor = void 0;\n\t      // rgb color\n\t      if (isRgb) {\n\t        rgbColor = color;\n\t      };\n\t      // shorthand color name\n\t      if (!isRgb) {\n\t        if (!this._shortColors[color]) {\n\t          h.div.style.color = color;\n\t          rgbColor = h.computedStyle(h.div).color;\n\t        } else {\n\t          rgbColor = this._shortColors[color];\n\t        }\n\t      }\n\n\t      var regexString1 = '^rgba?\\\\((\\\\d{1,3}),\\\\s?(\\\\d{1,3}),',\n\t          regexString2 = '\\\\s?(\\\\d{1,3}),?\\\\s?(\\\\d{1}|0?\\\\.\\\\d{1,})?\\\\)$',\n\t          _result = new RegExp(regexString1 + regexString2, 'gi').exec(rgbColor),\n\t          alpha = parseFloat(_result[4] || 1);\n\n\t      if (_result) {\n\t        colorObj = {\n\t          r: parseInt(_result[1], 10),\n\t          g: parseInt(_result[2], 10),\n\t          b: parseInt(_result[3], 10),\n\t          a: alpha != null && !isNaN(alpha) ? alpha : 1\n\t        };\n\t      }\n\t    }\n\n\t    return colorObj;\n\t  };\n\t  /*\n\t    Method to parse string into array.\n\t    @private\n\t    @param {String, Number} String or number to parse.\n\t    @returns {Array} Parsed array.\n\t  */\n\n\n\t  Deltas.prototype._strToArr = function _strToArr(string) {\n\t    var arr = [];\n\t    // plain number\n\t    if (typeof string === 'number' && !isNaN(string)) {\n\t      arr.push(h.parseUnit(string));\n\t      return arr;\n\t    }\n\t    // string array\n\t    string.trim().split(/\\s+/gim).forEach(function (str) {\n\t      arr.push(h.parseUnit(h.parseIfRand(str)));\n\t    });\n\t    return arr;\n\t  };\n\n\t  return Deltas;\n\t}();\n\n\texports.default = Deltas;\n\n/***/ }),\n/* 126 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _tween = __webpack_require__(101);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar h = __webpack_require__(71);\n\n\tvar Delta = function () {\n\t  function Delta() {\n\t    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t    (0, _classCallCheck3.default)(this, Delta);\n\n\t    this._o = o;\n\t    this._createTween(o.tweenOptions);\n\t    // initial properties render\n\t    !this._o.isChained && this.refresh(true);\n\t  }\n\t  /*\n\t    Method to call `_refresh` method on `tween`.\n\t    Use switch between `0` and `1` progress for delta value.\n\t    @public\n\t    @param {Boolean} If refresh before start time or after.\n\t    @returns this.\n\t  */\n\n\n\t  Delta.prototype.refresh = function refresh(isBefore) {\n\t    this._previousValues = [];\n\n\t    var deltas = this._o.deltas;\n\t    for (var i = 0; i < deltas.length; i++) {\n\t      var name = deltas[i].name;\n\t      this._previousValues.push({\n\t        name: name, value: this._o.props[name]\n\t      });\n\t    }\n\n\t    this.tween._refresh(isBefore);\n\t    return this;\n\t  };\n\t  /*\n\t    Method to restore all saved properties from `_previousValues` array.\n\t    @public\n\t    @returns this.\n\t  */\n\n\n\t  Delta.prototype.restore = function restore() {\n\t    var prev = this._previousValues;\n\t    for (var i = 0; i < prev.length; i++) {\n\t      var record = prev[i];\n\t      this._o.props[record.name] = record.value;\n\t    }\n\t    return this;\n\t  };\n\t  /*\n\t    Method to create tween of the delta.\n\t    @private\n\t    @param {Object} Options object.\n\t  */\n\n\n\t  Delta.prototype._createTween = function _createTween() {\n\t    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t    var it = this;\n\t    o.callbackOverrides = {\n\t      onUpdate: function onUpdate(ep, p) {\n\t        it._calcCurrentProps(ep, p);\n\t      }\n\t    };\n\n\t    // if not chained - add the onRefresh callback\n\t    // to refresh the tween when needed\n\t    if (!this._o.isChained) {\n\t      o.callbackOverrides.onRefresh = function (isBefore, ep, p) {\n\t        it._calcCurrentProps(ep, p);\n\t      };\n\t    }\n\n\t    o.callbacksContext = this._o.callbacksContext;\n\t    this.tween = new _tween2.default(o);\n\t  };\n\t  /*\n\t    Method to calculate current progress of the deltas.\n\t    @private\n\t    @param {Number} Eased progress to calculate - [0..1].\n\t    @param {Number} Progress to calculate - [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrentProps = function _calcCurrentProps(easedProgress, p) {\n\t    var deltas = this._o.deltas;\n\t    for (var i = 0; i < deltas.length; i++) {\n\t      var type = deltas[i].type;\n\t      this['_calcCurrent_' + type](deltas[i], easedProgress, p);\n\t    }\n\t  };\n\t  /*\n\t    Method to calc the current color delta value.\n\t    @param {Object} Delta\n\t    @param {Number} Eased progress [0..1].\n\t    @param {Number} Plain progress [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrent_color = function _calcCurrent_color(delta, ep, p) {\n\t    var r,\n\t        g,\n\t        b,\n\t        a,\n\t        start = delta.start,\n\t        d = delta.delta;\n\t    if (!delta.curve) {\n\t      r = parseInt(start.r + ep * d.r, 10);\n\t      g = parseInt(start.g + ep * d.g, 10);\n\t      b = parseInt(start.b + ep * d.b, 10);\n\t      a = parseFloat(start.a + ep * d.a);\n\t    } else {\n\t      var cp = delta.curve(p);\n\t      r = parseInt(cp * (start.r + p * d.r), 10);\n\t      g = parseInt(cp * (start.g + p * d.g), 10);\n\t      b = parseInt(cp * (start.b + p * d.b), 10);\n\t      a = parseFloat(cp * (start.a + p * d.a));\n\t    }\n\t    this._o.props[delta.name] = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\t  };\n\t  /*\n\t    Method to calc the current number delta value.\n\t    @param {Object} Delta\n\t    @param {Number} Eased progress [0..1].\n\t    @param {Number} Plain progress [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrent_number = function _calcCurrent_number(delta, ep, p) {\n\t    this._o.props[delta.name] = !delta.curve ? delta.start + ep * delta.delta : delta.curve(p) * (delta.start + p * delta.delta);\n\t  };\n\t  /*\n\t    Method to calc the current number with units delta value.\n\t    @param {Object} Delta\n\t    @param {Number} Eased progress [0..1].\n\t    @param {Number} Plain progress [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrent_unit = function _calcCurrent_unit(delta, ep, p) {\n\t    var currentValue = !delta.curve ? delta.start.value + ep * delta.delta : delta.curve(p) * (delta.start.value + p * delta.delta);\n\n\t    this._o.props[delta.name] = '' + currentValue + delta.end.unit;\n\t  };\n\t  /*\n\t    Method to calc the current array delta value.\n\t    @param {Object} Delta\n\t    @param {Number} Eased progress [0..1].\n\t    @param {Number} Plain progress [0..1].\n\t  */\n\n\n\t  Delta.prototype._calcCurrent_array = function _calcCurrent_array(delta, ep, p) {\n\t    // var arr,\n\t    var name = delta.name,\n\t        props = this._o.props,\n\t        string = '';\n\n\t    // to prevent GC bothering with arrays garbage\n\t    // if ( h.isArray( props[name] ) ) {\n\t    //   arr = props[name];\n\t    //   arr.length = 0;\n\t    // } else { arr = []; }\n\n\t    // just optimization to prevent curve\n\t    // calculations on every array item\n\t    var proc = delta.curve ? delta.curve(p) : null;\n\n\t    for (var i = 0; i < delta.delta.length; i++) {\n\t      var item = delta.delta[i],\n\t          dash = !delta.curve ? delta.start[i].value + ep * item.value : proc * (delta.start[i].value + p * item.value);\n\n\t      string += '' + dash + item.unit + ' ';\n\t      // arr.push({\n\t      //   string: `${dash}${item.unit}`,\n\t      //   value:  dash,\n\t      //   unit:   item.unit,\n\t      // });\n\t    }\n\t    props[name] = string;\n\t  };\n\n\t  return Delta;\n\t}();\n\n\texports.default = Delta;\n\n/***/ }),\n/* 127 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar _keys = __webpack_require__(95);\n\n\tvar _keys2 = _interopRequireDefault(_keys);\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _possibleConstructorReturn2 = __webpack_require__(75);\n\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\n\tvar _inherits2 = __webpack_require__(76);\n\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _timeline = __webpack_require__(110);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tvar _tunable = __webpack_require__(116);\n\n\tvar _tunable2 = _interopRequireDefault(_tunable);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar Stagger = function (_Tunable) {\n\t  (0, _inherits3.default)(Stagger, _Tunable);\n\n\t  function Stagger(options, Module) {\n\t    var _ret;\n\n\t    (0, _classCallCheck3.default)(this, Stagger);\n\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, _Tunable.call(this));\n\n\t    return _ret = _this._init(options, Module), (0, _possibleConstructorReturn3.default)(_this, _ret);\n\t  }\n\t  /*\r\n\t    Method to create then chain on child modules.\r\n\t    @param {Object} Then options.\r\n\t    @return {Object} this.\r\n\t  */\n\n\n\t  Stagger.prototype.then = function then(o) {\n\t    if (o == null) {\n\t      return this;\n\t    }\n\t    for (var i = 0; i < this._modules.length; i++) {\n\t      // get child module's option and pass to the child `then`\n\t      this._modules[i].then(this._getOptionByIndex(i, o));\n\t    }\n\t    this.timeline._recalcTotalDuration();\n\t    return this;\n\t  };\n\t  /*\r\n\t    Method to tune child modules.\r\n\t    @param {Object} Tune options.\r\n\t    @return {Object} this.\r\n\t  */\n\n\n\t  Stagger.prototype.tune = function tune(o) {\n\t    if (o == null) {\n\t      return this;\n\t    }\n\t    for (var i = 0; i < this._modules.length; i++) {\n\t      // get child module's option and pass to the child `then`\n\t      this._modules[i].tune(this._getOptionByIndex(i, o));\n\t    }\n\t    this.timeline._recalcTotalDuration();\n\t    return this;\n\t  };\n\t  /*\r\n\t    Method to generate child modules.\r\n\t    @return {Object} this.\r\n\t  */\n\n\n\t  Stagger.prototype.generate = function generate() {\n\t    for (var i = 0; i < this._modules.length; i++) {\n\t      // get child module's option and pass to the child `then`\n\t      this._modules[i].generate();\n\t    }\n\t    this.timeline._recalcTotalDuration();\n\t    return this;\n\t  };\n\t  /*\r\n\t    Method to get an option by modulo and name.\r\n\t    @param {String} Name of the property to get.\r\n\t    @param {Number} Index for the modulo calculation.\r\n\t    @param {Object} Options hash to look in.\r\n\t    @return {Any} Property.\r\n\t  */\n\n\n\t  Stagger.prototype._getOptionByMod = function _getOptionByMod(name, i, store) {\n\t    var props = store[name];\n\t    // if not dom list then clone it to array\n\t    if (props + '' === '[object NodeList]' || props + '' === '[object HTMLCollection]') props = Array.prototype.slice.call(props, 0);\n\t    // get the value in array or return the value itself\n\t    var value = _h2.default.isArray(props) ? props[i % props.length] : props;\n\t    // check if value has the stagger expression, if so parse it\n\t    return _h2.default.parseIfStagger(value, i);\n\t  };\n\t  /*\r\n\t    Method to get option by modulo of index.\r\n\t    @param {Number} Index for modulo calculations.\r\n\t    @param {Object} Options hash to look in.\r\n\t  */\n\n\n\t  Stagger.prototype._getOptionByIndex = function _getOptionByIndex(i, store) {\n\t    var _this2 = this;\n\n\t    var options = {};\n\t    (0, _keys2.default)(store).forEach(function (key) {\n\t      return options[key] = _this2._getOptionByMod(key, i, store);\n\t    });\n\t    return options;\n\t  };\n\t  /*\r\n\t    Method to get total child modules quantity.\r\n\t    @param  {String} Name of quantifier in options hash.\r\n\t    @param  {Object} Options hash object.\r\n\t    @return {Number} Number of child object that should be defined.\r\n\t  */\n\n\n\t  Stagger.prototype._getChildQuantity = function _getChildQuantity(name, store) {\n\t    // if number was set\n\t    if (typeof name === 'number') {\n\t      return name;\n\t    }\n\n\t    var quantifier = store[name];\n\t    if (_h2.default.isArray(quantifier)) {\n\t      return quantifier.length;\n\t    } else if (quantifier + '' === '[object NodeList]') {\n\t      return quantifier.length;\n\t    } else if (quantifier + '' === '[object HTMLCollection]') {\n\t      return Array.prototype.slice.call(quantifier, 0).length;\n\t    } else if (quantifier instanceof HTMLElement) {\n\t      return 1;\n\t    } else if (typeof quantifier == 'string') {\n\t      return 1;\n\t    }\n\t  };\n\t  /*\r\n\t    Method to make stagger form options\r\n\t    @param {Object} Options.\r\n\t    @param {Object} Child class.\r\n\t  */\n\n\n\t  Stagger.prototype._init = function _init(options, Module) {\n\t    var count = this._getChildQuantity(options.quantifier || 'el', options);\n\t    this._createTimeline(options);this._modules = [];\n\t    for (var i = 0; i < count; i++) {\n\t      // get child module's option\n\t      var option = this._getOptionByIndex(i, options);\n\t      option.isRunLess = true;\n\t      // set index of the module\n\t      option.index = i;\n\t      // create child module\n\t      var module = new Module(option);this._modules.push(module);\n\t      // add child module's timeline to the self timeline\n\t      this.timeline.add(module);\n\t    }\n\t    return this;\n\t  };\n\t  /*\r\n\t    Method to create timeline.\r\n\t    @param {Object} Timeline options.\r\n\t  */\n\n\n\t  Stagger.prototype._createTimeline = function _createTimeline() {\n\t    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t    this.timeline = new _timeline2.default(options.timeline);\n\t  };\n\n\t  /* @overrides @ Tweenable */\n\n\n\t  Stagger.prototype._makeTween = function _makeTween() {};\n\n\t  Stagger.prototype._makeTimeline = function _makeTimeline() {};\n\n\t  return Stagger;\n\t}(_tunable2.default);\n\n\tmodule.exports = function (Module) {\n\t  return function (options) {\n\t    return new Stagger(options, Module);\n\t  };\n\t};\n\n/***/ }),\n/* 128 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\texports.__esModule = true;\n\n\tvar _classCallCheck2 = __webpack_require__(74);\n\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\n\tvar _h = __webpack_require__(71);\n\n\tvar _h2 = _interopRequireDefault(_h);\n\n\tvar _tween = __webpack_require__(101);\n\n\tvar _tween2 = _interopRequireDefault(_tween);\n\n\tvar _timeline = __webpack_require__(110);\n\n\tvar _timeline2 = _interopRequireDefault(_timeline);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/*\r\n\t  Class for toggling opacity on bunch of elements\r\n\t  @class Spriter\r\n\t  @todo\r\n\t    - add isForce3d option\r\n\t    - add run new option merging\r\n\t    - add then chains\r\n\t*/\n\tvar Spriter = function () {\n\t  /*\r\n\t    Defaults/APIs\r\n\t  */\n\t  Spriter.prototype._declareDefaults = function _declareDefaults() {\n\t    this._defaults = {\n\t      /*\r\n\t        Duration\r\n\t        @property duration\r\n\t        @type     {Number}\r\n\t      */\n\t      duration: 500,\n\t      /*\r\n\t        Delay\r\n\t        @property delay\r\n\t        @type     {Number}\r\n\t      */\n\t      delay: 0,\n\t      /*\r\n\t        Easing. Please see the \r\n\t        [timeline module parseEasing function](timeline.coffee.html#parseEasing)\r\n\t        for all avaliable options.\r\n\t          @property easing\r\n\t        @type     {String, Function}\r\n\t      */\n\t      easing: 'linear.none',\n\t      /*\r\n\t        Repeat times count\r\n\t        \r\n\t        @property repeat\r\n\t        @type     {Number}\r\n\t      */\n\t      repeat: 0,\n\t      /*\r\n\t        Yoyo option defines if animation should be altered on repeat.\r\n\t        \r\n\t        @property yoyo\r\n\t        @type     {Boolean}\r\n\t      */\n\t      yoyo: false,\n\t      /*\r\n\t        isRunLess option prevents animation from running immediately after\r\n\t        initialization.\r\n\t        \r\n\t        @property isRunLess\r\n\t        @type     {Boolean}\r\n\t      */\n\t      isRunLess: false,\n\t      /*\r\n\t        isShowEnd option defines if the last frame should be shown when\r\n\t        animation completed.\r\n\t        \r\n\t        @property isShowEnd\r\n\t        @type     {Boolean}\r\n\t      */\n\t      isShowEnd: false,\n\t      /*\r\n\t        onStart callback will be called once on animation start.\r\n\t        \r\n\t        @property onStart\r\n\t        @type     {Function}\r\n\t      */\n\t      onStart: null,\n\t      /*\r\n\t        onUpdate callback will be called on every frame of the animation.\r\n\t        The current progress in range **[0,1]** will be passed to the callback.\r\n\t        \r\n\t        @property onUpdate\r\n\t        @type     {Function}\r\n\t      */\n\t      onUpdate: null,\n\t      /*\r\n\t        onComplete callback will be called once on animation complete.\r\n\t        \r\n\t        @property onComplete\r\n\t        @type     {Function}\r\n\t      */\n\t      onComplete: null\n\t    };\n\t  };\n\n\t  function Spriter() {\n\t    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t    (0, _classCallCheck3.default)(this, Spriter);\n\n\t    this.o = o;\n\t    if (!this.o.el) {\n\t      return _h2.default.error('No \"el\" option specified, aborting');\n\t    }\n\t    this._vars();this._declareDefaults();this._extendDefaults();this._parseFrames();\n\t    if (this._frames.length <= 2) _h2.default.warn('Spriter: only ' + this._frames.length + ' frames found');\n\t    if (this._frames.length < 1) _h2.default.error(\"Spriter: there is no frames to animate, aborting\");\n\t    this._createTween();\n\t    return this;\n\t  }\n\t  /*\r\n\t    Method to declare some variables.\r\n\t    \r\n\t    @method run\r\n\t    @param  {Object} New options\r\n\t    @todo   Implement new object merging\r\n\t  */\n\n\n\t  Spriter.prototype._vars = function _vars() {\n\t    this._props = _h2.default.cloneObj(this.o);\n\t    this.el = this.o.el;\n\t    this._frames = [];\n\t  };\n\t  /*\r\n\t    Method to run the spriter on demand.\r\n\t    \r\n\t    @method run\r\n\t    @param  {Object} New options\r\n\t    @todo   Implement new object merging\r\n\t  */\n\n\n\t  Spriter.prototype.run = function run(o) {\n\t    return this.timeline.play();\n\t  };\n\t  /*\r\n\t    Method to extend _props by options(this.o)\r\n\t    \r\n\t    @method _extendDefaults\r\n\t  */\n\n\n\t  Spriter.prototype._extendDefaults = function _extendDefaults() {\n\t    return _h2.default.extend(this._props, this._defaults);\n\t  };\n\t  /*\r\n\t    Method to parse frames as child nodes of el.\r\n\t    \r\n\t    @method _parseFrames\r\n\t  */\n\n\n\t  Spriter.prototype._parseFrames = function _parseFrames() {\n\t    this._frames = Array.prototype.slice.call(this.el.children, 0);\n\t    this._frames.forEach(function (frame, i) {\n\t      return frame.style.opacity = 0;\n\t    });\n\t    this._frameStep = 1 / this._frames.length;\n\t  };\n\n\t  /*\r\n\t    Method to create tween and timeline and supply callbacks.\r\n\t    \r\n\t    @method _createTween\r\n\t  */\n\n\n\t  Spriter.prototype._createTween = function _createTween() {\n\t    var _this = this;\n\n\t    this._tween = new _tween2.default({\n\t      duration: this._props.duration,\n\t      delay: this._props.delay,\n\t      yoyo: this._props.yoyo,\n\t      repeat: this._props.repeat,\n\t      easing: this._props.easing,\n\t      onStart: function onStart() {\n\t        return _this._props.onStart && _this._props.onStart();\n\t      },\n\t      onComplete: function onComplete() {\n\t        return _this._props.onComplete && _this._props.onComplete();\n\t      },\n\t      onUpdate: function onUpdate(p) {\n\t        return _this._setProgress(p);\n\t      }\n\t    });\n\t    this.timeline = new _timeline2.default();this.timeline.add(this._tween);\n\t    if (!this._props.isRunLess) this._startTween();\n\t  };\n\n\t  /*\r\n\t    Method to start tween\r\n\t    \r\n\t    @method _startTween\r\n\t  */\n\n\n\t  Spriter.prototype._startTween = function _startTween() {\n\t    var _this2 = this;\n\n\t    setTimeout(function () {\n\t      return _this2.timeline.play();\n\t    }, 1);\n\t  };\n\t  /*\r\n\t    Method to set progress of the sprite\r\n\t    \r\n\t    @method _setProgress\r\n\t    @param  {Number} Progress in range **[0,1]**\r\n\t  */\n\n\n\t  Spriter.prototype._setProgress = function _setProgress(p) {\n\t    // get the frame number\n\t    var proc = Math.floor(p / this._frameStep);\n\t    // react only if frame changes\n\t    if (this._prevFrame != this._frames[proc]) {\n\t      // if previous frame isnt current one, hide it\n\t      if (this._prevFrame) {\n\t        this._prevFrame.style.opacity = 0;\n\t      }\n\t      // if end of animation and isShowEnd flag was specified\n\t      // then show the last frame else show current frame\n\t      var currentNum = p === 1 && this._props.isShowEnd ? proc - 1 : proc;\n\t      // show the current frame\n\t      if (this._frames[currentNum]) {\n\t        this._frames[currentNum].style.opacity = 1;\n\t      }\n\t      // set previous frame as current\n\t      this._prevFrame = this._frames[proc];\n\t    }\n\t    if (this._props.onUpdate) {\n\t      this._props.onUpdate(p);\n\t    }\n\t  };\n\n\t  return Spriter;\n\t}();\n\n\texports.default = Spriter;\n\n/***/ }),\n/* 129 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar MotionPath, Timeline, Tween, h, resize,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n\th = __webpack_require__(71);\n\n\tresize = __webpack_require__(130);\n\n\tTween = __webpack_require__(101)[\"default\"];\n\n\tTimeline = __webpack_require__(110)[\"default\"];\n\n\tMotionPath = (function() {\n\t  MotionPath.prototype.defaults = {\n\t    path: null,\n\t    curvature: {\n\t      x: '75%',\n\t      y: '50%'\n\t    },\n\t    isCompositeLayer: true,\n\t    delay: 0,\n\t    duration: 1000,\n\t    easing: null,\n\t    repeat: 0,\n\t    yoyo: false,\n\t    onStart: null,\n\t    onComplete: null,\n\t    onUpdate: null,\n\t    offsetX: 0,\n\t    offsetY: 0,\n\t    angleOffset: null,\n\t    pathStart: 0,\n\t    pathEnd: 1,\n\t    motionBlur: 0,\n\t    transformOrigin: null,\n\t    isAngle: false,\n\t    isReverse: false,\n\t    isRunLess: false,\n\t    isPresetPosition: true\n\t  };\n\n\t  function MotionPath(o1) {\n\t    this.o = o1 != null ? o1 : {};\n\t    this.calcHeight = bind(this.calcHeight, this);\n\t    if (this.vars()) {\n\t      return;\n\t    }\n\t    this.createTween();\n\t    this;\n\t  }\n\n\t  MotionPath.prototype.vars = function() {\n\t    this.getScaler = h.bind(this.getScaler, this);\n\t    this.resize = resize;\n\t    this.props = h.cloneObj(this.defaults);\n\t    this.extendOptions(this.o);\n\t    this.isMotionBlurReset = h.isSafari || h.isIE;\n\t    this.isMotionBlurReset && (this.props.motionBlur = 0);\n\t    this.history = [h.cloneObj(this.props)];\n\t    return this.postVars();\n\t  };\n\n\t  MotionPath.prototype.curveToPath = function(o) {\n\t    var angle, curvature, curvatureX, curvatureY, curvePoint, curveXPoint, dX, dY, endPoint, path, percent, radius, start;\n\t    path = document.createElementNS(h.NS, 'path');\n\t    start = o.start;\n\t    endPoint = {\n\t      x: start.x + o.shift.x,\n\t      y: start.x + o.shift.y\n\t    };\n\t    curvature = o.curvature;\n\t    dX = o.shift.x;\n\t    dY = o.shift.y;\n\t    radius = Math.sqrt(dX * dX + dY * dY);\n\t    percent = radius / 100;\n\t    angle = Math.atan(dY / dX) * (180 / Math.PI) + 90;\n\t    if (o.shift.x < 0) {\n\t      angle = angle + 180;\n\t    }\n\t    curvatureX = h.parseUnit(curvature.x);\n\t    curvatureX = curvatureX.unit === '%' ? curvatureX.value * percent : curvatureX.value;\n\t    curveXPoint = h.getRadialPoint({\n\t      center: {\n\t        x: start.x,\n\t        y: start.y\n\t      },\n\t      radius: curvatureX,\n\t      angle: angle\n\t    });\n\t    curvatureY = h.parseUnit(curvature.y);\n\t    curvatureY = curvatureY.unit === '%' ? curvatureY.value * percent : curvatureY.value;\n\t    curvePoint = h.getRadialPoint({\n\t      center: {\n\t        x: curveXPoint.x,\n\t        y: curveXPoint.y\n\t      },\n\t      radius: curvatureY,\n\t      angle: angle + 90\n\t    });\n\t    path.setAttribute('d', \"M\" + start.x + \",\" + start.y + \" Q\" + curvePoint.x + \",\" + curvePoint.y + \" \" + endPoint.x + \",\" + endPoint.y);\n\t    return path;\n\t  };\n\n\t  MotionPath.prototype.postVars = function() {\n\t    this.props.pathStart = h.clamp(this.props.pathStart, 0, 1);\n\t    this.props.pathEnd = h.clamp(this.props.pathEnd, this.props.pathStart, 1);\n\t    this.angle = 0;\n\t    this.speedX = 0;\n\t    this.speedY = 0;\n\t    this.blurX = 0;\n\t    this.blurY = 0;\n\t    this.prevCoords = {};\n\t    this.blurAmount = 20;\n\t    this.props.motionBlur = h.clamp(this.props.motionBlur, 0, 1);\n\t    this.onUpdate = this.props.onUpdate;\n\t    if (!this.o.el) {\n\t      h.error('Missed \"el\" option. It could be a selector, DOMNode or another module.');\n\t      return true;\n\t    }\n\t    this.el = this.parseEl(this.props.el);\n\t    this.props.motionBlur > 0 && this.createFilter();\n\t    this.path = this.getPath();\n\t    if (!this.path.getAttribute('d')) {\n\t      h.error('Path has no coordinates to work with, aborting');\n\t      return true;\n\t    }\n\t    this.len = this.path.getTotalLength();\n\t    this.slicedLen = this.len * (this.props.pathEnd - this.props.pathStart);\n\t    this.startLen = this.props.pathStart * this.len;\n\t    this.fill = this.props.fill;\n\t    if (this.fill != null) {\n\t      this.container = this.parseEl(this.props.fill.container);\n\t      this.fillRule = this.props.fill.fillRule || 'all';\n\t      this.getScaler();\n\t      if (this.container != null) {\n\t        this.removeEvent(this.container, 'onresize', this.getScaler);\n\t        return this.addEvent(this.container, 'onresize', this.getScaler);\n\t      }\n\t    }\n\t  };\n\n\t  MotionPath.prototype.addEvent = function(el, type, handler) {\n\t    return el.addEventListener(type, handler, false);\n\t  };\n\n\t  MotionPath.prototype.removeEvent = function(el, type, handler) {\n\t    return el.removeEventListener(type, handler, false);\n\t  };\n\n\t  MotionPath.prototype.createFilter = function() {\n\t    var div, svg;\n\t    div = document.createElement('div');\n\t    this.filterID = \"filter-\" + (h.getUniqID());\n\t    div.innerHTML = \"<svg id=\\\"svg-\" + this.filterID + \"\\\"\\n    style=\\\"visibility:hidden; width:0px; height:0px\\\">\\n  <filter id=\\\"\" + this.filterID + \"\\\" y=\\\"-20\\\" x=\\\"-20\\\" width=\\\"40\\\" height=\\\"40\\\">\\n    <feOffset\\n      id=\\\"blur-offset\\\" in=\\\"SourceGraphic\\\"\\n      dx=\\\"0\\\" dy=\\\"0\\\" result=\\\"offset2\\\"></feOffset>\\n    <feGaussianblur\\n      id=\\\"blur\\\" in=\\\"offset2\\\"\\n      stdDeviation=\\\"0,0\\\" result=\\\"blur2\\\"></feGaussianblur>\\n    <feMerge>\\n      <feMergeNode in=\\\"SourceGraphic\\\"></feMergeNode>\\n      <feMergeNode in=\\\"blur2\\\"></feMergeNode>\\n    </feMerge>\\n  </filter>\\n</svg>\";\n\t    svg = div.querySelector(\"#svg-\" + this.filterID);\n\t    this.filter = svg.querySelector('#blur');\n\t    this.filterOffset = svg.querySelector('#blur-offset');\n\t    document.body.insertBefore(svg, document.body.firstChild);\n\t    this.el.style['filter'] = \"url(#\" + this.filterID + \")\";\n\t    return this.el.style[h.prefix.css + \"filter\"] = \"url(#\" + this.filterID + \")\";\n\t  };\n\n\t  MotionPath.prototype.parseEl = function(el) {\n\t    if (typeof el === 'string') {\n\t      return document.querySelector(el);\n\t    }\n\t    if (el instanceof HTMLElement) {\n\t      return el;\n\t    }\n\t    if (el._setProp != null) {\n\t      this.isModule = true;\n\t      return el;\n\t    }\n\t  };\n\n\t  MotionPath.prototype.getPath = function() {\n\t    var path;\n\t    path = h.parsePath(this.props.path);\n\t    if (path) {\n\t      return path;\n\t    }\n\t    if (this.props.path.x || this.props.path.y) {\n\t      return this.curveToPath({\n\t        start: {\n\t          x: 0,\n\t          y: 0\n\t        },\n\t        shift: {\n\t          x: this.props.path.x || 0,\n\t          y: this.props.path.y || 0\n\t        },\n\t        curvature: {\n\t          x: this.props.curvature.x || this.defaults.curvature.x,\n\t          y: this.props.curvature.y || this.defaults.curvature.y\n\t        }\n\t      });\n\t    }\n\t  };\n\n\t  MotionPath.prototype.getScaler = function() {\n\t    var end, size, start;\n\t    this.cSize = {\n\t      width: this.container.offsetWidth || 0,\n\t      height: this.container.offsetHeight || 0\n\t    };\n\t    start = this.path.getPointAtLength(0);\n\t    end = this.path.getPointAtLength(this.len);\n\t    size = {};\n\t    this.scaler = {};\n\t    size.width = end.x >= start.x ? end.x - start.x : start.x - end.x;\n\t    size.height = end.y >= start.y ? end.y - start.y : start.y - end.y;\n\t    switch (this.fillRule) {\n\t      case 'all':\n\t        this.calcWidth(size);\n\t        return this.calcHeight(size);\n\t      case 'width':\n\t        this.calcWidth(size);\n\t        return this.scaler.y = this.scaler.x;\n\t      case 'height':\n\t        this.calcHeight(size);\n\t        return this.scaler.x = this.scaler.y;\n\t    }\n\t  };\n\n\t  MotionPath.prototype.calcWidth = function(size) {\n\t    this.scaler.x = this.cSize.width / size.width;\n\t    return !isFinite(this.scaler.x) && (this.scaler.x = 1);\n\t  };\n\n\t  MotionPath.prototype.calcHeight = function(size) {\n\t    this.scaler.y = this.cSize.height / size.height;\n\t    return !isFinite(this.scaler.y) && (this.scaler.y = 1);\n\t  };\n\n\t  MotionPath.prototype.run = function(o) {\n\t    var fistItem, key, value;\n\t    if (o) {\n\t      fistItem = this.history[0];\n\t      for (key in o) {\n\t        value = o[key];\n\t        if (h.callbacksMap[key] || h.tweenOptionMap[key]) {\n\t          h.warn(\"the property \\\"\" + key + \"\\\" property can not be overridden on run yet\");\n\t          delete o[key];\n\t        } else {\n\t          this.history[0][key] = value;\n\t        }\n\t      }\n\t      this.tuneOptions(o);\n\t    }\n\t    return this.startTween();\n\t  };\n\n\t  MotionPath.prototype.createTween = function() {\n\t    this.tween = new Tween({\n\t      duration: this.props.duration,\n\t      delay: this.props.delay,\n\t      yoyo: this.props.yoyo,\n\t      repeat: this.props.repeat,\n\t      easing: this.props.easing,\n\t      onStart: (function(_this) {\n\t        return function() {\n\t          var ref;\n\t          return (ref = _this.props.onStart) != null ? ref.apply(_this) : void 0;\n\t        };\n\t      })(this),\n\t      onComplete: (function(_this) {\n\t        return function() {\n\t          var ref;\n\t          _this.props.motionBlur && _this.setBlur({\n\t            blur: {\n\t              x: 0,\n\t              y: 0\n\t            },\n\t            offset: {\n\t              x: 0,\n\t              y: 0\n\t            }\n\t          });\n\t          return (ref = _this.props.onComplete) != null ? ref.apply(_this) : void 0;\n\t        };\n\t      })(this),\n\t      onUpdate: (function(_this) {\n\t        return function(p) {\n\t          return _this.setProgress(p);\n\t        };\n\t      })(this),\n\t      onFirstUpdate: (function(_this) {\n\t        return function(isForward, isYoyo) {\n\t          if (!isForward) {\n\t            return _this.history.length > 1 && _this.tuneOptions(_this.history[0]);\n\t          }\n\t        };\n\t      })(this)\n\t    });\n\t    this.timeline = new Timeline;\n\t    this.timeline.add(this.tween);\n\t    !this.props.isRunLess && this.startTween();\n\t    return this.props.isPresetPosition && this.setProgress(0, true);\n\t  };\n\n\t  MotionPath.prototype.startTween = function() {\n\t    return setTimeout(((function(_this) {\n\t      return function() {\n\t        var ref;\n\t        return (ref = _this.timeline) != null ? ref.play() : void 0;\n\t      };\n\t    })(this)), 1);\n\t  };\n\n\t  MotionPath.prototype.setProgress = function(p, isInit) {\n\t    var len, point, x, y;\n\t    len = this.startLen + (!this.props.isReverse ? p * this.slicedLen : (1 - p) * this.slicedLen);\n\t    point = this.path.getPointAtLength(len);\n\t    x = point.x + this.props.offsetX;\n\t    y = point.y + this.props.offsetY;\n\t    this._getCurrentAngle(point, len, p);\n\t    this._setTransformOrigin(p);\n\t    this._setTransform(x, y, p, isInit);\n\t    return this.props.motionBlur && this.makeMotionBlur(x, y);\n\t  };\n\n\t  MotionPath.prototype.setElPosition = function(x, y, p) {\n\t    var composite, isComposite, rotate, transform;\n\t    rotate = this.angle !== 0 ? \"rotate(\" + this.angle + \"deg)\" : '';\n\t    isComposite = this.props.isCompositeLayer && h.is3d;\n\t    composite = isComposite ? 'translateZ(0)' : '';\n\t    transform = \"translate(\" + x + \"px,\" + y + \"px) \" + rotate + \" \" + composite;\n\t    return h.setPrefixedStyle(this.el, 'transform', transform);\n\t  };\n\n\t  MotionPath.prototype.setModulePosition = function(x, y) {\n\t    this.el._setProp({\n\t      shiftX: x + \"px\",\n\t      shiftY: y + \"px\",\n\t      angle: this.angle\n\t    });\n\t    return this.el._draw();\n\t  };\n\n\t  MotionPath.prototype._getCurrentAngle = function(point, len, p) {\n\t    var atan, isTransformFunOrigin, prevPoint, x1, x2;\n\t    isTransformFunOrigin = typeof this.props.transformOrigin === 'function';\n\t    if (this.props.isAngle || (this.props.angleOffset != null) || isTransformFunOrigin) {\n\t      prevPoint = this.path.getPointAtLength(len - 1);\n\t      x1 = point.y - prevPoint.y;\n\t      x2 = point.x - prevPoint.x;\n\t      atan = Math.atan(x1 / x2);\n\t      !isFinite(atan) && (atan = 0);\n\t      this.angle = atan * h.RAD_TO_DEG;\n\t      if ((typeof this.props.angleOffset) !== 'function') {\n\t        return this.angle += this.props.angleOffset || 0;\n\t      } else {\n\t        return this.angle = this.props.angleOffset.call(this, this.angle, p);\n\t      }\n\t    } else {\n\t      return this.angle = 0;\n\t    }\n\t  };\n\n\t  MotionPath.prototype._setTransform = function(x, y, p, isInit) {\n\t    var transform;\n\t    if (this.scaler) {\n\t      x *= this.scaler.x;\n\t      y *= this.scaler.y;\n\t    }\n\t    transform = null;\n\t    if (!isInit) {\n\t      transform = typeof this.onUpdate === \"function\" ? this.onUpdate(p, {\n\t        x: x,\n\t        y: y,\n\t        angle: this.angle\n\t      }) : void 0;\n\t    }\n\t    if (this.isModule) {\n\t      return this.setModulePosition(x, y);\n\t    } else {\n\t      if (typeof transform !== 'string') {\n\t        return this.setElPosition(x, y, p);\n\t      } else {\n\t        return h.setPrefixedStyle(this.el, 'transform', transform);\n\t      }\n\t    }\n\t  };\n\n\t  MotionPath.prototype._setTransformOrigin = function(p) {\n\t    var isTransformFunOrigin, tOrigin;\n\t    if (this.props.transformOrigin) {\n\t      isTransformFunOrigin = typeof this.props.transformOrigin === 'function';\n\t      tOrigin = !isTransformFunOrigin ? this.props.transformOrigin : this.props.transformOrigin(this.angle, p);\n\t      return h.setPrefixedStyle(this.el, 'transform-origin', tOrigin);\n\t    }\n\t  };\n\n\t  MotionPath.prototype.makeMotionBlur = function(x, y) {\n\t    var absoluteAngle, coords, dX, dY, signX, signY, tailAngle;\n\t    tailAngle = 0;\n\t    signX = 1;\n\t    signY = 1;\n\t    if ((this.prevCoords.x == null) || (this.prevCoords.y == null)) {\n\t      this.speedX = 0;\n\t      this.speedY = 0;\n\t    } else {\n\t      dX = x - this.prevCoords.x;\n\t      dY = y - this.prevCoords.y;\n\t      if (dX > 0) {\n\t        signX = -1;\n\t      }\n\t      if (signX < 0) {\n\t        signY = -1;\n\t      }\n\t      this.speedX = Math.abs(dX);\n\t      this.speedY = Math.abs(dY);\n\t      tailAngle = Math.atan(dY / dX) * (180 / Math.PI) + 90;\n\t    }\n\t    absoluteAngle = tailAngle - this.angle;\n\t    coords = this.angToCoords(absoluteAngle);\n\t    this.blurX = h.clamp((this.speedX / 16) * this.props.motionBlur, 0, 1);\n\t    this.blurY = h.clamp((this.speedY / 16) * this.props.motionBlur, 0, 1);\n\t    this.setBlur({\n\t      blur: {\n\t        x: 3 * this.blurX * this.blurAmount * Math.abs(coords.x),\n\t        y: 3 * this.blurY * this.blurAmount * Math.abs(coords.y)\n\t      },\n\t      offset: {\n\t        x: 3 * signX * this.blurX * coords.x * this.blurAmount,\n\t        y: 3 * signY * this.blurY * coords.y * this.blurAmount\n\t      }\n\t    });\n\t    this.prevCoords.x = x;\n\t    return this.prevCoords.y = y;\n\t  };\n\n\t  MotionPath.prototype.setBlur = function(o) {\n\t    if (!this.isMotionBlurReset) {\n\t      this.filter.setAttribute('stdDeviation', o.blur.x + \",\" + o.blur.y);\n\t      this.filterOffset.setAttribute('dx', o.offset.x);\n\t      return this.filterOffset.setAttribute('dy', o.offset.y);\n\t    }\n\t  };\n\n\t  MotionPath.prototype.extendDefaults = function(o) {\n\t    var key, results, value;\n\t    results = [];\n\t    for (key in o) {\n\t      value = o[key];\n\t      results.push(this[key] = value);\n\t    }\n\t    return results;\n\t  };\n\n\t  MotionPath.prototype.extendOptions = function(o) {\n\t    var key, results, value;\n\t    results = [];\n\t    for (key in o) {\n\t      value = o[key];\n\t      results.push(this.props[key] = value);\n\t    }\n\t    return results;\n\t  };\n\n\t  MotionPath.prototype.then = function(o) {\n\t    var it, key, opts, prevOptions, value;\n\t    prevOptions = this.history[this.history.length - 1];\n\t    opts = {};\n\t    for (key in prevOptions) {\n\t      value = prevOptions[key];\n\t      if (!h.callbacksMap[key] && !h.tweenOptionMap[key] || key === 'duration') {\n\t        if (o[key] == null) {\n\t          o[key] = value;\n\t        }\n\t      } else {\n\t        if (o[key] == null) {\n\t          o[key] = void 0;\n\t        }\n\t      }\n\t      if (h.tweenOptionMap[key]) {\n\t        opts[key] = key !== 'duration' ? o[key] : o[key] != null ? o[key] : prevOptions[key];\n\t      }\n\t    }\n\t    this.history.push(o);\n\t    it = this;\n\t    opts.onUpdate = (function(_this) {\n\t      return function(p) {\n\t        return _this.setProgress(p);\n\t      };\n\t    })(this);\n\t    opts.onStart = (function(_this) {\n\t      return function() {\n\t        var ref;\n\t        return (ref = _this.props.onStart) != null ? ref.apply(_this) : void 0;\n\t      };\n\t    })(this);\n\t    opts.onComplete = (function(_this) {\n\t      return function() {\n\t        var ref;\n\t        return (ref = _this.props.onComplete) != null ? ref.apply(_this) : void 0;\n\t      };\n\t    })(this);\n\t    opts.onFirstUpdate = function() {\n\t      return it.tuneOptions(it.history[this.index]);\n\t    };\n\t    opts.isChained = !o.delay;\n\t    this.timeline.append(new Tween(opts));\n\t    return this;\n\t  };\n\n\t  MotionPath.prototype.tuneOptions = function(o) {\n\t    this.extendOptions(o);\n\t    return this.postVars();\n\t  };\n\n\t  MotionPath.prototype.angToCoords = function(angle) {\n\t    var radAngle, x, y;\n\t    angle = angle % 360;\n\t    radAngle = ((angle - 90) * Math.PI) / 180;\n\t    x = Math.cos(radAngle);\n\t    y = Math.sin(radAngle);\n\t    x = x < 0 ? Math.max(x, -0.7) : Math.min(x, .7);\n\t    y = y < 0 ? Math.max(y, -0.7) : Math.min(y, .7);\n\t    return {\n\t      x: x * 1.428571429,\n\t      y: y * 1.428571429\n\t    };\n\t  };\n\n\t  return MotionPath;\n\n\t})();\n\n\tmodule.exports = MotionPath;\n\n\n/***/ }),\n/* 130 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\t/*!\n\t  LegoMushroom @legomushroom http://legomushroom.com\n\t  MIT License 2014\n\t */\n\n\t/* istanbul ignore next */\n\t(function() {\n\t  var Main;\n\t  Main = (function() {\n\t    function Main(o) {\n\t      this.o = o != null ? o : {};\n\t      if (window.isAnyResizeEventInited) {\n\t        return;\n\t      }\n\t      this.vars();\n\t      this.redefineProto();\n\t    }\n\n\t    Main.prototype.vars = function() {\n\t      window.isAnyResizeEventInited = true;\n\t      this.allowedProtos = [HTMLDivElement, HTMLFormElement, HTMLLinkElement, HTMLBodyElement, HTMLParagraphElement, HTMLFieldSetElement, HTMLLegendElement, HTMLLabelElement, HTMLButtonElement, HTMLUListElement, HTMLOListElement, HTMLLIElement, HTMLHeadingElement, HTMLQuoteElement, HTMLPreElement, HTMLBRElement, HTMLFontElement, HTMLHRElement, HTMLModElement, HTMLParamElement, HTMLMapElement, HTMLTableElement, HTMLTableCaptionElement, HTMLImageElement, HTMLTableCellElement, HTMLSelectElement, HTMLInputElement, HTMLTextAreaElement, HTMLAnchorElement, HTMLObjectElement, HTMLTableColElement, HTMLTableSectionElement, HTMLTableRowElement];\n\t      return this.timerElements = {\n\t        img: 1,\n\t        textarea: 1,\n\t        input: 1,\n\t        embed: 1,\n\t        object: 1,\n\t        svg: 1,\n\t        canvas: 1,\n\t        tr: 1,\n\t        tbody: 1,\n\t        thead: 1,\n\t        tfoot: 1,\n\t        a: 1,\n\t        select: 1,\n\t        option: 1,\n\t        optgroup: 1,\n\t        dl: 1,\n\t        dt: 1,\n\t        br: 1,\n\t        basefont: 1,\n\t        font: 1,\n\t        col: 1,\n\t        iframe: 1\n\t      };\n\t    };\n\n\t    Main.prototype.redefineProto = function() {\n\t      var i, it, proto, t;\n\t      it = this;\n\t      return t = (function() {\n\t        var j, len, ref, results;\n\t        ref = this.allowedProtos;\n\t        results = [];\n\t        for (i = j = 0, len = ref.length; j < len; i = ++j) {\n\t          proto = ref[i];\n\t          if (proto.prototype == null) {\n\t            continue;\n\t          }\n\t          results.push((function(proto) {\n\t            var listener, remover;\n\t            listener = proto.prototype.addEventListener || proto.prototype.attachEvent;\n\t            (function(listener) {\n\t              var wrappedListener;\n\t              wrappedListener = function() {\n\t                var option;\n\t                if (this !== window || this !== document) {\n\t                  option = arguments[0] === 'onresize' && !this.isAnyResizeEventInited;\n\t                  option && it.handleResize({\n\t                    args: arguments,\n\t                    that: this\n\t                  });\n\t                }\n\t                return listener.apply(this, arguments);\n\t              };\n\t              if (proto.prototype.addEventListener) {\n\t                return proto.prototype.addEventListener = wrappedListener;\n\t              } else if (proto.prototype.attachEvent) {\n\t                return proto.prototype.attachEvent = wrappedListener;\n\t              }\n\t            })(listener);\n\t            remover = proto.prototype.removeEventListener || proto.prototype.detachEvent;\n\t            return (function(remover) {\n\t              var wrappedRemover;\n\t              wrappedRemover = function() {\n\t                this.isAnyResizeEventInited = false;\n\t                this.iframe && this.removeChild(this.iframe);\n\t                return remover.apply(this, arguments);\n\t              };\n\t              if (proto.prototype.removeEventListener) {\n\t                return proto.prototype.removeEventListener = wrappedRemover;\n\t              } else if (proto.prototype.detachEvent) {\n\t                return proto.prototype.detachEvent = wrappedListener;\n\t              }\n\t            })(remover);\n\t          })(proto));\n\t        }\n\t        return results;\n\t      }).call(this);\n\t    };\n\n\t    Main.prototype.handleResize = function(args) {\n\t      var computedStyle, el, iframe, isEmpty, isNoPos, isStatic, ref;\n\t      el = args.that;\n\t      if (!this.timerElements[el.tagName.toLowerCase()]) {\n\t        iframe = document.createElement('iframe');\n\t        el.appendChild(iframe);\n\t        iframe.style.width = '100%';\n\t        iframe.style.height = '100%';\n\t        iframe.style.position = 'absolute';\n\t        iframe.style.zIndex = -999;\n\t        iframe.style.opacity = 0;\n\t        iframe.style.top = 0;\n\t        iframe.style.left = 0;\n\t        computedStyle = window.getComputedStyle ? getComputedStyle(el) : el.currentStyle;\n\t        isNoPos = el.style.position === '';\n\t        isStatic = computedStyle.position === 'static' && isNoPos;\n\t        isEmpty = computedStyle.position === '' && el.style.position === '';\n\t        if (isStatic || isEmpty) {\n\t          el.style.position = 'relative';\n\t        }\n\t        if ((ref = iframe.contentWindow) != null) {\n\t          ref.onresize = (function(_this) {\n\t            return function(e) {\n\t              return _this.dispatchEvent(el);\n\t            };\n\t          })(this);\n\t        }\n\t        el.iframe = iframe;\n\t      } else {\n\t        this.initTimer(el);\n\t      }\n\t      return el.isAnyResizeEventInited = true;\n\t    };\n\n\t    Main.prototype.initTimer = function(el) {\n\t      var height, width;\n\t      width = 0;\n\t      height = 0;\n\t      return this.interval = setInterval((function(_this) {\n\t        return function() {\n\t          var newHeight, newWidth;\n\t          newWidth = el.offsetWidth;\n\t          newHeight = el.offsetHeight;\n\t          if (newWidth !== width || newHeight !== height) {\n\t            _this.dispatchEvent(el);\n\t            width = newWidth;\n\t            return height = newHeight;\n\t          }\n\t        };\n\t      })(this), this.o.interval || 62.5);\n\t    };\n\n\t    Main.prototype.dispatchEvent = function(el) {\n\t      var e;\n\t      if (document.createEvent) {\n\t        e = document.createEvent('HTMLEvents');\n\t        e.initEvent('onresize', false, false);\n\t        return el.dispatchEvent(e);\n\t      } else if (document.createEventObject) {\n\t        e = document.createEventObject();\n\t        return el.fireEvent('onresize', e);\n\t      } else {\n\t        return false;\n\t      }\n\t    };\n\n\t    Main.prototype.destroy = function() {\n\t      var i, it, j, len, proto, ref, results;\n\t      clearInterval(this.interval);\n\t      this.interval = null;\n\t      window.isAnyResizeEventInited = false;\n\t      it = this;\n\t      ref = this.allowedProtos;\n\t      results = [];\n\t      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n\t        proto = ref[i];\n\t        if (proto.prototype == null) {\n\t          continue;\n\t        }\n\t        results.push((function(proto) {\n\t          var listener;\n\t          listener = proto.prototype.addEventListener || proto.prototype.attachEvent;\n\t          if (proto.prototype.addEventListener) {\n\t            proto.prototype.addEventListener = Element.prototype.addEventListener;\n\t          } else if (proto.prototype.attachEvent) {\n\t            proto.prototype.attachEvent = Element.prototype.attachEvent;\n\t          }\n\t          if (proto.prototype.removeEventListener) {\n\t            return proto.prototype.removeEventListener = Element.prototype.removeEventListener;\n\t          } else if (proto.prototype.detachEvent) {\n\t            return proto.prototype.detachEvent = Element.prototype.detachEvent;\n\t          }\n\t        })(proto));\n\t      }\n\t      return results;\n\t    };\n\n\t    return Main;\n\n\t  })();\n\t  if (true) {\n\t    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return new Main;\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if ((typeof module === \"object\") && (typeof module.exports === \"object\")) {\n\t    return module.exports = new Main;\n\t  } else {\n\t    if (typeof window !== \"undefined\" && window !== null) {\n\t      window.AnyResizeEvent = Main;\n\t    }\n\t    return typeof window !== \"undefined\" && window !== null ? window.anyResizeEvent = new Main : void 0;\n\t  }\n\t})();\n\n\n/***/ })\n/******/ ])\n});\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports) {

eval("(function () {\n\n    function Animocon(el, options) {\n        this.el = el;\n        this.options = extend({}, this.options);\n        extend(this.options, options);\n\n        this.checked = false;\n\n        this.timeline = new mojs.Timeline();\n\n        for (var i = 0, len = this.options.tweens.length; i < len; ++i) {\n            this.timeline.add(this.options.tweens[i]);\n        }\n\n        var self = this;\n        this.el.addEventListener(clickHandler, function () {\n            if (self.checked) {\n                self.options.onUnCheck();\n            } else {\n                self.options.onCheck();\n                self.timeline.replay();\n            }\n            self.checked = !self.checked;\n        });\n    }\n\n    Animocon.prototype.options = {\n        tweens: [new mojs.Burst({})],\n        onCheck: function onCheck() {\n            return false;\n        },\n        onUnCheck: function onUnCheck() {\n            return false;\n        }\n    };\n\n    // bursts when hovering the .special-link link\n    var molinkEl = document.querySelector('.special-link');\n    if (molinkEl) {\n        var moTimeline = new mojs.Timeline(),\n            moburst1 = new mojs.Burst({\n            parent: molinkEl,\n            count: 6,\n            left: '0%',\n            top: '-20%',\n            radius: { 0: 60 },\n            children: {\n                fill: ['#988ADE', '#DE8AA0', '#8AAEDE', '#8ADEAD', '#DEC58A', '#8AD1DE'],\n                duration: 1300,\n                easing: mojs.easing.bezier(0.1, 1, 0.3, 1)\n            }\n        }),\n            moburst2 = new mojs.Burst({\n            parent: molinkEl,\n            left: '-100%', top: '-20%',\n            count: 14,\n            radius: { 0: 120 },\n            children: {\n                fill: ['#988ADE', '#DE8AA0', '#8AAEDE', '#8ADEAD', '#DEC58A', '#8AD1DE'],\n                duration: 1600,\n                delay: 100,\n                easing: mojs.easing.bezier(0.1, 1, 0.3, 1)\n            }\n        }),\n            moburst3 = new mojs.Burst({\n            parent: molinkEl,\n            left: '130%', top: '70%',\n            count: 8,\n            radius: { 0: 90 },\n            children: {\n                fill: ['#988ADE', '#DE8AA0', '#8AAEDE', '#8ADEAD', '#DEC58A', '#8AD1DE'],\n                duration: 1500,\n                delay: 200,\n                easing: mojs.easing.bezier(0.1, 1, 0.3, 1)\n            }\n        }),\n            moburst4 = new mojs.Burst({\n            parent: molinkEl,\n            left: '-20%', top: '-150%',\n            count: 14,\n            radius: { 0: 60 },\n            children: {\n                fill: ['#988ADE', '#DE8AA0', '#8AAEDE', '#8ADEAD', '#DEC58A', '#8AD1DE'],\n                duration: 2000,\n                delay: 300,\n                easing: mojs.easing.bezier(0.1, 1, 0.3, 1)\n            }\n        }),\n            moburst5 = new mojs.Burst({\n            parent: molinkEl,\n            count: 12,\n            left: '30%', top: '100%',\n            radius: { 0: 60 },\n            children: {\n                fill: ['#988ADE', '#DE8AA0', '#8AAEDE', '#8ADEAD', '#DEC58A', '#8AD1DE'],\n                duration: 1400,\n                delay: 400,\n                easing: mojs.easing.bezier(0.1, 1, 0.3, 1)\n            }\n        });\n        moTimeline.add(moburst1, moburst2, moburst3, moburst4, moburst5);\n        molinkEl.addEventListener('mouseenter', function () {\n            moTimeline.replay();\n        });\n    }\n})(window, mojs);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL3Nhc3MvYXBwLnNjc3M/NTEwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL3Nhc3MvYXBwLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL3Nhc3MvcHJlbG9hZGVyLnNjc3M/MWVkNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL3Nhc3MvcHJlbG9hZGVyLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33\n");

/***/ })
/******/ ]);